{"hash":"82edfc9c503203a4b89aaf7ee02c1b0930a87be2","data":{"markdownPage":{"id":"22ccaa42cf14100a5a62d27781d37f1c","title":"[설계] ES모델 기반 Inner 아키텍처 이해","description":"","path":"/business/zero-based-cna/","timeToRead":7,"content":"<h1 id=\"설계-es모델-기반-inner-아키텍처-이해\"><a href=\"#%EC%84%A4%EA%B3%84-es%EB%AA%A8%EB%8D%B8-%EA%B8%B0%EB%B0%98-inner-%EC%95%84%ED%82%A4%ED%85%8D%EC%B2%98-%EC%9D%B4%ED%95%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[설계] ES모델 기반 Inner 아키텍처 이해</h1>\n<h3 id=\"productchanged-이벤트를-가진-product-마이크로서비스\"><a href=\"#productchanged-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A5%BC-%EA%B0%80%EC%A7%84-product-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ProductChanged 이벤트를 가진 Product 마이크로서비스</h3>\n<p>이벤트스토밍 결과를 Cloud Native Application(CNA) 구축 시 많이 적용되는 Spring Boot(스프링 부트)와 Event-Driven 방식을 사용하여, 온-사이트에 적용가능한  코드 구현을 진행합니다.</p>\n<h4 id=\"1-스프링-부트를-처음-시작할-때-가장-좋은-방법은-httpsstartspringio-에서-시작하는-것입니다-브라우저에서-다음-사이트를-접속하여-스프링-부트를-시작합니다\"><a href=\"#1-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EB%A5%BC-%EC%B2%98%EC%9D%8C-%EC%8B%9C%EC%9E%91%ED%95%A0-%EB%95%8C-%EA%B0%80%EC%9E%A5-%EC%A2%8B%EC%9D%80-%EB%B0%A9%EB%B2%95%EC%9D%80-httpsstartspringio-%EC%97%90%EC%84%9C-%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EA%B2%83%EC%9E%85%EB%8B%88%EB%8B%A4-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90%EC%84%9C-%EB%8B%A4%EC%9D%8C-%EC%82%AC%EC%9D%B4%ED%8A%B8%EB%A5%BC-%EC%A0%91%EC%86%8D%ED%95%98%EC%97%AC-%EC%8A%A4%ED%94%84%EB%A7%81-%EB%B6%80%ED%8A%B8%EB%A5%BC-%EC%8B%9C%EC%9E%91%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 스프링 부트를 처음 시작할 때 가장 좋은 방법은 <a href=\"https://start.spring.io/\" target=\"_blank\" rel=\"noopener noreferrer\">https://start.spring.io/</a> 에서 시작하는 것입니다. 브라우저에서 다음 사이트를 접속하여 스프링 부트를 시작합니다.</h4>\n<ul>\n<li><a href=\"https://start.spring.io/\" target=\"_blank\" rel=\"noopener noreferrer\">https://start.spring.io/</a></li>\n</ul>\n<h4 id=\"2-옵션\"><a href=\"#2-%EC%98%B5%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 옵션</h4>\n<ul>\n<li>Project : Maven</li>\n<li>Language : Java</li>\n<li>Spring Boot 버전 2.5.8 선택 </li>\n<li>Packaging : Jar</li>\n<li>java Version : 11</li>\n</ul>\n<h4 id=\"3-maven-project-와-java-를-선택하고-디펜던시dependencies에-다음-3개를-추가해-generate-버튼으로-다운로드-받은-후-idevs-code에-프로젝트를-로드-합니다\"><a href=\"#3-maven-project-%EC%99%80-java-%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%98%EA%B3%A0-%EB%94%94%ED%8E%9C%EB%8D%98%EC%8B%9Cdependencies%EC%97%90-%EB%8B%A4%EC%9D%8C-3%EA%B0%9C%EB%A5%BC-%EC%B6%94%EA%B0%80%ED%95%B4-generate-%EB%B2%84%ED%8A%BC%EC%9C%BC%EB%A1%9C-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C-%EB%B0%9B%EC%9D%80-%ED%9B%84-idevs-code%EC%97%90-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A5%BC-%EB%A1%9C%EB%93%9C-%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Maven Project 와 Java 를 선택하고, 디펜던시(Dependencies)에 다음 3개를 추가해 Generate 버튼으로 다운로드 받은 후, IDE(VS Code)에 프로젝트를 로드 합니다.</h4>\n<ul>\n<li>\n<ol>\n<li>Rest Repositories : 레파지토리 패턴을 통해 CRUD API를 생성해 줍니다.</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>Spring Data JPA : Java Persistence API의 약어, 자바 ORM 기술에 대한 표준 명세로 API 기반 영속성 관리 도구</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>H2 : Java 기반 오픈소스 인메모리 DB</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"좌측-explorer에서-우클릭-후-demozip을-ide에-load\"><a href=\"#%EC%A2%8C%EC%B8%A1-explorer%EC%97%90%EC%84%9C-%EC%9A%B0%ED%81%B4%EB%A6%AD-%ED%9B%84-demozip%EC%9D%84-ide%EC%97%90-load\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>좌측 Explorer에서 우클릭 후 demo.zip을 IDE에 Load</h4>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">unzip</span> demo.zip</code></pre>\n<h4 id=\"3-먼저-aggregate-를-생성-합니다\"><a href=\"#3-%EB%A8%BC%EC%A0%80-aggregate-%EB%A5%BC-%EC%83%9D%EC%84%B1-%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 먼저, Aggregate 를 생성 합니다.</h4>\n<ul>\n<li>Aggregate 는 이벤트 스토밍의 노란색 결과 입니다.</li>\n<li>Product Class 를 생성 합니다.</li>\n<li>상품 Entity 를 id, name, stock 맴버 변수를 가진 정의하고 get,set 메서드를 생성하여 줍니다.</li>\n<li>클레스 상단에 @Entity 어노테이션을 달아서 Aggregate 선언을 하여 줍니다.</li>\n<li>@Entity 어노테이션은 JPA 방식을 사용합니다. 이는 Id 값이 필수입니다.</li>\n<li>id 로 선언한 변수에 @Id @GeneratedValue 를 선언하여 줍니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span>\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span>\n    <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> stock<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// get/set 메서드</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>import 문 추가 </li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> javax<span class=\"token punctuation\">.</span><span class=\"token property-access\">persistence</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Entity</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> javax<span class=\"token punctuation\">.</span><span class=\"token property-access\">persistence</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">GeneratedValue</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword module\">import</span> javax<span class=\"token punctuation\">.</span><span class=\"token property-access\">persistence</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">Id</span></span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"4-command-를-생성-합니다\"><a href=\"#4-command-%EB%A5%BC-%EC%83%9D%EC%84%B1-%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Command 를 생성 합니다.</h4>\n<ul>\n<li>ProductRepository interface 를 생성하여 줍니다.</li>\n<li>CrudRepository&#x3C;Product, Long> 를 extends 하여 줍니다.</li>\n<li>CrudRepository&#x3C;> 의 두개의 변수는 Entity Type과 Primary Key(Entity Id) Type 입니다.</li>\n<li>위와같이 선언만 하면, Entity 의 Repository 패턴이 자동 생성되어, Product 엔터티의 CRUD에 해당되는 API 가 자동으로 생성이 됩니다.</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span><span class=\"token property-access\">example</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">demo</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProductRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CrudRepository</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Product</span><span class=\"token punctuation\">,</span> <span class=\"token maybe-class-name\">Long</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>import 문 추가 </li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword module\">import</span> org<span class=\"token punctuation\">.</span><span class=\"token property-access\">springframework</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">data</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">repository</span><span class=\"token punctuation\">.</span><span class=\"token property-access\"><span class=\"token maybe-class-name\">CrudRepository</span></span><span class=\"token punctuation\">;</span></code></pre>\n<h4 id=\"5-repository-패턴을-사용하여-product-엔터티의-기본-라이프-사이클-crud-를-실습하여-봅니다\"><a href=\"#5-repository-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-product-%EC%97%94%ED%84%B0%ED%8B%B0%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EB%9D%BC%EC%9D%B4%ED%94%84-%EC%82%AC%EC%9D%B4%ED%81%B4-crud-%EB%A5%BC-%EC%8B%A4%EC%8A%B5%ED%95%98%EC%97%AC-%EB%B4%85%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Repository 패턴을 사용하여 Product 엔터티의 기본 라이프 사이클 (CRUD) 를 실습하여 봅니다.</h4>\n<ul>\n<li>스프링 부트를 실행 하는 방법은 mvn spring-boot:run 입니다.</li>\n<li>메이븐 명령어로 spring-boot 라는 플러그인의 run 명령어를 실행 합니다.</li>\n<li>spring-boot 플러그인은 pom.xml 파일에 설정되어 있습니다.</li>\n</ul>\n<pre class=\"language-xml\"><code class=\"language-xml\">    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>build</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugins</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>plugin</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n\t\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-maven-plugin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugin</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>plugins</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>build</span><span class=\"token punctuation\">></span></span></code></pre>\n<ul>\n<li>실행시 기본 포트인 8080 으로 실행됩니다.</li>\n<li>http 명령으로 localhost:8080 을 호출하여 봅니다.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">http localhost:8080\nhttp http://localhost:8080/products\nhttp POST localhost:8080/products <span class=\"token assign-left variable\">name</span><span class=\"token operator\">=</span><span class=\"token string\">\"TV\"</span> <span class=\"token assign-left variable\">stock</span><span class=\"token operator\">=</span><span class=\"token number\">10</span>\nhttp <span class=\"token string\">\"http://localhost:8080/products/1\"</span>\nhttp PATCH <span class=\"token string\">\"http://localhost:8080/products/1\"</span> <span class=\"token assign-left variable\">stock</span><span class=\"token operator\">=</span><span class=\"token number\">20</span>\nhttp DELETE <span class=\"token string\">\"http://localhost:8080/products/1\"</span>\nhttp <span class=\"token string\">\"http://localhost:8080/products/1\"</span></code></pre>\n<ul>\n<li>파일 두개만 만들었지만 Aggregate 와 Command 가 생성 된 것을 확인 할 수 있습니다.</li>\n</ul>\n<h4 id=\"6-event-를-생성합니다\"><a href=\"#6-event-%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>6. Event 를 생성합니다.</h4>\n<ul>\n<li>이벤트는 일어난 사실에 대한 결과이기 때문에 과거분사(PP, Past Participle) 형으로 작성 합니다.</li>\n<li>상품 정보가 변경 되었을 때 변경 사실을 알리는 ProductChanged 이벤트를 만들어 봅니다.</li>\n<li>ProductChanged 클레스를 생성하고, 변수를 설정합니다.</li>\n<li>이벤트는 다른 서비스에서 받아보는 정보입니다. 그렇기 때문에 자세하게 적어주어야 할 필요가 있습니다. json 으로 데이터를 보내기 때문에 eventType 이라는 변수를 만들고, 생성자에서 이벤트 이름을 적어 줍니다.</li>\n<li>세부 정보도 다른 서비스에서 명확히 이해하기 쉽도록 그냥 name 이 아닌 productName 처럼 구체적으로 작성 합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductChanged</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">String</span> eventType<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Long</span> productId<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">String</span> productName<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> productStock<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ProductChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eventType <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getSimpleName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// get/set 메서드</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<h4 id=\"7-생성된-event-를-발송합니다\"><a href=\"#7-%EC%83%9D%EC%84%B1%EB%90%9C-event-%EB%A5%BC-%EB%B0%9C%EC%86%A1%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>7. 생성된 Event 를 발송합니다.</h4>\n<ul>\n<li>이벤트는 Aggregate 내의 상태 변화에 의해서 발생하기 때문에, 이벤트를 보내는 로직은 Entity의 lifecycle 에 작성하게 됩니다.</li>\n<li>Product.java 에 데이터가 입력되었을때의 Lifecycle 인 @PostPersist 어노테이션에 이벤트를 생성하여 값을 셋팅 합니다.</li>\n<li>ObjectMapper 를 사용하여 json 으로 변환 합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostPersist</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eventPublish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">ProductChanged</span> productChanged <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProductChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        productChanged<span class=\"token punctuation\">.</span><span class=\"token function\">setProductId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        productChanged<span class=\"token punctuation\">.</span><span class=\"token function\">setProductName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        productChanged<span class=\"token punctuation\">.</span><span class=\"token function\">setProductStock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            json <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>productChanged<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSON format exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>import 문 추가 </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">import javax.persistence.PostPersist;\n\nimport com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.databind.ObjectMapper;</code></pre>\n<ul>\n<li>서비스를 재시작 후 Aggregate 에 데이터를 입력하여 정상적으로 json 이 생성되는지 확인 합니다.</li>\n<li>http POST localhost:8080/products name=“TV” stock=10</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">{&quot;eventType&quot;:&quot;ProductChanged&quot;,&quot;productId&quot;:1,&quot;productName&quot;:&quot;TV&quot;,&quot;productStock&quot;:10}</code></pre>\n<h4 id=\"8-서비스에-카프카-연결\"><a href=\"#8-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-%EC%B9%B4%ED%94%84%EC%B9%B4-%EC%97%B0%EA%B2%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>8. 서비스에 카프카 연결</h4>\n<ul>\n<li>Spring Cloud Stream Application 모델\n<img src=\"https://user-images.githubusercontent.com/43136526/119310820-4354ea00-bcab-11eb-8309-7f8431ad1715.png\" alt=\"image\"></li>\n<li>Spring Cloud Streams Application에서 Kafka 바인더를 사용하기 위하여 다음 라이브러리를 pom.xml 에 추가합니다.</li>\n</ul>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token comment\">&lt;!-- kafka streams --></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-stream-kafka<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-actuator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></code></pre>\n<ul>\n<li>spring cloud 는 spring-boot 와 버전에 대한 종속성이 있습니다. 그리하여 각각의 spring-cloud 프로젝트 별로 버전을 직접 명시하지 않고, 종속성을 선언하는 를 사용하여야 합니다.</li>\n<li>아래와 같이 를 pom.xml 에 추가하여 줍니다.</li>\n</ul>\n<pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencyManagement</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependencies</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-dependencies<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>${spring-cloud.version}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>type</span><span class=\"token punctuation\">></span></span>pom<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>type</span><span class=\"token punctuation\">></span></span>\n                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>scope</span><span class=\"token punctuation\">></span></span>import<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>scope</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencies</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependencyManagement</span><span class=\"token punctuation\">></span></span></code></pre>\n<ul>\n<li>pom.xml 에서 ${} 로 시작하는 부분은 변수(properties) 처리를 하겠다는 의미입니다. 상단의 부분에 위에서 변수처리함 &#x3C;spring-cloud.version> 를 추가하여 줍니다.</li>\n<li>여기서 버전을 명시할때 주의할 점은 Spring-boot에 매핑되는 Spring-cloud 버전을 사용해야 합니다.</li>\n<li>매핑되는 버전 정보는 스프링 클라우드 Site에서 확인 할 수 있습니다.</li>\n<li><a href=\"https://spring.io/projects/spring-cloud\" target=\"_blank\" rel=\"noopener noreferrer\">https://spring.io/projects/spring-cloud</a> 의 Release Trains 참고</li>\n<li>Spring-boot 2.3.1과 Spring Cloud Hoxton을 적용합니다. </li>\n</ul>\n<pre class=\"language-xml\"><code class=\"language-xml\"># pom.xml 8라인\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.3.1.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></code></pre>\n<pre class=\"language-xml\"><code class=\"language-xml\"># pom.xml 16~19라인\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>properties</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>java.version</span><span class=\"token punctuation\">></span></span>11<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>java.version</span><span class=\"token punctuation\">></span></span>\n\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>spring-cloud.version</span><span class=\"token punctuation\">></span></span>Hoxton.SR12<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>spring-cloud.version</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>properties</span><span class=\"token punctuation\">></span></span></code></pre>\n<ul>\n<li>DemoApplication.java 파일에 스트림을 바인딩 합니다.</li>\n<li>@EnableBinding(Processor.class)</li>\n<li>streams 은 메세지의 흐름으로 input 메세지와 output 메세지가 존재합니다.</li>\n<li>Processor 방식은 input 과 output 을 모두 사용하는 방식입니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringApplication</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">SpringBootApplication</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">EnableBinding</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StreamListener</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Processor</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">ApplicationContext</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span>handler<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Payload</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@SpringBootApplication</span>\n<span class=\"token annotation punctuation\">@EnableBinding</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoApplication</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">ApplicationContext</span> applicationContext<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tapplicationContext <span class=\"token operator\">=</span> <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DemoApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>stream 을 kafka 와 연결하기 위하여 application.yaml 파일에 아래 설정을 추가 합니다.</li>\n<li>kafka brokers로 localhost:9092 를 사용한다는 의미입니다. 카프카 설치시 기본 포트가 9092 입니다.</li>\n<li>bindings.input 과 bindings.output 은 기본 채널입니다. 만약 채널명을 변경 하고 싶으면 Processor 를 새로 만들어야 합니다.</li>\n<li><a href=\"https://github.com/event-storming/products/blob/master/src/main/java/com/example/template/config/kafka/KafkaProcessor.java\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/event-storming/products/blob/master/src/main/java/com/example/template/config/kafka/KafkaProcessor.java</a></li>\n<li>destination 은 목적지라는 뜻인데, kafka 에서는 topic 이름이 됩니다.</li>\n<li>즉, 해당 설정은 shop 이라는 토픽에 메세지를 주고 받겠다는 의미입니다.</li>\n<li>환경정보 파일인 resouces/applications.properties를 application.yml로 변경 후, 아래 내용을 추가합니다.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">cloud</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">stream</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">kafka</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">binder</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">brokers</span><span class=\"token punctuation\">:</span> localhost<span class=\"token punctuation\">:</span><span class=\"token number\">9092</span>\n      <span class=\"token key atrule\">bindings</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">input</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">group</span><span class=\"token punctuation\">:</span> product\n          <span class=\"token key atrule\">destination</span><span class=\"token punctuation\">:</span> shop\n          <span class=\"token key atrule\">contentType</span><span class=\"token punctuation\">:</span> application/json\n        <span class=\"token key atrule\">output</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">destination</span><span class=\"token punctuation\">:</span> shop\n          <span class=\"token key atrule\">contentType</span><span class=\"token punctuation\">:</span> application/json   </code></pre>\n<h4 id=\"9-이벤트를-kafka-에-발송\"><a href=\"#9-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A5%BC-kafka-%EC%97%90-%EB%B0%9C%EC%86%A1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>9. 이벤트를 kafka 에 발송</h4>\n<ul>\n<li>7번에서 추가한  Product.java 리소스의 @PostPersist 라이프사이클을  스트림에 메세지를 발송하는 코드로 수정합니다.</li>\n<li>어그리게잇(Product.java) 코드 수정</li>\n<li>라이브러리 임포트</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Processor</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageChannel</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageHeaders</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span>support<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MessageBuilder</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">MimeTypeUtils</span></span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>Spring 에서 Bean으로 등록되지 않은 객체에서 Bean 객체를 사용하기 위해 @Autowired 대신, 직접 applicationContext 에서 getBean으로 참조합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostPersist</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">eventPublish</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">ProductChanged</span> productChanged <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ProductChanged</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tproductChanged<span class=\"token punctuation\">.</span><span class=\"token function\">setProductId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tproductChanged<span class=\"token punctuation\">.</span><span class=\"token function\">setProductName</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tproductChanged<span class=\"token punctuation\">.</span><span class=\"token function\">setProductStock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getStock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">ObjectMapper</span> objectMapper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ObjectMapper</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">String</span> json <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\njson <span class=\"token operator\">=</span> objectMapper<span class=\"token punctuation\">.</span><span class=\"token function\">writeValueAsString</span><span class=\"token punctuation\">(</span>productChanged<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">JsonProcessingException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"JSON format exception\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token class-name\">Processor</span> processor <span class=\"token operator\">=</span> <span class=\"token class-name\">DemoApplication</span><span class=\"token punctuation\">.</span>applicationContext<span class=\"token punctuation\">.</span><span class=\"token function\">getBean</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token class-name\">MessageChannel</span> outputChannel <span class=\"token operator\">=</span> processor<span class=\"token punctuation\">.</span><span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\toutputChannel<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageBuilder</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">withPayload</span><span class=\"token punctuation\">(</span>json<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">setHeader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MessageHeaders</span><span class=\"token punctuation\">.</span>CONTENT_TYPE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MimeTypeUtils</span><span class=\"token punctuation\">.</span>APPLICATION_JSON<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>수정 후 서비스를 재시작한 다음 REST API로 상품 등록 시, 카프카에 이벤트 메시지가 도달하는지 확인 합니다.</li>\n<li>메시지는 Kafka Consumer로써 shop 토픽(topic) 모니터링으로 확인 가능합니다.</li>\n<li>카프카 토픽 모니터링</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">/usr/local/kafka/bin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic shop</code></pre>\n<ul>\n<li>이벤트 발행</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">http POST localhost:8080/products name=\"TV\" stock=10</code></pre>\n<h4 id=\"10-이벤트를-수신하는-policy-를-생성합니다\"><a href=\"#10-%EC%9D%B4%EB%B2%A4%ED%8A%B8%EB%A5%BC-%EC%88%98%EC%8B%A0%ED%95%98%EB%8A%94-policy-%EB%A5%BC-%EC%83%9D%EC%84%B1%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>10. 이벤트를 수신하는 Policy 를 생성합니다.</h4>\n<ul>\n<li>Event에 대응되는 Policy(폴리시)는 다른 마이크로서비스(팀)에서 수신 합니다.\n즉, 상품 서비스에서 ProductChanged 이벤트가 발생하면 주문이나 배송 서비스에서 이를 수신 후 각 서비스에 맞는 Biz-Logic을 처리하지만, 편의상 Kafka로부터 메세지 수신만 확인합니다.</li>\n<li>PolicyHandler.java 를 생성하고하고 @StreamListener(Processor.INPUT) 를 추가하여 스트림을 수신합니다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>demo</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">PolicyHandler</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Processor</span><span class=\"token punctuation\">.</span>INPUT<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onEventByString</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">ProductChanged</span> productChanged<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>productChanged<span class=\"token punctuation\">.</span><span class=\"token function\">getEventType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>productChanged<span class=\"token punctuation\">.</span><span class=\"token function\">getProductName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>productChanged<span class=\"token punctuation\">.</span><span class=\"token function\">getProductStock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>import 문 추가 </li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">StreamListener</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span>handler<span class=\"token punctuation\">.</span>annotation<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Payload</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Service</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>cloud<span class=\"token punctuation\">.</span>stream<span class=\"token punctuation\">.</span>messaging<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Processor</span></span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>String 이 아닌 객체 자체를 받아도 StreamListener 에서 객체 변환을 하여 줍니다.</li>\n<li>위의 카프카에 데이터를 보내는 명령을 호출하여 메세지를 수신하는지 확인 합니다.</li>\n</ul>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" ES모델 기반 Inner 아키텍처 이해","anchor":"#설계-es모델-기반-inner-아키텍처-이해"},{"depth":3,"value":"ProductChanged 이벤트를 가진 Product 마이크로서비스","anchor":"#productchanged-이벤트를-가진-product-마이크로서비스"},{"depth":4,"value":"1. 스프링 부트를 처음 시작할 때 가장 좋은 방법은  에서 시작하는 것입니다. 브라우저에서 다음 사이트를 접속하여 스프링 부트를 시작합니다.","anchor":"https://start.spring.io/"},{"depth":4,"value":"2. 옵션","anchor":"#2-옵션"},{"depth":4,"value":"3. Maven Project 와 Java 를 선택하고, 디펜던시(Dependencies)에 다음 3개를 추가해 Generate 버튼으로 다운로드 받은 후, IDE(VS Code)에 프로젝트를 로드 합니다.","anchor":"#3-maven-project-와-java-를-선택하고-디펜던시dependencies에-다음-3개를-추가해-generate-버튼으로-다운로드-받은-후-idevs-code에-프로젝트를-로드-합니다"},{"depth":4,"value":"좌측 Explorer에서 우클릭 후 demo.zip을 IDE에 Load","anchor":"#좌측-explorer에서-우클릭-후-demozip을-ide에-load"},{"depth":4,"value":"3. 먼저, Aggregate 를 생성 합니다.","anchor":"#3-먼저-aggregate-를-생성-합니다"},{"depth":4,"value":"4. Command 를 생성 합니다.","anchor":"#4-command-를-생성-합니다"},{"depth":4,"value":"5. Repository 패턴을 사용하여 Product 엔터티의 기본 라이프 사이클 (CRUD) 를 실습하여 봅니다.","anchor":"#5-repository-패턴을-사용하여-product-엔터티의-기본-라이프-사이클-crud-를-실습하여-봅니다"},{"depth":4,"value":"6. Event 를 생성합니다.","anchor":"#6-event-를-생성합니다"},{"depth":4,"value":"7. 생성된 Event 를 발송합니다.","anchor":"#7-생성된-event-를-발송합니다"},{"depth":4,"value":"8. 서비스에 카프카 연결","anchor":"#8-서비스에-카프카-연결"},{"depth":4,"value":"9. 이벤트를 kafka 에 발송","anchor":"#9-이벤트를-kafka-에-발송"},{"depth":4,"value":"10. 이벤트를 수신하는 Policy 를 생성합니다.","anchor":"#10-이벤트를-수신하는-policy-를-생성합니다"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}}]}},"context":{}}