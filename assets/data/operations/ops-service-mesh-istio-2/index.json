{"hash":"49f02bf9a1ddbf017efeb189302ebd145a2955d8","data":{"markdownPage":{"id":"872d7fe0e1f4dc413920d4d10809ae33","title":"[Service Mesh] Istio-2","description":"","path":"/operations/ops-service-mesh-istio-2/","timeToRead":3,"content":"<h1 id=\"service-mesh-istio-2\"><a href=\"#service-mesh-istio-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[Service Mesh] Istio-2</h1>\n<h1 id=\"service-mesh-istio-2-1\"><a href=\"#service-mesh-istio-2-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[Service Mesh] Istio-2</h1>\n<h2 id=\"download--install-istio\"><a href=\"#download--install-istio\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Download &#x26; Install Istio</h2>\n<ol>\n<li>본 랩에서는 Istio Service Mesh를 내 클러스터에 설치하고, 모니터링을 위한 대쉬보드를 추가 설정 해 본다.</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">export ISTIO_VERSION=1.14.5\ncurl -L https://istio.io/downloadIstio | ISTIO_VERSION=$ISTIO_VERSION TARGET_ARCH=x86_64 sh -</code></pre>\n<ol>\n<li>Istio 패키지 폴더로 이동시킨다 </li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">cd istio-$ISTIO_VERSION</code></pre>\n<p>   해당 디렉토리에는 다음의 내용을 포함하고 있다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">- 샘플애플리케이션: `samples/`\n- `istioctl` 클라이언트 툴은\n  `bin/` 디렉토리에 포함되어있다.</code></pre>\n<ol>\n<li><code>istioctl</code> 클라이언트를 PATH에 잡아준다:</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">export PATH=$PWD/bin:$PATH</code></pre>\n<h2 id=\"install-istio\"><a href=\"#install-istio\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Install Istio</h2>\n<ol>\n<li>기본적인 구성인 <code>demo</code> 를 기반으로 설치한다. </li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">istioctl install --set profile=demo --set hub=gcr.io/istio-release</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">    ✔ Istio core installed\n    ✔ Istiod installed\n    ✔ Egress gateways installed\n    ✔ Ingress gateways installed\n    ✔ Installation complete</code></pre>\n<h2 id=\"istio-add-on-dashboard-설치\"><a href=\"#istio-add-on-dashboard-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Istio add-on Dashboard 설치</h2>\n<p>Istio 는 다른 텔레메트리 모니터링 툴과 같이 제공이 된다. 이 툴은 서비스 매시의 구조를 쉽게 들여다 볼 수 있도록 되어있어 서비스간 호출 구조와 핼쓰상태를 쉽게 이해할 수 있도록 CNCF(<a href=\"http://cncf.io\" target=\"_blank\" rel=\"noopener noreferrer\">http://cncf.io</a>)에 등록된 GUI기반 모니터링 도구가 제공된다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f samples/addons</code></pre>\n<h3 id=\"모니터링tracing--monitoring-툴-설정\"><a href=\"#%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81tracing--monitoring-%ED%88%B4-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>모니터링(Tracing &#x26; Monitoring) 툴 설정</h3>\n<p>배포된 마이크로서비스들의 토폴로지를 보여주는 에드온 서버로, 사용자 트레픽의 흐름이나 설정된 이스티오 구성요소들의 동작상황을 실시간 감지하여 그래피컬하게 제공해 준다. </p>\n<h4 id=\"monitoring-server---kiali\"><a href=\"#monitoring-server---kiali\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Monitoring Server - Kiali</h4>\n<ul>\n<li>정상 설치 후, ServiceType을 ClusterIP에서 LoadBalancer로 변경한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl patch svc kiali -n istio-system -p &#39;{&quot;spec&quot;: {&quot;type&quot;: &quot;LoadBalancer&quot;}}&#39;</code></pre>\n<ul>\n<li>모니터링 시스템(kiali) 접속 : 브라우저의 새 탭에서 생성된 엔드포인트로 접속한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get service -n istio-system</code></pre>\n<ul>\n<li>kiali EXTERNAL-IP:20001 <code>(admin/admin)</code></li>\n</ul>\n<h4 id=\"tracing-server---jaeger\"><a href=\"#tracing-server---jaeger\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tracing Server - Jaeger</h4>\n<p>외부 요청이 응답으로 나가기까지 백엔드에서의 마이크로서비스간 호출 순서와 각 서비스들의 리드 타임 및 각 호출에서의 HTTP Header 내용을 조회할 수 있는 추적 서버이다. </p>\n<ul>\n<li>정상 설치 후, ServiceType을 ClusterIP에서 LoadBalancer로 변경한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl patch svc tracing -n istio-system -p &#39;{&quot;spec&quot;: {&quot;type&quot;: &quot;LoadBalancer&quot;}}&#39;</code></pre>\n<ul>\n<li>분산추적 시스템(tracing) 접속 : 브라우저의 새 탭에서 생성된 엔드포인트로 접속한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get service -n istio-system</code></pre>\n<ul>\n<li>tracing EXTERNAL-IP:80</li>\n</ul>\n<h2 id=\"how-to-inject-sidecar-on-istio-environment\"><a href=\"#how-to-inject-sidecar-on-istio-environment\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>How to inject Sidecar on Istio environment</h2>\n<p>클러스터에 설치된 Istio, 서비스 메시는 자동으로 사이드카(Sidecar)를 Pod 내에 인잭션하지 않는다. 배포 시, 전처리 과정을 거치거나, 지정된 Label을 가진 네임스페이스 상에서 동작한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">#1. By using the  &quot;Istioctl kube-inject&quot; preprocessing command\ne.g. \n$ kubectl apply -f &lt;(istioctl kube-inject -f Deployment.yml)</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">#2. By installing on the namespace where Istio is enabled\ne.g. \n$ kubectl label namespace tutorial istio-injection=enabled\n$ kubectl apply -f Deployment.yml -n tutorial</code></pre>\n<h2 id=\"uninstall\"><a href=\"#uninstall\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Uninstall</h2>\n<p>The Istio uninstall deletes the RBAC permissions and all resources hierarchically\nunder the <code>istio-system</code> namespace. It is safe to ignore errors for non-existent\nresources because they may have been deleted hierarchically.</p>\n<pre class=\"language-text\"><code class=\"language-text\">cd istio-$ISTIO_VERSION\nkubectl delete -f samples/addons\nistioctl manifest generate --set profile=demo | kubectl delete --ignore-not-found=true -f -</code></pre>\n<p>The <code>istio-system</code> namespace is not removed by default.\nIf no longer needed, use the following command to remove it:</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl delete namespace istio-system</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" Istio-2","anchor":"#service-mesh-istio-2"},{"depth":1,"value":" Istio-2","anchor":"#service-mesh-istio-2-1"},{"depth":2,"value":"Download & Install Istio","anchor":"#download--install-istio"},{"depth":2,"value":"Install Istio","anchor":"#install-istio"},{"depth":2,"value":"Istio add-on Dashboard 설치","anchor":"#istio-add-on-dashboard-설치"},{"depth":3,"value":"모니터링(Tracing & Monitoring) 툴 설정","anchor":"#모니터링tracing--monitoring-툴-설정"},{"depth":4,"value":"Monitoring Server - Kiali","anchor":"#monitoring-server---kiali"},{"depth":4,"value":"Tracing Server - Jaeger","anchor":"#tracing-server---jaeger"},{"depth":2,"value":"How to inject Sidecar on Istio environment","anchor":"#how-to-inject-sidecar-on-istio-environment"},{"depth":2,"value":"Uninstall","anchor":"#uninstall"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}}]}},"context":{}}