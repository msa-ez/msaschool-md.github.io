{"hash":"111274b6c679aae8379740b3dad993eb43961e68","data":{"markdownPage":{"id":"b41d82cb2ac13f53e6f7b94856cf73a2","title":"MSA 모니터링 with installing Grafana","description":"","path":"/operations/k8s-monitoring/","timeToRead":2,"content":"<h1 id=\"msa-모니터링-with-installing-grafana\"><a href=\"#msa-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-with-installing-grafana\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MSA 모니터링 with installing Grafana</h1>\n<h1 id=\"msa-모니터링-with-installing-grafana-1\"><a href=\"#msa-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-with-installing-grafana-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MSA 모니터링 with installing Grafana</h1>\n<h3 id=\"kubernetes-monitoring\"><a href=\"#kubernetes-monitoring\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kubernetes Monitoring</h3>\n<ul>\n<li>CNCF의 모니터링 스텍인 프로메테우스와 Grafana를 사용해 k8s와 클러스터에 배포된 리소스를 모니터링 한다.</li>\n</ul>\n<h3 id=\"deploy-prometheus--grafana-monitoring-stack-on-kubernetes\"><a href=\"#deploy-prometheus--grafana-monitoring-stack-on-kubernetes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deploy Prometheus / Grafana Monitoring Stack on Kubernetes</h3>\n<h4 id=\"step-1-clone-kube-prometheus-project\"><a href=\"#step-1-clone-kube-prometheus-project\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Step 1: Clone kube-prometheus project</h4>\n<pre class=\"language-text\"><code class=\"language-text\">cd /home/project\ngit clone https://github.com/prometheus-operator/kube-prometheus.git\ncd kube-prometheus</code></pre>\n<h4 id=\"step-2-create-monitoring-namespace-customresourcedefinitions--operator-pod\"><a href=\"#step-2-create-monitoring-namespace-customresourcedefinitions--operator-pod\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Step 2: Create monitoring namespace, CustomResourceDefinitions &#x26; operator pod</h4>\n<blockquote>\n<p>rometheus Operator는 Prometheus 기반 Kubernetes 모니터링 스택을 관리하기 위한 Kubernetes Operator 패턴을 구현</p>\n</blockquote>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create -f manifests/setup</code></pre>\n<h4 id=\"step-3-deploy-prometheus-monitoring-stack-on-kubernetes\"><a href=\"#step-3-deploy-prometheus-monitoring-stack-on-kubernetes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Step 3: Deploy Prometheus Monitoring Stack on Kubernetes</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create -f manifests/</code></pre>\n<ul>\n<li>설처된 프로메테우스 Pod를 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get pods -n monitoring</code></pre>\n<ul>\n<li>설치된 서비스 목록을 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get svc -n monitoring</code></pre>\n<h4 id=\"step-4-access-prometheus-grafana-and-alertmanager-dashboards\"><a href=\"#step-4-access-prometheus-grafana-and-alertmanager-dashboards\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Step 4: Access Prometheus, Grafana, and Alertmanager dashboards</h4>\n<ul>\n<li>\n<p>서비스를 통해 Prometheus와 Grafana, Alertmanager에 접속한다.</p>\n<blockquote>\n<p>kubectl port-forward을 이용하거나,\nService expose type를 수정한다. </p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># Service expose type를 수정\nkubectl edit service/grafana -n monitoring</code></pre>\n<blockquote>\n<p>vi 편집기로 실행정보가 오픈된다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">: 입력\n%s/ClusterIP/LoadBalancer/g 입력후엔터\n:wq! 입력후 엔터</code></pre>\n<p>grafana 서비스가 LoadBalancer 타입으로 수정된다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get svc -n monitoring</code></pre>\n<ul>\n<li>생성된 External-IP:3000 을 복사하여웹브라우저에서  접속한다.</li>\n<li>디폴드 로그인 정보(admin / admin)를 입력한다.</li>\n<li>\n<img width=\"789\" alt=\"grafana\" src=\"https://user-images.githubusercontent.com/35618409/153416099-0958cc51-705c-4e39-848c-f77f90769ddc.png\">\n</li>\n</ul>\n</blockquote>\n<h3 id=\"kubernetes-monitoring-1\"><a href=\"#kubernetes-monitoring-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kubernetes Monitoring</h3>\n<ul>\n<li>설치된 프로메테우스와 Grafana 스텍으로 쿠버네티스를 리소스를 모니터링한다.</li>\n<li>Grafana 왼쪽 메뉴에서 돋보기를 클릭한다.</li>\n</ul>\n<img width=\"789\" alt=\"grafana\" src=\"https://user-images.githubusercontent.com/35618409/153418022-baf78411-a123-4c62-937a-9905d38eee81.png\">\n<ul>\n<li>클릭 후, 나타나는 Default 폴더를 펼친 후 PreSet 목록 중 원하는 차트를 클릭한다.</li>\n<li>클릭한 주제의 차트가 아래처럼 출력된다.</li>\n</ul>\n<img width=\"789\" alt=\"grafana\" src=\"https://user-images.githubusercontent.com/35618409/153418382-d93ddaa1-9352-4503-adcf-e8a6713e7adb.png\">\n<blockquote>\n<p>원하는 Chart는 Cluster에 저장할 수 있고, Prometheus Query(PromQL)를 익혀 우리 팀의 챠트를 구성할 수 있다.\nGrafana 사이트에서 원하는 차트를 검색하여 그대로 인용도 가능하다. <a href=\"https://grafana.com/grafana/dashboards/\" target=\"_blank\" rel=\"noopener noreferrer\">https://grafana.com/grafana/dashboards/</a>\n위 사이트에서 필터링하여 차트 ID를 획득하여 설치한 Grafana에서 Import한다.</p>\n</blockquote>\n<h3 id=\"destroying--tearing-down-prometheus-monitoring-stack\"><a href=\"#destroying--tearing-down-prometheus-monitoring-stack\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Destroying / Tearing down Prometheus monitoring stack</h3>\n<ul>\n<li>/home/project/kube-prometheus 폴더 상에서 아래 명령어로 모든 스텍을 삭제한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl delete --ignore-not-found=true -f manifests/ -f manifests/setup</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"MSA 모니터링 with installing Grafana","anchor":"#msa-모니터링-with-installing-grafana"},{"depth":1,"value":"MSA 모니터링 with installing Grafana","anchor":"#msa-모니터링-with-installing-grafana-1"},{"depth":3,"value":"Kubernetes Monitoring","anchor":"#kubernetes-monitoring"},{"depth":3,"value":"Deploy Prometheus / Grafana Monitoring Stack on Kubernetes","anchor":"#deploy-prometheus--grafana-monitoring-stack-on-kubernetes"},{"depth":4,"value":"Step 1: Clone kube-prometheus project","anchor":"#step-1-clone-kube-prometheus-project"},{"depth":4,"value":"Step 2: Create monitoring namespace, CustomResourceDefinitions & operator pod","anchor":"#step-2-create-monitoring-namespace-customresourcedefinitions--operator-pod"},{"depth":4,"value":"Step 3: Deploy Prometheus Monitoring Stack on Kubernetes","anchor":"#step-3-deploy-prometheus-monitoring-stack-on-kubernetes"},{"depth":4,"value":"Step 4: Access Prometheus, Grafana, and Alertmanager dashboards","anchor":"#step-4-access-prometheus-grafana-and-alertmanager-dashboards"},{"depth":3,"value":"Kubernetes Monitoring","anchor":"#kubernetes-monitoring-1"},{"depth":3,"value":"Destroying / Tearing down Prometheus monitoring stack","anchor":"#destroying--tearing-down-prometheus-monitoring-stack"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}