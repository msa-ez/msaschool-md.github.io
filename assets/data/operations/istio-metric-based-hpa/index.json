{"hash":"49f02bf9a1ddbf017efeb189302ebd145a2955d8","data":{"markdownPage":{"id":"c94db815cf417c4bede0a4e822b3fd21","title":"[Service Mesh] Istio Metrics based HPA","description":"","path":"/operations/istio-metric-based-hpa/","timeToRead":3,"content":"<h1 id=\"service-mesh-istio-metrics-based-hpa\"><a href=\"#service-mesh-istio-metrics-based-hpa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[Service Mesh] Istio Metrics based HPA</h1>\n<h1 id=\"service-mesh-istio-metrics-based-hpa-1\"><a href=\"#service-mesh-istio-metrics-based-hpa-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[Service Mesh] Istio Metrics based HPA</h1>\n<h3 id=\"istio-metrics-based-hpa\"><a href=\"#istio-metrics-based-hpa\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Istio metrics based HPA</h3>\n<ul>\n<li>Goal : Istio metrics기반의 HPA를 설정하고, Pod 자동 Scale Out을 확인한다. </li>\n<li>Istio Control Plane 중 하나인 Mixer는 Sidecar로부터 Metrics정보를 수집해 Promethus에 저장한다.</li>\n</ul>\n<h3 id=\"custom-metrics-adapter-설치\"><a href=\"#custom-metrics-adapter-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Custom metrics adapter 설치</h3>\n<ul>\n<li>먼저 프로메테우스 쿼리를 실행할 Metrics Adapter를 설치한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">git clone https://github.com/acmexii/istio-hpa.git\ncd istio-hpa\nkubectl apply -f ./kube-metrics-adapter/</code></pre>\n<ul>\n<li>Adapter는 kube-system 네임스페이스에 설치된다.</li>\n<li>Adapter는 istio-system 네임스페이스 상의 Prometheus 인스턴스를 쿼리한다.</li>\n<li>Adapter 실행로그를 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl -n kube-system logs deployment/kube-metrics-adapter</code></pre>\n<h3 id=\"delivery-어플리케이션-배포\"><a href=\"#delivery-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Delivery 어플리케이션 배포</h3>\n<ul>\n<li>먼저 Sidecar Injection이 설정된 네임스페이스를 생성한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f ./namespaces/</code></pre>\n<ul>\n<li>배송 마이크로서비스를 배포한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f https://raw.githubusercontent.com/acmexii/demo/master/edu/delivery-rediness-v3.yaml -n mall\nkubectl expose deploy delivery --port=8080 -n mall</code></pre>\n<h4 id=\"configuring-the-hpa-with-istio-metrics\"><a href=\"#configuring-the-hpa-with-istio-metrics\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Configuring the HPA with Istio metrics</h4>\n<ul>\n<li>Prometheus Query기반 배송서비스에 대한 HPA를 설정한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt;EOF\napiVersion: autoscaling/v2beta1\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: delivery-hpa\n  namespace: mall\n  annotations:\n    metric-config.object.istio-requests-total.prometheus/per-replica: &quot;true&quot;\n    metric-config.object.istio-requests-total.prometheus/query: |\n      sum(\n        rate(\n          istio_requests_total{\n            destination_workload=&quot;delivery&quot;,\n            destination_workload_namespace=&quot;mall&quot;\n          }[1m]\n        )\n      ) /\n      count(\n        count(\n          container_memory_usage_bytes{\n            namespace=&quot;mall&quot;,\n            pod=~&quot;delivery.*&quot;\n          }\n        ) by (pod)\n      )\nspec:\n  maxReplicas: 10\n  minReplicas: 1\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: delivery\n  metrics:\n    - type: Object\n      object:\n        metricName: istio-requests-total\n        target:\n          apiVersion: v1\n          kind: Pod\n          name: delivery\n        targetValue: 10\nEOF</code></pre>\n<ul>\n<li>annotations에서 metric object 'istio-requests-total' 를 정의한다.</li>\n<li>배송서비스로의 초당 트래픽이 평균 10개를 상회할 경우, HPA가 발동한다.</li>\n</ul>\n<h4 id=\"부하테스터를-통한-hpa-테스트\"><a href=\"#%EB%B6%80%ED%95%98%ED%85%8C%EC%8A%A4%ED%84%B0%EB%A5%BC-%ED%86%B5%ED%95%9C-hpa-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>부하테스터를 통한 HPA 테스트</h4>\n<ul>\n<li>Load Generator 설치</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: siege\n  namespace: mall\nspec:\n  containers:\n  - name: siege\n    image: apexacme/siege-nginx\nEOF</code></pre>\n<ul>\n<li>모니터를 켜고, 새로운 터미널에서 Siege 컨테이너로 접속한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">watch kubectl get pod -n mall\nkubectl exec -it siege -n mall -- /bin/bash</code></pre>\n<ul>\n<li>접속한 Siege 컨테이너 안에서 배송서비스로 부하를 발생하고, 임계치를 초과했을때 Pod 자동확장 되는 것을 확인한다. </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">siege -c10 -t10S -v http://delivery.mall:8080</code></pre>\n<h4 id=\"실행-결과\"><a href=\"#%EC%8B%A4%ED%96%89-%EA%B2%B0%EA%B3%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>실행 결과</h4>\n<ul>\n<li>배송 마이크로서비스에 유입되는 초당 요청수가 Threshold를 초과하여, 자동확장되었음이 확인된다.</li>\n<li>HPA의 Metric type이 Container Resource(CPU, MEM) 기반이 아니므로, Resource Spec. 없어도 동작한다.</li>\n<li>(But) Pod의 'Evicted' 예방차원에서 Resource Spec.는 항상 YAML에 정의하는것을 추천한다.</li>\n</ul>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" Istio Metrics based HPA","anchor":"#service-mesh-istio-metrics-based-hpa"},{"depth":1,"value":" Istio Metrics based HPA","anchor":"#service-mesh-istio-metrics-based-hpa-1"},{"depth":3,"value":"Istio metrics based HPA","anchor":"#istio-metrics-based-hpa"},{"depth":3,"value":"Custom metrics adapter 설치","anchor":"#custom-metrics-adapter-설치"},{"depth":3,"value":"Delivery 어플리케이션 배포","anchor":"#delivery-어플리케이션-배포"},{"depth":4,"value":"Configuring the HPA with Istio metrics","anchor":"#configuring-the-hpa-with-istio-metrics"},{"depth":4,"value":"부하테스터를 통한 HPA 테스트","anchor":"#부하테스터를-통한-hpa-테스트"},{"depth":4,"value":"실행 결과","anchor":"#실행-결과"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}}]}},"context":{}}