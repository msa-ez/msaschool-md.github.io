{"hash":"49f02bf9a1ddbf017efeb189302ebd145a2955d8","data":{"markdownPage":{"id":"a1f3c8a5cfcdf7f9603c4b5f8a64706c","title":"Ingress 를 통한 진입점 통일 - Path-based routing","description":"","path":"/operations/ops-ingress/","timeToRead":4,"content":"<h1 id=\"ingress-를-통한-진입점-통일---path-based-routing\"><a href=\"#ingress-%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%A7%84%EC%9E%85%EC%A0%90-%ED%86%B5%EC%9D%BC---path-based-routing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ingress 를 통한 진입점 통일 - Path-based routing</h1>\n<h1 id=\"ingress-를-통한-진입점-통일---path-based-routing-1\"><a href=\"#ingress-%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%A7%84%EC%9E%85%EC%A0%90-%ED%86%B5%EC%9D%BC---path-based-routing-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ingress 를 통한 진입점 통일 - Path-based routing</h1>\n<h2 id=\"ingress\"><a href=\"#ingress\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ingress</h2>\n<h3 id=\"ingress-의-설정\"><a href=\"#ingress-%EC%9D%98-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ingress 의 설정</h3>\n<p>주문, 상품, 배송 서비스를 분기하는 라우팅 룰을 가진 Ingress 를 생성한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: networking.k8s.io/v1\nkind: &quot;Ingress&quot;\nmetadata: \n  name: &quot;shopping-ingress&quot;\n  annotations: \n    nginx.ingress.kubernetes.io/ssl-redirect: &quot;false&quot;\n    ingressclass.kubernetes.io/is-default-class: &quot;true&quot;\nspec: \n  ingressClassName: nginx\n  rules: \n    - host: &quot;&quot;\n      http: \n        paths: \n          - path: /orders\n            pathType: Prefix\n            backend: \n              service:\n                name: order\n                port:\n                  number: 8080\n          - path: /deliveries\n            pathType: Prefix\n            backend: \n              service:\n                name: delivery\n                port:\n                  number: 8080\n          - path: /products\n            pathType: Prefix\n            backend: \n              service:\n                name: product\n                port:\n                  number: 8080</code></pre>\n<p>을 ingress.yaml 파일로 만들어 저장한후 생성한다</p>\n<pre class=\"language-text\"><code class=\"language-text\">$ kubectl create -f ingress.yaml</code></pre>\n<blockquote>\n<p>이때 yaml 문법 validation 오류가 생긴다면, 설치된 쿠버네티스의 버전에 따라 발생할 수 있으며, validate 옵션을 해제하여 설정한다:</p>\n</blockquote>\n<p>생성된 ingress 의 상태를 확인한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">$ kubectl get ingress shopping-ingress -w\n\nNAME               HOSTS   ADDRESS                                                                        PORTS   AGE\nshopping-ingress   *       ???   80      7m36s</code></pre>\n<p>아무리 기다려도 ADDRESS 부분에 값이 채워지지 않음을 알 수 있다. 원인은 내게 gateway provider 가 없기 때문이다. Ingress 는 Kubernetes 의 스펙일 뿐, 이를 실질적으로 지원하는 ingress controller 가 필요하기 때문이다.  다행히, 우리에겐 무료로 사용할 수 있는 nginx 인그레스 프로바이더를 사용할 수 있다.</p>\n<h3 id=\"ingress-provider-설치하기\"><a href=\"#ingress-provider-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ingress Provider 설치하기</h3>\n<p>오픈소스 ingress provider 인 nginx ingress controller 를 설치하기 위해서는 하나 이상의 kubernetes 구성요소들을 설치해야 하기 때문에 이를 쉽게 Helm Chart 를 통해서 설치할 수 있다. </p>\n<h4 id=\"helm으로-ingress-controller-설치\"><a href=\"#helm%EC%9C%BC%EB%A1%9C-ingress-controller-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Helm으로 Ingress Controller 설치</h4>\n<ul>\n<li>Helm repo 설정</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">helm repo add stable https://charts.helm.sh/stable\nhelm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo update\nkubectl create namespace ingress-basic</code></pre>\n<ul>\n<li>Helm이 로컬에 설치되어 있지 않은 경우, Helm을 먼저 설치한다.</li>\n<li>Helm 3.x 설치(권장)</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 <span class=\"token operator\">></span> get_helm.sh\n<span class=\"token function\">chmod</span> <span class=\"token number\">700</span> get_helm.sh\n./get_helm.sh</code></pre>\n<ul>\n<li>nginx controller 설치</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">helm install nginx-ingress ingress-nginx/ingress-nginx --namespace=ingress-basic</code></pre>\n<ul>\n<li>설치확인</li>\n<li>Ingress Controller의 EXTERNAL-IP가 API Gateway 엔드포인트</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get all --namespace=ingress-basic</code></pre>\n<ul>\n<li>이제, 자동으로 ingress 의 ADDRESS 부분의 설정이 채워지는 것을 확인한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">$ kubectl get ingress\nNAME               HOSTS   ADDRESS                                                                        PORTS   AGE\nshopping-ingress   *       acbdde7c8e29f451daee5605b8c7840c-1087513605.ap-northeast-2.elb.amazonaws.com   80      7m36s</code></pre>\n<p>발급된 주소에 path 까지 포함하여 접속을 시도해본다:</p>\n<pre class=\"language-text\"><code class=\"language-text\"># http a52f3e05efdb2439e845aed8379437b4-1576614801.ap-northeast-2.elb.amazonaws.com/orders\nHTTP/1.1 503 Service Temporarily Unavailable\nConnection: keep-alive\nContent-Length: 190\nContent-Type: text/html\nDate: Tue, 11 May 2021 06:25:37 GMT\n\n&lt;html&gt;\n&lt;head&gt;&lt;title&gt;503 Service Temporarily Unavailable&lt;/title&gt;&lt;/head&gt;\n&lt;body&gt;\n&lt;center&gt;&lt;h1&gt;503 Service Temporarily Unavailable&lt;/h1&gt;&lt;/center&gt;\n&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;\n&lt;/body&gt;\n&lt;/html&gt;</code></pre>\n<p>HTML 이 출력되는 것으로보아 nginx 까지는 무사히 연결된 것으로 보이나, 해당 주소 (orders)에 접속이 안되는 것을 확인할 수 있다. 이것은 backend 인 order service 를 디플로이 하지 않았기 때문이다. </p>\n<p>order 서비스와 delivery 서비스를 잘 디플로이 해주면, 해당 path 들로 path-based routing 이 잘 이루어짐을 알 수 있다.</p>\n<h3 id=\"order-서비스-디플로이-하기\"><a href=\"#order-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%94%94%ED%94%8C%EB%A1%9C%EC%9D%B4-%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>order 서비스 디플로이 하기</h3>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create deploy order --image=jinyoung/monolith-order:v20210504\nkubectl expose deploy/order --port=8080</code></pre>\n<h2 id=\"virtual-host-based-ingress-example\"><a href=\"#virtual-host-based-ingress-example\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Virtual Host based Ingress Example</h2>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: networking.k8s.io/v1\nkind: &quot;Ingress&quot;\nmetadata: \n  name: &quot;shopping-ingress&quot;\n  namespace: &quot;istio-system&quot;  \n  annotations: \n    nginx.ingress.kubernetes.io/ssl-redirect: &quot;false&quot;\n    ingressclass.kubernetes.io/is-default-class: &quot;true&quot;\nspec: \n  ingressClassName: nginx\n  rules: \n    - host: &quot;prom.service.com&quot;\n      http: \n        paths: \n          - \n            path: /\n            pathType: Prefix\n            backend: \n              service:\n                name: prometheus\n                port:\n                  number: 9090\n\n    - host: &quot;gra.service.com&quot;\n      http: \n        paths: \n          - \n            path: /\n            pathType: Prefix\n            backend: \n              service:\n                name: grafana\n                port:\n                  number: 3000</code></pre>\n<p>가상호스트를 테스트하기 위해서 C:\\Windows\\System32\\drivers\\etc 내의 hosts 파일에 아래를 추가한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;획득한 ingress의 External IP&gt;  prom.service.com, gra.service.com</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Ingress 를 통한 진입점 통일 - Path-based routing","anchor":"#ingress-를-통한-진입점-통일---path-based-routing"},{"depth":1,"value":"Ingress 를 통한 진입점 통일 - Path-based routing","anchor":"#ingress-를-통한-진입점-통일---path-based-routing-1"},{"depth":2,"value":"Ingress","anchor":"#ingress"},{"depth":3,"value":"Ingress 의 설정","anchor":"#ingress-의-설정"},{"depth":3,"value":"Ingress Provider 설치하기","anchor":"#ingress-provider-설치하기"},{"depth":4,"value":"Helm으로 Ingress Controller 설치","anchor":"#helm으로-ingress-controller-설치"},{"depth":3,"value":"order 서비스 디플로이 하기","anchor":"#order-서비스-디플로이-하기"},{"depth":2,"value":"Virtual Host based Ingress Example","anchor":"#virtual-host-based-ingress-example"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}}]}},"context":{}}