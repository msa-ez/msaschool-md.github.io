{"hash":"639846ab77f2d650b364be948c0c3d68be620b02","data":{"markdownPage":{"id":"deac41e94307ec33e2b0357438c09aec","title":"Ingress - Virtual Host based","description":"","path":"/operations/ops-ingress-virtualhost/","timeToRead":2,"content":"<h1 id=\"ingress---virtual-host-based\"><a href=\"#ingress---virtual-host-based\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ingress - Virtual Host based</h1>\n<h2 id=\"virtual-host-based-ingress-example\"><a href=\"#virtual-host-based-ingress-example\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Virtual Host based Ingress Example</h2>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: &quot;extensions/v1beta1&quot;\nkind: &quot;Ingress&quot;\nmetadata: \n  name: &quot;istio-ingress&quot;\n  namespace: &quot;istio-system&quot;\n  annotations: \n    kubernetes.io/ingress.class: &quot;nginx&quot;\nspec: \n  rules: \n    - host: &quot;kiali.service.com&quot;\n      http: \n        paths: \n          - \n            path: /\n            pathType: Prefix\n            backend: \n              serviceName: kiali\n              servicePort: 20001\n\n    - host: &quot;prom.service.com&quot;\n      http: \n        paths: \n          - \n            path: /\n            pathType: Prefix\n            backend: \n              serviceName: prometheus\n              servicePort: 9090\n\n    - host: &quot;gra.service.com&quot;\n      http: \n        paths: \n          - \n            path: /\n            pathType: Prefix\n            backend: \n              serviceName: grafana\n              servicePort: 3000</code></pre>\n<p>을 ingress.yaml 파일로 만들어 저장한후 생성한다</p>\n<pre class=\"language-text\"><code class=\"language-text\">$ kubectl create -f ingress.yaml</code></pre>\n<blockquote>\n<p>이때 yaml 문법 validation 오류가 생긴다면, 설치된 쿠버네티스의 버전에 따라 발생할 수 있으며, validate 옵션을 해제하여 설정한다:</p>\n</blockquote>\n<p>생성된 ingress 의 상태를 확인한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">$ kubectl get ingress -n istio-system -w\n\nNAME               HOSTS   ADDRESS                                                                        PORTS   AGE\nistio-ingress   *       ???   80      7m36s</code></pre>\n<p>아무리 기다려도 ADDRESS 부분에 값이 채워지지 않음을 알 수 있다. 원인은 내게 gateway provider 가 없기 때문이다. Ingress 는 Kubernetes 의 스펙일 뿐, 이를 실질적으로 지원하는 ingress controller 가 필요하기 때문이다.  다행히, 우리에겐 무료로 사용할 수 있는 nginx 인그레스 프로바이더를 사용할 수 있다.</p>\n<h3 id=\"ingress-provider-설치하기\"><a href=\"#ingress-provider-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Ingress Provider 설치하기</h3>\n<p>오픈소스 ingress provider 인 nginx ingress controller 를 설치하기 위해서는 하나 이상의 kubernetes 구성요소들을 설치해야 하기 때문에 이를 쉽게 Helm Chart 를 통해서 설치할 수 있다. </p>\n<h4 id=\"helm으로-ingress-controller-설치\"><a href=\"#helm%EC%9C%BC%EB%A1%9C-ingress-controller-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Helm으로 Ingress Controller 설치</h4>\n<ul>\n<li>Helm repo 설정</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">helm repo add stable https://charts.helm.sh/stable\nhelm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx\nhelm repo update\nkubectl create namespace ingress-basic</code></pre>\n<ul>\n<li>nginx controller 설치</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">helm install nginx-ingress ingress-nginx/ingress-nginx --namespace=ingress-basic</code></pre>\n<ul>\n<li>설치확인\nIngress Controller의 EXTERNAL-IP가\nAPI Gateway 엔드포인트: 메모 必</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get all --namespace=ingress-basic</code></pre>\n<ul>\n<li>이제, 자동으로 ingress 의 ADDRESS 부분의 설정이 채워지는 것을 확인한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">$ kubectl get ingress\nNAME               HOSTS   ADDRESS                                                                        PORTS   AGE\nistio-ingress   *       acbdde7c8e29f451daee5605b8c7840c-1087513605.ap-northeast-2.elb.amazonaws.com   80      7m36s</code></pre>\n<p>아마존의 경우 획득한 주소가 도메인 네임이므로, IP Address 를 얻기위해서 ping 을 이용하여 address 를 얻는다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">ping acbdde7c8e29f451daee5605b8c7840c-1087513605.ap-northeast-2.elb.amazonaws.com\n\n#  리턴되는 ip address 를 획득</code></pre>\n<p>가상호스트를 테스트하기 위해서 내의 hosts 파일에 아래를 추가한다:\n(윈도우에서는 C:\\Windows\\System32\\drivers\\etc\\hosts 에서 찾을 수 있고 리눅스와 맥은 /etc/hosts 파일을 수정하면 된다)</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;획득한 ingress의 External IP&gt;  kiali.service.com, prom.service.com, gra.service.com</code></pre>\n<blockquote>\n<p>파일 저장을 위하여 윈도우에서 메모장으로 열때 \"관리자 권한으로 실행\" 하여 메모장 애플리케이션을 열어야 하고, 리눅스와 맥에서는 \"sudo vi /etc/hosts\" 로 수정해야 한다.</p>\n</blockquote>\n<p>이제 브라우저를 열고 prom.service.com와 gra.service.com 에 접속해본다.</p>\n<p>혹은 curl로 확인가능하다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">curl -H &quot;Host: prom.service.com&quot; &lt;IP 주소&gt;\n\n&lt;a href=&quot;/graph&quot;&gt;Found&lt;/a&gt;.</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Ingress - Virtual Host based","anchor":"#ingress---virtual-host-based"},{"depth":2,"value":"Virtual Host based Ingress Example","anchor":"#virtual-host-based-ingress-example"},{"depth":3,"value":"Ingress Provider 설치하기","anchor":"#ingress-provider-설치하기"},{"depth":4,"value":"Helm으로 Ingress Controller 설치","anchor":"#helm으로-ingress-controller-설치"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}