{"hash":"111274b6c679aae8379740b3dad993eb43961e68","data":{"markdownPage":{"id":"8f60e0027c61501264e408cf9ba92b42","title":"Pod Auto Scaling","description":"","path":"/operations/ops-autoscale/","timeToRead":5,"content":"<h1 id=\"pod-auto-scaling\"><a href=\"#pod-auto-scaling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pod Auto Scaling</h1>\n<h1 id=\"pod-auto-scaling-1\"><a href=\"#pod-auto-scaling-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pod Auto Scaling</h1>\n<h3 id=\"auto-scale-out-실습-hpa-horizontalpodautoscaler-설정\"><a href=\"#auto-scale-out-%EC%8B%A4%EC%8A%B5-hpa-horizontalpodautoscaler-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Auto Scale-Out 실습 (hpa: HorizontalPodAutoscaler 설정)</h3>\n<p>클라우드의 리소스를 잘 활용하기 위해서는 요청이 적을때는 최소한의 Pod 를 유지한 후에 요청이 많아질 경우 Pod를 확장하여 요청을 처리할 수 있다.<br>\nPod 를 Kubernetes에서 수평적으로 확장하는 방법을 HorizontalPodAutoscaler(HPA) 라고 부른다. replicas 를 관리하는 Deployment, StatefulSet 에 적용이 가능하고, 확장이 불가능한 DaemonSets 에는 설정이 불가능하다.  </p>\n<p>HPA는 워크로드의 CPU 또는 메모리를 측정하여 작동하기 때문에 Kubernetes 에 metric server 를 필수적으로 설치가 되어있어야 한다.</p>\n<p>이번시간에는 HPA 설정을 적용 한 후에, siege 라는 부하 테스트 툴을 사용하여 서비스에 부하를 주어 Pod 가 Auto Scale-Out 되는 실습을 한다.</p>\n<h3 id=\"선행과정\"><a href=\"#%EC%84%A0%ED%96%89%EA%B3%BC%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>선행과정</h3>\n<ul>\n<li>\n<p>이전 랩에서 배포한 order 서비스가 클러스터에  실행되고 있어야 한다.\n- kubectl get svc 하였을 때 order 서비스 존재확인.\n- kubectl get pod 하였을 때 order의 STATUS 가 Running 상태확인.</p>\n<blockquote>\n<p>order 서비스가 없는 경우:</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create deploy order --image=jinyoung/monolith-order:v20210504\nkubectl expose deploy order --port=8080</code></pre>\n<h4 id=\"manual-scale-out-적용해보기\"><a href=\"#manual-scale-out-%EC%A0%81%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Manual Scale Out 적용해보기</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl scale deploy order --replicas=3\n# 주문서비스가 3개로 확장된다.\nkubectl scale deploy order --replicas=1</code></pre>\n<ul>\n<li>\n<p>부하 테스트 Pod 설치</p>\n<ul>\n<li>\n<p>워크로드 생성기를 설치하여 자동 확장 랩에 활용한다.\n- 아래 스크립트를 terminal 에 복사하여 siege 라는 Pod 를 생성한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">\t\t```</code></pre>\n<p>kubectl apply -f - &#x3C;&#x3C;EOF\napiVersion: v1\nkind: Pod\nmetadata:\nname: siege\nspec:\ncontainers:</p>\n<ul>\n<li>\n<p>name: siege\nimage: apexacme/siege-nginx\nEOF</p>\n<pre class=\"language-text\"><code class=\"language-text\">\t\t```\n\t\t- 생성된 siege Pod 안쪽에서 정상작동 확인\n\t\t```\n\t\tkubectl exec -it siege -- /bin/bash\n\t\tsiege -c1 -t2S -v http://order:8080/orders\n\t\texit\n\t\t```</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Metric server 설치 확인 방법\n- kubectl top pods 를 실행했을때, 아래와 같이 정보가 나오면 설치가 되어있다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">\t```\n\tNAME                     CPU(cores)   MEMORY(bytes)   \n\torder-684647ccf9-ltlqg   3m           288Mi           \n\tsiege                    0m           8Mi   \n\t```\n\t- &quot;error: Metrics API not available&quot; 메시지가 나오면 metric server가 설치되지 않은은 것으로 아래와 같은 명령어로 설치한다.\n\t&gt; kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml\n\t&gt; kubectl get deployment metrics-server -n kube-system</code></pre>\n</li>\n</ul>\n<h3 id=\"1-auto-scale-out-설정\"><a href=\"#1-auto-scale-out-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Auto Scale-Out 설정</h3>\n<p>1.0 Auto Scaler를 설정한다</p>\n<ul>\n<li>오토 스케일링 설정명령어 호출</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl autoscale deployment order --cpu-percent=50 --min=1 --max=3</code></pre>\n<ul>\n<li>\"cpu-percent=50 : Pod 들의 요청 대비 평균 CPU 사용율(YAML Spec.에서 요청량이 200 milli-cores일때, 모든 Pod의 평균 CPU 사용율이 100 milli-cores(50%)를 넘게되면 HPA 발생)\"</li>\n<li>kubectl get hpa 명령어로 설정값을 확인 한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">NAME    REFERENCE          TARGETS         MINPODS   MAXPODS   REPLICAS   AGE\norder   Deployment/order   &lt;unknown&gt;/20%   1         3         0          7s</code></pre>\n<p>1.1 배포파일에 CPU 요청에 대한 값을 지정한다.</p>\n<ul>\n<li>Gitpod의 order > kubernetes 폴더로 이동하여 deployment.yaml 파일을 수정한다.</li>\n<li>19 Line 의 image 을 <strong>jinyoung/monolith-order:v20210602</strong>\n로 변경한다.</li>\n<li>21과 22 Line의 ports 와 readinessProbe 사이에 resources.requests.cpu: \"200m\"을 추가한다.</li>\n<li>indent 에 주의하여 파일을 저장한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">\t\tports:\n          - containerPort: 8080\n        resources:\n          requests:\n            cpu: &quot;200m&quot;\n        readinessProbe:</code></pre>\n<p>1.2 터미널을 열어서 변경된 yaml 파일을 사용하여 쿠버네티스에 배포한다.</p>\n<ul>\n<li>cd order/kubernetes</li>\n<li>kubectl delete -f deployment.yaml</li>\n<li>kubectl apply -f deployment.yaml</li>\n</ul>\n<p>1.3 배포 완료 후 kubectl get deploy order -o yaml 명령을 쳐서 image 와 resources의 값이 정상적으로 설정되어있는지 확인</p>\n<ul>\n<li>kubectl get po 실행하여 STATUS가 정상적으로 Running 상태 확인</li>\n</ul>\n<h3 id=\"2-auto-scale-out-증명\"><a href=\"#2-auto-scale-out-%EC%A6%9D%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Auto Scale-Out 증명</h3>\n<p>2.1 새로운 터미널을 열어서 seige 명령으로 부하를 주어서 Pod 가 늘어나도록 한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it siege -- /bin/bash\nsiege -c20 -t40S -v http://order:8080/orders\nexit</code></pre>\n<p>2.2 터미널 1개는 kubectl get po -w 명령을 사용하여 pod 가 생성되는 것을 확인한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">order-7b76557b8f-bgptv   1/1     Running   0          34m\nsiege                    1/1     Running   0          33m\norder-7b76557b8f-7g9d6   0/1     Pending   0          0s\norder-7b76557b8f-hmssb   0/1     Pending   0          0s\norder-7b76557b8f-7g9d6   0/1     ContainerCreating   0          0s\norder-7b76557b8f-hmssb   0/1     ContainerCreating   0          0s\norder-7b76557b8f-7g9d6   0/1     Running             0          6s\norder-7b76557b8f-hmssb   0/1     Running             0          6s\norder-7b76557b8f-7g9d6   1/1     Running             0          23s\norder-7b76557b8f-hmssb   1/1     Running             0          27s</code></pre>\n<p>2.3 kubectl get hpa 명령어로 CPU 값이 늘어난 것을 확인 한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">NAME    REFERENCE          TARGETS     MINPODS   MAXPODS   REPLICAS   AGE\norder   Deployment/order   1152%/20%   1         3         3          37m</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Pod Auto Scaling","anchor":"#pod-auto-scaling"},{"depth":1,"value":"Pod Auto Scaling","anchor":"#pod-auto-scaling-1"},{"depth":3,"value":"Auto Scale-Out 실습 (hpa: HorizontalPodAutoscaler 설정)","anchor":"#auto-scale-out-실습-hpa-horizontalpodautoscaler-설정"},{"depth":3,"value":"선행과정","anchor":"#선행과정"},{"depth":4,"value":"Manual Scale Out 적용해보기","anchor":"#manual-scale-out-적용해보기"},{"depth":3,"value":"1. Auto Scale-Out 설정","anchor":"#1-auto-scale-out-설정"},{"depth":3,"value":"2. Auto Scale-Out 증명","anchor":"#2-auto-scale-out-증명"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}