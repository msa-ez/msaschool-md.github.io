{"hash":"f58eca0934380d084e357b0b95045cf3b386277b","data":{"markdownPage":{"id":"8f60e0027c61501264e408cf9ba92b42","title":"Pod Auto Scaling","description":"","path":"/operations/ops-autoscale/","timeToRead":3,"content":"<h1 id=\"pod-auto-scaling\"><a href=\"#pod-auto-scaling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pod Auto Scaling</h1>\n<h3 id=\"auto-scale-out-실습-hpa-horizontalpodautoscaler-설정\"><a href=\"#auto-scale-out-%EC%8B%A4%EC%8A%B5-hpa-horizontalpodautoscaler-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Auto Scale-Out 실습 (hpa: HorizontalPodAutoscaler 설정)</h3>\n<p>클라우드의 리소스를 잘 활용하기 위해서는 요청이 적을때는 최소한의 Pod 를 유지한 후에 요청이 많아질 경우 Pod를 확장하여 요청을 처리할 수 있다.<br>\nPod 를 Kubernetes에서 수평적으로 확장하는 방법을 HorizontalPodAutoscaler(HPA) 라고 부른다. replicas 를 관리하는 Deployment, StatefulSet 에 적용이 가능하고, 확장이 불가능한 DaemonSets 에는 설정이 불가능하다.  </p>\n<p>HPA는 워크로드의 CPU 또는 메모리를 측정하여 작동하기 때문에 Kubernetes 에 metric server 를 필수적으로 설치가 되어있어야 한다.</p>\n<p>이번시간에는 HPA 설정을 적용 한 후에, siege 라는 부하 테스트 툴을 사용하여 서비스에 부하를 주어 Pod 가 Auto Scale-Out 되는 실습을 한다.</p>\n<h3 id=\"선행과정\"><a href=\"#%EC%84%A0%ED%96%89%EA%B3%BC%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>선행과정</h3>\n<ul>\n<li>이전 랩인 [운영] 애플리케이션의 패키징,도커라이징,클러스터 배포를 실행하여 클러스터에 order 서비스가 배포가 되어있어야 한다.\n- kubectl get svc 하였을때 order 서비스 존재확인.\n- kubectl get pod 하였을때 order의 STATUS 가 Running 상태확인.</li>\n<li>\n<p>부하 테스트 Pod 설치\n- 아래 스크립트를 terminal 에 복사하여 siege 라는 Pod 를 생성한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">\t```</code></pre>\n<p>  kubectl apply -f - &#x3C;&#x3C;EOF\napiVersion: v1\nkind: Pod\nmetadata:\nname: siege\nspec:\ncontainers:\n- name: siege\nimage: apexacme/siege-nginx\nEOF</p>\n<pre class=\"language-text\"><code class=\"language-text\">\t```\n\t- 생성된 siege Pod 안쪽에서 정상작동 확인\n\t```\n\tkubectl exec -it siege -- /bin/bash\n\tsiege -c1 -t2S -v http://order:8080/orders\n\texit\n\t```</code></pre>\n</li>\n<li>\n<p>metric server 설치 확인 방법\n- kubectl top pods 를 하였을때 아래와 같이 정보가 나오면 설치가 되어있다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">\t```\n\tNAME                     CPU(cores)   MEMORY(bytes)   \n\torder-684647ccf9-ltlqg   3m           288Mi           \n\tsiege                    0m           8Mi   \n\t```\n\t- metric server가 설치 안되어있다면 아래와 같은 명령어로 설치한다.\n\t&gt; kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.3.7/components.yaml\n\t&gt; kubectl get deployment metrics-server -n kube-system</code></pre>\n</li>\n</ul>\n<h3 id=\"1-auto-scale-out-설정\"><a href=\"#1-auto-scale-out-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Auto Scale-Out 설정</h3>\n<p>1.0 Auto Scaler를 설정한다\n오토 스케일링 설정명령어 호출</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl autoscale deployment order --cpu-percent=20 --min=1 --max=3</code></pre>\n<ul>\n<li>\"cpu-percent=50 : Pod 들의 요청 대비 평균 CPU 사용율 (여기서는 요청이 200 milli-cores이므로, 모든 Pod의 평균 CPU 사용율이 100 milli-cores(50%)를 넘게되면 HPA 발생)\"</li>\n<li>kubectl get hpa 명령어로 설정값을 확인 한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">NAME    REFERENCE          TARGETS         MINPODS   MAXPODS   REPLICAS   AGE\norder   Deployment/order   &lt;unknown&gt;/20%   1         3         0          7s</code></pre>\n<p>1.1 배포파일에 CPU 요청에 대한 값을 지정한다.</p>\n<ul>\n<li>shopmall > order > kubernetes 폴더로 이동하여 deployment.yaml 파일을 수정한다.</li>\n<li>19 Line 의 image 을 <strong>jinyoung/monolith-order:v20210602</strong>\n로 변경한다.</li>\n<li>21과 22 Line의 ports 와 readinessProbe 사이에 resources.requests.cpu: \"250m\"을 추가한다.</li>\n<li>indent 를 주의해야 한다  </li>\n<li>파일을 저장한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">\t\tports:\n          - containerPort: 8080\n        resources:\n          requests:\n            cpu: &quot;200m&quot;\n        readinessProbe:</code></pre>\n<p>1.2 터미널을 열어서 변경된 yaml 파일을 사용하여 쿠버네티스에 배포한다.</p>\n<ul>\n<li>cd shopmall/order/kubernetes</li>\n<li>kubectl apply -f deployment.yml</li>\n</ul>\n<p>1.3 배포 완료 후 kubectl get deploy order -o yaml 명령을 쳐서 image 와 resources의 값이 정상적으로 설정되어있는지 확인</p>\n<ul>\n<li>kubectl get po 실행하여 STATUS가 정상적으로 Running 상태 확인</li>\n</ul>\n<h3 id=\"2-auto-scale-out-증명\"><a href=\"#2-auto-scale-out-%EC%A6%9D%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Auto Scale-Out 증명</h3>\n<p>2.1 새로운 터미널을 열어서 seige 명령으로 부하를 주어서 Pod 가 늘어나도록 한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it siege -- /bin/bash\nsiege -c20 -t40S -v http://order:8080/orders\nexit</code></pre>\n<p>2.2 터미널 1개는 kubectl get po -w 명령을 사용하여 pod 가 생성되는 것을 확인한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">order-7b76557b8f-bgptv   1/1     Running   0          34m\nsiege                    1/1     Running   0          33m\norder-7b76557b8f-7g9d6   0/1     Pending   0          0s\norder-7b76557b8f-hmssb   0/1     Pending   0          0s\norder-7b76557b8f-7g9d6   0/1     ContainerCreating   0          0s\norder-7b76557b8f-hmssb   0/1     ContainerCreating   0          0s\norder-7b76557b8f-7g9d6   0/1     Running             0          6s\norder-7b76557b8f-hmssb   0/1     Running             0          6s\norder-7b76557b8f-7g9d6   1/1     Running             0          23s\norder-7b76557b8f-hmssb   1/1     Running             0          27s</code></pre>\n<p>2.3 kubectl get hpa 명령어로 CPU 값이 늘어난 것을 확인 한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">NAME    REFERENCE          TARGETS     MINPODS   MAXPODS   REPLICAS   AGE\norder   Deployment/order   1152%/20%   1         3         3          37m</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Pod Auto Scaling","anchor":"#pod-auto-scaling"},{"depth":3,"value":"Auto Scale-Out 실습 (hpa: HorizontalPodAutoscaler 설정)","anchor":"#auto-scale-out-실습-hpa-horizontalpodautoscaler-설정"},{"depth":3,"value":"선행과정","anchor":"#선행과정"},{"depth":3,"value":"1. Auto Scale-Out 설정","anchor":"#1-auto-scale-out-설정"},{"depth":3,"value":"2. Auto Scale-Out 증명","anchor":"#2-auto-scale-out-증명"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}