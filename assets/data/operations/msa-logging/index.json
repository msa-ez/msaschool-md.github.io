{"hash":"82edfc9c503203a4b89aaf7ee02c1b0930a87be2","data":{"markdownPage":{"id":"e9939f87b220af9b1e76504434b1e661","title":"MSA 로깅 with EFK Stack","description":"","path":"/operations/msa-logging/","timeToRead":4,"content":"<h1 id=\"msa-로깅-with-efk-stack\"><a href=\"#msa-%EB%A1%9C%EA%B9%85-with-efk-stack\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>MSA 로깅 with EFK Stack</h1>\n<h3 id=\"마이크로서비스-통합-로깅\"><a href=\"#%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%86%B5%ED%95%A9-%EB%A1%9C%EA%B9%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마이크로서비스 통합 로깅</h3>\n<ul>\n<li>EFK(Elasticsearch, Fluentd, Kibana) 스텍을 클러스터에 설치하여 마이크로서비스 로그를 중앙에서 통합 모니터링한다.</li>\n<li>로그 수집기를 Fluentd 대신 동일 회사(Treasure Data)가 제작한 High Performance의 경량화 버전인 Fluent Bit를 적용한다.</li>\n<li>수집 데이터 저장소인 Elasticsearch를 기반으로 Kibana에서 시각화하여 통합 로깅한다.</li>\n</ul>\n<h4 id=\"elasticsearch-kibana-설치\"><a href=\"#elasticsearch-kibana-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ElasticSearch, Kibana 설치</h4>\n<ul>\n<li>Helm으로 ElasticSearch와 Kibana를 차례로 설치한다.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">helm repo <span class=\"token function\">add</span> elastic https://helm.elastic.co\nhelm repo update\nkubectl create namespace elastic\nhelm <span class=\"token function\">install</span> elasticsearch elastic/elasticsearch -n elastic\nhelm <span class=\"token function\">install</span> kibana elastic/kibana -n elastic</code></pre>\n<ul>\n<li>설치확인</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl get all -n elastic\nkubectl get pods --namespace<span class=\"token operator\">=</span>elastic -l <span class=\"token assign-left variable\">app</span><span class=\"token operator\">=</span>elasticsearch-master -w</code></pre>\n<p>-동작확인 : ElasticSearch의 default index목록이 조회되는지 확인한다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl port-forward -n elastic svc/elasticsearch-master <span class=\"token number\">9200</span>\n<span class=\"token function\">curl</span> http://localhost:9200/_cat/indices</code></pre>\n<h3 id=\"fluent-bit-설치\"><a href=\"#fluent-bit-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Fluent Bit 설치</h3>\n<ul>\n<li>\n<p>helm chart 를 사용하지 않고 ConfigMap과 DaemonSet 을 확인하면서 설치한다.</p>\n<blockquote>\n<p>설치를 위한 YAML 엔드포인트는 본 단락 마지막에 제공된다.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"1-sa-생성\"><a href=\"#1-sa-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. SA 생성</h4>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ServiceAccount\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> fluent<span class=\"token punctuation\">-</span>bit\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> elastic</code></pre>\n<h4 id=\"2-clusterrole-생성\"><a href=\"#2-clusterrole-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. ClusterRole 생성</h4>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRole\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> fluent<span class=\"token punctuation\">-</span>bit<span class=\"token punctuation\">-</span>read\n<span class=\"token key atrule\">rules</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">apiGroups</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">]</span>\n  <span class=\"token key atrule\">resources</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> namespaces\n  <span class=\"token punctuation\">-</span> pods\n  <span class=\"token key atrule\">verbs</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"list\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"watch\"</span><span class=\"token punctuation\">]</span></code></pre>\n<h4 id=\"3-role-바인딩\"><a href=\"#3-role-%EB%B0%94%EC%9D%B8%EB%94%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. Role 바인딩</h4>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRoleBinding\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> fluent<span class=\"token punctuation\">-</span>bit<span class=\"token punctuation\">-</span>read\n<span class=\"token key atrule\">roleRef</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">apiGroup</span><span class=\"token punctuation\">:</span> rbac.authorization.k8s.io\n  <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ClusterRole\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> fluent<span class=\"token punctuation\">-</span>bit<span class=\"token punctuation\">-</span>read\n<span class=\"token key atrule\">subjects</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ServiceAccount\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> fluent<span class=\"token punctuation\">-</span>bit\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> elastic</code></pre>\n<h4 id=\"4-fluent-bit-configmap-설정\"><a href=\"#4-fluent-bit-configmap-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. Fluent Bit ConfigMap 설정</h4>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> ConfigMap\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> fluent<span class=\"token punctuation\">-</span>bit<span class=\"token punctuation\">-</span>config\n  <span class=\"token key atrule\">namespace</span><span class=\"token punctuation\">:</span> elastic\n  <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">k8s-app</span><span class=\"token punctuation\">:</span> fluent<span class=\"token punctuation\">-</span>bit\n<span class=\"token key atrule\">data</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">fluent-bit.conf</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n    [SERVICE]\n        Flush         5\n        Log_Level     debug\n        Daemon        off\n        Parsers_File  parsers.conf\n        HTTP_Server   On\n        HTTP_Listen   0.0.0.0\n        HTTP_Port     2020\n        # Logging 파이프라인\n    @INCLUDE input-kubernetes.conf\n    @INCLUDE filter-kubernetes.conf\n    @INCLUDE output-elasticsearch.conf</span>\n\n  <span class=\"token key atrule\">input-kubernetes.conf</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n    [INPUT]\n        Name              tail\n        Path              /var/log/containers/*_kube-system_*.log\n        # Path에서 수집되는 데이터 태깅\n        Tag               kube.*\n        Read_from_head    true\n        Parser            cri\n    [INPUT]\n        Name              tail\n        Tag               shop.*\n        Path              /var/log/containers/*_shop_*.log\n        Multiline         on\n        Read_from_head    true\n        Parser_Firstline  multiline_pattern</span>\n\n  <span class=\"token key atrule\">filter-kubernetes.conf</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n    [FILTER]\n        Name                kubernetes\n        # 모든 태그에 대해 kubernetes Filtering 처리. (k8s 메타정보로 Log Enrichment)\n        Match               *\n        Kube_URL            https://kubernetes.default.svc:443\n        Kube_CA_File        /var/run/secrets/kubernetes.io/serviceaccount/ca.crt\n        Kube_Token_File     /var/run/secrets/kubernetes.io/serviceaccount/token\n        Kube_Tag_Prefix     kube.var.log.containers.\n        Merge_Log           On\n        Merge_Log_Key       log_processed\n        K8S-Logging.Parser  On\n        K8S-Logging.Exclude Off\n    [FILTER]\n        Name                  multiline\n        Match                 shop.*\n        multiline.key_content log\n        multiline.parser      java</span>\n\n  <span class=\"token key atrule\">output-elasticsearch.conf</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n    [OUTPUT]\n        Name            es\n        Match           kube.*\n        Host            ${FLUENT_ELASTICSEARCH_HOST}\n        Port            ${FLUENT_ELASTICSEARCH_PORT}\n        # kubernetes Sys 로그의 Index Name 설정\n        Index           fluent-k8s\n        Type            flb_type\n        Logstach_Format On\n        Logstach_Prefix fluent-k8s\n        Retry_Limit     False\n    [OUTPUT]\n        Name            es\n        Match           shop.*\n        Host            ${FLUENT_ELASTICSEARCH_HOST}\n        Port            ${FLUENT_ELASTICSEARCH_PORT}\n        # shop 네임스페이스 로그의 Index Name 설정\n        Index           fluent-shop\n        Type            flb_type\n        Logstach_Format On\n        Logstach_Prefix fluent-shop\n        Retry_Limit     False</span>\n\n  <span class=\"token key atrule\">parsers.conf</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n    [PARSER]\n        Name cri\n        Format regex\n        Regex ^(?&lt;time>[^ ]+) (?&lt;stream>stdout|stderr) (?&lt;logtag>[^ ]*) (?&lt;message>.*)$\n        Time_Key    time\n        Time_Format %Y-%m-%dT%H:%M:%S.%L%z</span>\n\n    <span class=\"token punctuation\">[</span>PARSER<span class=\"token punctuation\">]</span>\n        Name multiline_pattern\n        Format regex\n        Regex   ^\\<span class=\"token punctuation\">[</span>(<span class=\"token punctuation\">?</span>&lt;timestamp<span class=\"token punctuation\">></span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">}</span>\\<span class=\"token punctuation\">-</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\\<span class=\"token punctuation\">-</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span> <span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\\<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>\\<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span>0<span class=\"token punctuation\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span>)\\<span class=\"token punctuation\">]</span> (<span class=\"token punctuation\">?</span>&lt;message<span class=\"token punctuation\">></span>.<span class=\"token important\">*)</span>\n        Time_Key    time\n        Time_Format %Y<span class=\"token punctuation\">-</span>%m<span class=\"token punctuation\">-</span>%</code></pre>\n<h4 id=\"5-fluent-bit-daemonset-생성\"><a href=\"#5-fluent-bit-daemonset-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5. Fluent Bit DaemonSet 생성</h4>\n<ul>\n<li>위 ConfigMap(fluent-bit-config)을 사용하는 DaemonSet을 배포한다.</li>\n<li>위에서 생성한 ConfigMap을 볼륨마운트해  /fluent-bit/etc/ 위치에 생성된 5개의 conf 파일을 데몬셋이 사용한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: apps/v1\nkind: DaemonSet\nmetadata:\n  name: fluent-bit\n  namespace: elastic\n\t...\n    spec:\n      containers:\n      - name: fluent-bit\n        image: fluent/fluent-bit\n        imagePullPolicy: Always\n        volumeMounts:\n        ...\n        - name: fluent-bit-config\n          mountPath: /fluent-bit/etc/\n      volumes:\n      ....\n      - name: fluent-bit-config\n        configMap:\n          name: fluent-bit-config\n      serviceAccountName: fluent-bit</code></pre>\n<h4 id=\"fluent-bit를-아래의-yaml-엔드포인트를-이용해-차례로-설치한다\"><a href=\"#fluent-bit%EB%A5%BC-%EC%95%84%EB%9E%98%EC%9D%98-yaml-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%B4-%EC%B0%A8%EB%A1%80%EB%A1%9C-%EC%84%A4%EC%B9%98%ED%95%9C%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Fluent Bit를 아래의 YAML 엔드포인트를 이용해 차례로 설치한다.</h4>\n<pre class=\"language-sh\"><code class=\"language-sh\">kubectl apply -f https://raw.githubusercontent.com/event-storming/elasticsearch/main/service-account.yaml\nkubectl apply -f https://raw.githubusercontent.com/event-storming/elasticsearch/main/role.yaml\nkubectl apply -f https://raw.githubusercontent.com/event-storming/elasticsearch/main/role-binding.yaml\nkubectl apply -f https://raw.githubusercontent.com/event-storming/elasticsearch/main/configmap.yaml\nkubectl apply -f https://raw.githubusercontent.com/event-storming/elasticsearch/main/daemonset.yaml</code></pre>\n<h4 id=\"fluent-bit-동작확인\"><a href=\"#fluent-bit-%EB%8F%99%EC%9E%91%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Fluent Bit 동작확인</h4>\n<pre class=\"language-sh\"><code class=\"language-sh\">kubectl get all -n elastic\nkubectl port-forward -n elastic svc/elasticsearch-master 9200\ncurl http://localhost:9200/_cat/indices\n- index 목록 중, 'fluent-shop, fluent-k8s'로 시작되는 index가 존재하면 성공</code></pre>\n<h4 id=\"대상-마이크로서비스12st-mall-배포\"><a href=\"#%EB%8C%80%EC%83%81-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A412st-mall-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>대상 마이크로서비스(12st Mall) 배포</h4>\n<ul>\n<li>shop 네임스페이스를 생성하고, 주문과 배송 마이크로서비스를 배포한다.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl create ns shop\nkubectl apply -f https://raw.githubusercontent.com/acmexii/demo/master/edu/order-liveness.yaml -n shop\nkubectl expose deploy order --port<span class=\"token operator\">=</span><span class=\"token number\">8080</span> -n shop\nkubectl apply -f https://raw.githubusercontent.com/acmexii/demo/master/edu/delivery-rediness-v1.yaml -n shop\nkubectl expose deploy delivery --port<span class=\"token operator\">=</span><span class=\"token number\">8080</span> -n shop</code></pre>\n<h3 id=\"kibana를-통한-12st-mall-서비스-로깅\"><a href=\"#kibana%EB%A5%BC-%ED%86%B5%ED%95%9C-12st-mall-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A1%9C%EA%B9%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kibana를 통한 12st Mall 서비스 로깅</h3>\n<ul>\n<li>\n<p>kibana 서비스를 Port-forwarding 하거나, 서비스를 LoadBalancer Type으로 수정후 접속한다.</p>\n<pre class=\"language-sh\"><code class=\"language-sh\">kubectl port-forward -n elastic deployment/kibana-kibana 5601\nOR, \nkubectl edit svc/kibana-kibana -n elastic</code></pre>\n</li>\n</ul>\n<h4 id=\"1-index-패턴-생성\"><a href=\"#1-index-%ED%8C%A8%ED%84%B4-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Index 패턴 생성</h4>\n<ul>\n<li>Kibana 접속 후, Management > Stack Management를 선택한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/160071078-bd7caa6f-3532-45ba-bb13-a05198aac002.png\" alt=\"image\"></li>\n<li>Kibana > Index Patterns 화면의 Search 필드에 'fluent-shop*'을 입력하고 Time field 에 @timestamp 를 선택하여 수집된 데이터를 인덱싱한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/160071303-0b7b9e35-9f2a-490f-9368-fe5e2312c4b8.png\" alt=\"image\"></li>\n</ul>\n<h4 id=\"2-로그-조회\"><a href=\"#2-%EB%A1%9C%EA%B7%B8-%EC%A1%B0%ED%9A%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 로그 조회</h4>\n<ul>\n<li>Analytics > Discover 를 눌러 조회페이지를 오픈한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/160072101-a5fb8e02-913a-4cbb-bbc5-1ba2fd6a97c7.png\" alt=\"image\"></li>\n<li>'Add filter' 에서 'kubernetes.namespace.name is shop'으로 조건을 지정한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/160072511-b79a1933-ff0d-4476-a1d3-4cf5bf081a24.png\" alt=\"image\"></li>\n<li>조회할 Date Range에 인덱싱된 shop 네임스페이스 data가 존재하면  아래처럼 로그가 나타난다.\n<img src=\"https://user-images.githubusercontent.com/35618409/160073584-24ab9fb6-b341-46e1-b7f3-0f5b8dce2761.png\" alt=\"image\"></li>\n</ul>\n<h4 id=\"3-로그리게이션-log--aggregation\"><a href=\"#3-%EB%A1%9C%EA%B7%B8%EB%A6%AC%EA%B2%8C%EC%9D%B4%EC%85%98-log--aggregation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. 로그리게이션 (Log + Aggregation)</h4>\n<ul>\n<li>로그가 표시되는 영역의 컬럼을 선택하여 주문, 배송 서비스의 Stack trace를 확인한다.</li>\n<li>우측  Selected fields에서 log_processed.log와 kubernetes.labels.app을 선택한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/160073921-c11957df-1854-488b-bbcb-f9df01eebff2.png\" alt=\"image\"></li>\n</ul>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"MSA 로깅 with EFK Stack","anchor":"#msa-로깅-with-efk-stack"},{"depth":3,"value":"마이크로서비스 통합 로깅","anchor":"#마이크로서비스-통합-로깅"},{"depth":4,"value":"ElasticSearch, Kibana 설치","anchor":"#elasticsearch-kibana-설치"},{"depth":3,"value":"Fluent Bit 설치","anchor":"#fluent-bit-설치"},{"depth":4,"value":"1. SA 생성","anchor":"#1-sa-생성"},{"depth":4,"value":"2. ClusterRole 생성","anchor":"#2-clusterrole-생성"},{"depth":4,"value":"3. Role 바인딩","anchor":"#3-role-바인딩"},{"depth":4,"value":"4. Fluent Bit ConfigMap 설정","anchor":"#4-fluent-bit-configmap-설정"},{"depth":4,"value":"5. Fluent Bit DaemonSet 생성","anchor":"#5-fluent-bit-daemonset-생성"},{"depth":4,"value":"Fluent Bit를 아래의 YAML 엔드포인트를 이용해 차례로 설치한다.","anchor":"#fluent-bit를-아래의-yaml-엔드포인트를-이용해-차례로-설치한다"},{"depth":4,"value":"Fluent Bit 동작확인","anchor":"#fluent-bit-동작확인"},{"depth":4,"value":"대상 마이크로서비스(12st Mall) 배포","anchor":"#대상-마이크로서비스12st-mall-배포"},{"depth":3,"value":"Kibana를 통한 12st Mall 서비스 로깅","anchor":"#kibana를-통한-12st-mall-서비스-로깅"},{"depth":4,"value":"1. Index 패턴 생성","anchor":"#1-index-패턴-생성"},{"depth":4,"value":"2. 로그 조회","anchor":"#2-로그-조회"},{"depth":4,"value":"3. 로그리게이션 (Log + Aggregation)","anchor":"#3-로그리게이션-log--aggregation"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}}]}},"context":{}}