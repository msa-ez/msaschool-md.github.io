{"hash":"639846ab77f2d650b364be948c0c3d68be620b02","data":{"markdownPage":{"id":"72bbe31bd2da3950fa85bb9ebc3d74b0","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커","description":"","path":"/operations/istio-resiliency-part2/","timeToRead":2,"content":"<h1 id=\"service-mesh-istio-를-통한-서비스-회복성-part2---서킷브레이커\"><a href=\"#service-mesh-istio-%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%9A%8C%EB%B3%B5%EC%84%B1-part2---%EC%84%9C%ED%82%B7%EB%B8%8C%EB%A0%88%EC%9D%B4%EC%BB%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커</h1>\n<h3 id=\"istio-circuit-breaker\"><a href=\"#istio-circuit-breaker\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Istio Circuit Breaker</h3>\n<ul>\n<li>Istio Circuit Breaker 기능 중,  장애가 감지된 서비스를 서비스 대상에서 일정시간 동안 제외(Pool Ejection)하는 Service Resiliency 를 실습한다.</li>\n</ul>\n<h4 id=\"delivery-이미지-배포\"><a href=\"#delivery-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Delivery 이미지 배포</h4>\n<ul>\n<li>배송 마이크로서비스를 배포한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create deploy delivery --image=ghcr.io/acmexii/delivery:istio-v1 -n tutorial\nkubectl expose deploy delivery --port=8080 -n tutorial</code></pre>\n<h4 id=\"circuit-breaker-설치\"><a href=\"#circuit-breaker-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Circuit Breaker 설치</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt; EOF\n  apiVersion: networking.istio.io/v1alpha3\n  kind: DestinationRule\n  metadata:\n    name: dr-delivery\n    namespace: tutorial\n  spec:\n    host: delivery\n    trafficPolicy:\n      outlierDetection:\n        consecutive5xxErrors: 1\n        interval: 1s\n        baseEjectionTime: 3m\n        maxEjectionPercent: 100\nEOF</code></pre>\n<ul>\n<li>위 CB정책은 delivery 서비스의 라우팅 대상 컨테이너 목록에서 1초단위로 분석하여 1번이라도 서버 오류가 발생 시, 3분동안 라우팅에서 제외하며, 모든 컨테이너가 제외될 수 있음을 나타낸다. </li>\n<li>모든 업스트림 서비스가 장애인 경우,  이스티오는 'No healthy upstream.' 오류를 리턴한다.</li>\n</ul>\n<h4 id=\"circuit-breaker-테스트-환경구성\"><a href=\"#circuit-breaker-%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%99%98%EA%B2%BD%EA%B5%AC%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Circuit Breaker 테스트 환경구성</h4>\n<ul>\n<li>배송서비스의 Replica를 3개로 스케일아웃한다.</li>\n<li>설치된 Http Client 컨테이너에 접속한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl scale deploy delivery --replicas=3 -n tutorial\nkubectl exec -it pod/[SIEGE POD객체] -n tutorial -c siege-nginx  -- /bin/bash</code></pre>\n<h4 id=\"circuit-breaker-동작-확인\"><a href=\"#circuit-breaker-%EB%8F%99%EC%9E%91-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Circuit Breaker 동작 확인</h4>\n<ul>\n<li>배송서비스 확인 (Replica가 3개 이므로, 아래 명령을 3번 이상 호출하여 호스트 정보 확인)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http http://delivery:8080/actuator/echo</code></pre>\n<ul>\n<li>아래 '/actuator/down'을 호출하면, 3개의 컨테이너 중 해당 호출을 받은 컨테이너는 '서비스 다운' 상태를 가지게 된다. (1회만 호출)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http PUT http://delivery:8080/actuator/down</code></pre>\n<ul>\n<li>이 상태에서 아래 '/actuator/health'를 호출하면,  '서비스 다운'  상태인 컨테이너는 5xx 오류를 응답하게 된다. (3회 호출)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http GET http://delivery:8080/actuator/health</code></pre>\n<ul>\n<li>이 때, 서킷브레이커가 발동하여 해당 컨테이너를 (CB설정에 따라) 3분동안 Pool에서 Ejection 한다.</li>\n<li>가용 서비스를 확인해 보면, 아래 명령에 대해 컨테이너 2개만 응답하는 것이 확인된다. (3회 이상 반복 실행)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http http://delivery:8080/actuator/echo</code></pre>\n<ul>\n<li>Pool Ejection 타임(3') 경과후엔 배송서비스가 다시 3개가 동작됨이 확인된다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http http://delivery:8080/actuator/echo</code></pre>\n<h4 id=\"kiali를-통한-circuit-breaker-확인\"><a href=\"#kiali%EB%A5%BC-%ED%86%B5%ED%95%9C-circuit-breaker-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kiali를 통한 Circuit Breaker 확인</h4>\n<ul>\n<li>모니터링 시스템(Kiali)에 접속하여 (<a href=\"http://Kiali\" target=\"_blank\" rel=\"noopener noreferrer\">http://Kiali</a> EXTERNAL-IP:20001)배송서비스 Circuit Breaker 배지(Badge) 확인</li>\n</ul>\n<blockquote>\n<p>Kiali 가 LoadBalancer로 노출되어있지 않다면</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl patch svc kiali -n istio-system -p &#39;{&quot;spec&quot;: {&quot;type&quot;: &quot;LoadBalancer&quot;}}&#39;</code></pre>\n</blockquote>\n<pre class=\"language-text\"><code class=\"language-text\"></code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커","anchor":"#service-mesh-istio-를-통한-서비스-회복성-part2---서킷브레이커"},{"depth":3,"value":"Istio Circuit Breaker","anchor":"#istio-circuit-breaker"},{"depth":4,"value":"Delivery 이미지 배포","anchor":"#delivery-이미지-배포"},{"depth":4,"value":"Circuit Breaker 설치","anchor":"#circuit-breaker-설치"},{"depth":4,"value":"Circuit Breaker 테스트 환경구성","anchor":"#circuit-breaker-테스트-환경구성"},{"depth":4,"value":"Circuit Breaker 동작 확인","anchor":"#circuit-breaker-동작-확인"},{"depth":4,"value":"Kiali를 통한 Circuit Breaker 확인","anchor":"#kiali를-통한-circuit-breaker-확인"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}