{"hash":"06a886723e5e9e504c2e092ae07219a81ecc6278","data":{"markdownPage":{"id":"72bbe31bd2da3950fa85bb9ebc3d74b0","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커","description":"","path":"/operations/istio-resiliency-part2/","timeToRead":4,"content":"<h1 id=\"service-mesh-istio-를-통한-서비스-회복성-part2---서킷브레이커\"><a href=\"#service-mesh-istio-%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%9A%8C%EB%B3%B5%EC%84%B1-part2---%EC%84%9C%ED%82%B7%EB%B8%8C%EB%A0%88%EC%9D%B4%EC%BB%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커</h1>\n<h1 id=\"service-mesh-istio-를-통한-서비스-회복성-part2---서킷브레이커-1\"><a href=\"#service-mesh-istio-%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%9A%8C%EB%B3%B5%EC%84%B1-part2---%EC%84%9C%ED%82%B7%EB%B8%8C%EB%A0%88%EC%9D%B4%EC%BB%A4-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커</h1>\n<h2 id=\"istio-circuit-breaker\"><a href=\"#istio-circuit-breaker\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Istio Circuit Breaker</h2>\n<p>Istio Circuit Breaker 기능으로는 Connection Pool의 크기를 조정하여, DDoS 공격 등을 차단하거나  장애가 감지된 서비스를 서비스 대상에서 일정시간 동안 제외(Pool Ejection)가 가능하다. </p>\n<p>랩에서 우리는 Istio의 Circuit Breaker 기능 중에서, 오류가 있는 컨테이너를 지정된 시간만큼 Pool Ejection하는 Service Resiliency를 실습한다.</p>\n<h3 id=\"delivery-이미지-배포\"><a href=\"#delivery-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Delivery 이미지 배포</h3>\n<ul>\n<li>이전 랩에서 사용한 Istio Injection이 적용된 tutorial 네임스페이스를 사용한다.</li>\n<li>배송 마이크로서비스를 배포하고 인스턴스를 2개로 스케일 아웃시킨다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create deploy delivery --image=ghcr.io/acmexii/delivery:istio-circuitbreaker -n tutorial\nkubectl scale deploy delivery --replicas=2 -n tutorial\nkubectl expose deploy delivery --port=8080 -n tutorial</code></pre>\n<h3 id=\"배송-서비스에-circuit-breaker-설정\"><a href=\"#%EB%B0%B0%EC%86%A1-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-circuit-breaker-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>배송 서비스에 Circuit Breaker 설정</h3>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt; EOF\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: dr-delivery\n  namespace: tutorial\nspec:\n  host: delivery\n  trafficPolicy:\n    loadBalancer:\n      simple: ROUND_ROBIN\n      localityLbSetting:\n        enabled: false\n    outlierDetection:\n      interval: 10s\n      consecutive5xxErrors: 1\n      baseEjectionTime: 3m\n      maxEjectionPercent: 100\nEOF</code></pre>\n<ul>\n<li>위 CB정책은 10초마다 스캔하여 delivery 서비스의 라우팅 대상 컨테이너로부터 1번이라도 서버 오류가 발생 시, 3분동안 라우팅에서 제외하며, 모든 컨테이너가 제외될 수 있음을 나타낸다. </li>\n<li>모든 업스트림 서비스가 장애인 경우,  이스티오는 'No healthy upstream.' 오류를 리턴한다.</li>\n</ul>\n<h3 id=\"특정-서비스에-장애유도\"><a href=\"#%ED%8A%B9%EC%A0%95-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-%EC%9E%A5%EC%95%A0%EC%9C%A0%EB%8F%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>특정 서비스에 장애유도</h3>\n<ul>\n<li>설치된 Http Client 컨테이너에 접속한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it siege -c siege -n tutorial -- /bin/bash</code></pre>\n<ul>\n<li>배송서비스 확인 (Replica가 2개 이므로, 아래 명령을 2번 이상 호출하여 호스트 정보 확인)</li>\n<li>각 컨테이너마다 번갈아 가며 호스트 이름과 클러스터 IP(IPv4)가 출력된다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http http://delivery:8080/actuator/echo</code></pre>\n<ul>\n<li>출력되는 정보에서 <del>마음에 들지않는</del> 배송 서비스 IP를 복사하여 아래와 같이 일부러 장애를 발생시킨다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># example, 192.168.79.155를 수정\nhttp PUT http://192.168.79.155:8080/actuator/down</code></pre>\n<ul>\n<li>그런 다음, 아래 '/actuator/health'를 2번 이상 호출해 보면, '위에서 발생시킨 장애' 상태인 컨테이너는 5xx 오류를 응답하게 된다.</li>\n<li>(실제, 5xx 오류가 리턴되면 Istio는 자동 Retry를 시도하고 Healthy한 컨테이너로부터 응답을 받기 때문에 결과는 항상 'UP' 상태가 보여진다.)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http GET http://delivery:8080/actuator/health</code></pre>\n<ul>\n<li>이 때, 서킷브레이커가 발동하여 5xx 오류를 리턴한 해당 컨테이너를 (CB설정에 따라) 3분동안 Pool에서 Ejection 한다.</li>\n</ul>\n<h3 id=\"pool-ejection-확인\"><a href=\"#pool-ejection-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pool Ejection 확인</h3>\n<ul>\n<li>가용 서비스를 확인해 보면, 아래 명령에 대해 컨테이너1개만 응답하는 것이 확인된다. (3회 이상 반복 실행)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http http://delivery:8080/actuator/echo</code></pre>\n<ul>\n<li>Pool Ejection 타임(3') 경과후엔 배송서비스가 다시 2개가 동작됨이 확인된다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http http://delivery:8080/actuator/echo</code></pre>\n<h3 id=\"kiali를-통한-circuit-breaker-확인\"><a href=\"#kiali%EB%A5%BC-%ED%86%B5%ED%95%9C-circuit-breaker-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kiali를 통한 Circuit Breaker 확인</h3>\n<ul>\n<li>모니터링 시스템(Kiali)에 접속해 (kiali.service.com/kiali)배송서비스를 확인해 보면, Circuit Breaker가 설정(Badge 확인)되어 있고, 동작한 것을 볼 수 있다.\n<img src=\"https://user-images.githubusercontent.com/35618409/204700407-72dc696c-113b-4c9c-872b-177e77206539.png\" alt=\"image\"></li>\n</ul>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커","anchor":"#service-mesh-istio-를-통한-서비스-회복성-part2---서킷브레이커"},{"depth":1,"value":" Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커","anchor":"#service-mesh-istio-를-통한-서비스-회복성-part2---서킷브레이커-1"},{"depth":2,"value":"Istio Circuit Breaker","anchor":"#istio-circuit-breaker"},{"depth":3,"value":"Delivery 이미지 배포","anchor":"#delivery-이미지-배포"},{"depth":3,"value":"배송 서비스에 Circuit Breaker 설정","anchor":"#배송-서비스에-circuit-breaker-설정"},{"depth":3,"value":"특정 서비스에 장애유도","anchor":"#특정-서비스에-장애유도"},{"depth":3,"value":"Pool Ejection 확인","anchor":"#pool-ejection-확인"},{"depth":3,"value":"Kiali를 통한 Circuit Breaker 확인","anchor":"#kiali를-통한-circuit-breaker-확인"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}}]}},"context":{}}