{"hash":"06a886723e5e9e504c2e092ae07219a81ecc6278","data":{"markdownPage":{"id":"929b149d0ac0435772a5ce0c7a2b761a","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana","description":"","path":"/operations/istio-msa-telemetry/","timeToRead":9,"content":"<h1 id=\"service-mesh-msa-모니터링-w-istio-addon-grafana\"><a href=\"#service-mesh-msa-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-w-istio-addon-grafana\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[Service Mesh] MSA 모니터링 w/ Istio addon Grafana</h1>\n<h1 id=\"service-mesh-msa-모니터링-w-istio-addon-grafana-1\"><a href=\"#service-mesh-msa-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-w-istio-addon-grafana-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[Service Mesh] MSA 모니터링 w/ Istio addon Grafana</h1>\n<h2 id=\"prometheusgrafana기반-k8s-통합-모니터링\"><a href=\"#prometheusgrafana%EA%B8%B0%EB%B0%98-k8s-%ED%86%B5%ED%95%A9-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Prometheus/Grafana기반 K8s 통합 모니터링</h2>\n<ul>\n<li>프로메테우스는 SoundCloud 에서 만든 go언어 기반 오픈소스 모니터링 툴</li>\n<li>kubernetes 환경에서 모니터링하기 원하는 리소스로부터 metirc을 수집하고 해당 메트릭을 이용해서 모니터링</li>\n<li>이상 증세가 발생했을 때 Slack, Mail 또는 다른 Webhook을 이용해서 알림을 주는 등 확장 기능 제공</li>\n</ul>\n<h3 id=\"모니터링-서버-설치하기-if-not-installed\"><a href=\"#%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0-if-not-installed\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>모니터링 서버 설치하기 (If not Installed)</h3>\n<ul>\n<li>다운로드한 Istio 폴더에서 Addon Server YAML로 설치</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f samples/addons</code></pre>\n<h4 id=\"모니터링-대상-마이크로서비스-배포\"><a href=\"#%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%EB%8C%80%EC%83%81-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>모니터링 대상 마이크로서비스 배포</h4>\n<ul>\n<li>Shop 네임스페이스를 만들고, 주문과 배송서비스를 배포한다.</li>\n<li>클라이언트용 Pod도 배포한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create ns shop\nkubectl label namespace shop istio-injection=enabled\nkubectl apply -f https://raw.githubusercontent.com/acmexii/demo/master/edu/order-liveness.yaml -n shop\nkubectl expose deploy order --port=8080 -n shop\nkubectl apply -f https://raw.githubusercontent.com/acmexii/demo/master/edu/delivery-rediness-v1.yaml -n shop\nkubectl expose deploy delivery --port=8080 -n shop\n# Client Pod deploy\nkubectl apply -f https://raw.githubusercontent.com/acmexii/demo/master/edu/siege-pod.yaml -n shop</code></pre>\n<h3 id=\"promql-test-in-expression-browser\"><a href=\"#promql-test-in-expression-browser\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PromQL Test in Expression Browser</h3>\n<ul>\n<li>PromQL Expression Browser Open</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># First, Change Other Services Scope to ClusterIP\nkubectl patch svc kiali -n istio-system -p &#39;{&quot;spec&quot;: {&quot;type&quot;: &quot;ClusterIP&quot;}}&#39;\nkubectl patch svc tracing -n istio-system -p &#39;{&quot;spec&quot;: {&quot;type&quot;: &quot;ClusterIP&quot;}}&#39;\n\nkubectl patch service/prometheus -n istio-system -p &#39;{&quot;spec&quot;: {&quot;type&quot;: &quot;LoadBalancer&quot;}}&#39;</code></pre>\n<ul>\n<li>Prometheus service EXTERNAL-IP:9090에 접속한다.</li>\n<li>아래와 같은 PromQL Playground WebUI가 나타난다.\n<img src=\"https://user-images.githubusercontent.com/35618409/204709566-2bb3035e-631a-458e-aa4c-d1f4dfb94d3d.png\" alt=\"image\"></li>\n<li>계속하기 전 주문 서비스 엔드 포인트를 조회한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it pod/siege -n shop -- /bin/bash\nhttp GET http://order:8080\nhttp GET http://order:8080/orders</code></pre>\n<ul>\n<li>다시 Expression 브라우저 화면에서</li>\n<li>입력란에 커서를 두고, 메트릭을 입력하면 사용 가능한 메트릭이 자동완성되어 나타난다. </li>\n<li>istio_requests 입력하고, 나타난 메트릭 중 'istio_requests_total'을 입력하고 실행(Execute 클릭) 한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/204707729-ef1279f4-9cfa-4540-8591-4c901ede7e99.png\" alt=\"image\"></li>\n<li>조회된 결과는 해당 메트릭으로 가능한 모든 라벨(메트릭의 필터)을 보여준다.</li>\n<li>이번엔 라벨을 활용하여 주문서비스 모든 요청횟수를 조회해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">istio_requests_total{destination_service_name=&quot;order&quot;}</code></pre>\n<ul>\n<li>멀티 라벨로 주문서비스의 다차원 데이터 모델을 조회해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">istio_requests_total{destination_service=&quot;order.shop.svc.cluster.local&quot;, response_code = &quot;200&quot;}\nistio_requests_total{destination_service=&quot;order.shop.svc.cluster.local&quot;, response_code != &quot;500&quot;}</code></pre>\n<ul>\n<li>아래와 같이 Kubernetes 메타정보와 응답코드를 포함한 Label 정보가 출력된다.\n<img src=\"https://user-images.githubusercontent.com/35618409/204709400-86633082-50ec-46a7-af14-c29dfc1d069e.png\" alt=\"image\"></li>\n<li>이번엔 Siege로 주문서비스에 부하를 발생한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">siege -c30 -t40S -v http://order:8080</code></pre>\n<ul>\n<li>Expression Browser에 아래 쿼리로 모니터링한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">rate(istio_requests_total{app=&quot;order&quot;,destination_service=&quot;order.shop.svc.cluster.local&quot;,response_code=&quot;200&quot;}[5m])</code></pre>\n<ul>\n<li>'Graph' 탭을 클릭한다.</li>\n<li>지난 5분간 Data로 PromQL기반의 그래프가 나타난다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183346842-1dda3245-d264-452e-9a2a-9c016ff7318e.png\" alt=\"image\"></li>\n<li>보다 상세한 Istio기반 메트릭은 아래 링크를 참조한다.</li>\n<li><a href=\"https://istio.io/latest/docs/reference/config/metrics/\" target=\"_blank\" rel=\"noopener noreferrer\">Istio Standard Metrics 참조</a></li>\n<li>이제, Istio 메트릭 기반으로 Grafana를 통해 대쉬보드를 시각화해 보자</li>\n</ul>\n<h2 id=\"서비스-모니터링-in-grafana\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-in-grafana\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 모니터링 in Grafana</h2>\n<ul>\n<li>Grafana 서비스 Open </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl patch service/grafana -n istio-system -p &#39;{&quot;spec&quot;: {&quot;type&quot;: &quot;LoadBalancer&quot;}}&#39;</code></pre>\n<ul>\n<li>Grafana service EXTERNAL-IP에 접속한다.</li>\n<li>아래와 같은 Grafana main WebUI가 나타난다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183338028-f5ac4664-d30d-445b-8596-630afad7fc2c.png\" alt=\"image\"></li>\n</ul>\n<h4 id=\"built-in-dashboard-뷰\"><a href=\"#built-in-dashboard-%EB%B7%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Built-in Dashboard 뷰</h4>\n<ul>\n<li>왼쪽 Search 아이콘 메뉴를 클릭 후, Istio 폴더를 펼친다.</li>\n<li>목록 중, Istio Service Dashboard를 클릭한다.</li>\n<li>조회 조건에서 order.shop.svc.cluster.local 설정하면 istio Built-in Dashboard가 나타난다.</li>\n</ul>\n<h4 id=\"grafana-providing-dashboard-뷰\"><a href=\"#grafana-providing-dashboard-%EB%B7%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Grafana providing Dashboard 뷰</h4>\n<ul>\n<li>왼쪽 '+' 아이콘의 import 서브메뉴를 클릭한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/204796971-0e1840ce-4781-421c-90a0-680bebcbb172.png\" alt=\"image\"></li>\n<li>Grafana dashboard id 입력란에 '6417'번을 입력하고 Load를 클릭 후, 로딩된 차트를 확인한다.</li>\n<li>동일한 방법으로 Grafana dashboard id 입력란에 '315'번을 입력하고 차트를 로딩한다.</li>\n<li>접속한 Siege 터미널에서 주문서비스로 부하를 발생시킨다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it pod/siege -n shop -- /bin/bash\nsiege -c20 -t30S -v http://order:8080</code></pre>\n<ul>\n<li>부하량에 따른 서비스 차트의 실시간 Gauge를 확인한다.</li>\n<li>아래와 같이 Network IO, CPU, Memory 사용량이 실시간 증가한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183344194-8f4e571b-3640-4c54-8896-e7b7c6b3a7ca.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"dashboard-customizing\"><a href=\"#dashboard-customizing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dashboard Customizing</h3>\n<ul>\n<li>'315' id의 쿠버네티스 모니터링 차트에서 주문서비스 요청율(rps)을 상단에 추가해 본다.</li>\n<li>화면 상단의 'Add panel'을 클릭하여 empty panel을 추가한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183352278-f8e02a99-cb2d-4fa3-9e20-5a1b55a147e0.png\" alt=\"image\"></li>\n<li>Metics 입력란에 아래 PromQL을 입력한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">rate(istio_requests_total{app=&quot;order&quot;,destination_service=&quot;order.shop.svc.cluster.local&quot;}[5m])</code></pre>\n<ul>\n<li>왼쪽 Panel title에 '주문서비스 요청율'을 입력한다.</li>\n<li>apply를 눌러 적용한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183353312-531a693a-ac33-43e4-b75c-009ddef30153.png\" alt=\"image\"></li>\n<li>위젯의 길이를 늘여 전체 크기로 맞춘다. </li>\n<li>상단의 저장 아이콘을 눌러 차트를 저장한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183370320-ebe428ed-413e-48ba-a809-d796b2336a74.png\" alt=\"image\"></li>\n</ul>\n<h4 id=\"dashboard-참조-url\"><a href=\"#dashboard-%EC%B0%B8%EC%A1%B0-url\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dashboard 참조 URL</h4>\n<ul>\n<li>아래 링크를 통해 Grafana가 제공하는 더 많은 대쉬보드를 검색하여 참고할 수 있다.</li>\n<li><a href=\"https://grafana.com/grafana/dashboards/\" target=\"_blank\" rel=\"noopener noreferrer\">Grafana Dashboard 참조</a></li>\n</ul>\n<h3 id=\"이상감지--alerting\"><a href=\"#%EC%9D%B4%EC%83%81%EA%B0%90%EC%A7%80--alerting\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이상감지 &#x26; Alerting</h3>\n<ul>\n<li>외부로부터 주문서비스로의 DDOS 공격에 대한 트래픽 임계치를 설정하고 이상이 감지되었을 때 이를 설정된 채널에 얼럿팅해 본다.</li>\n<li>얼럿팅 채널은 슬랙(Slack)을 적용한다.   </li>\n</ul>\n<h4 id=\"alert-조건-설정\"><a href=\"#alert-%EC%A1%B0%EA%B1%B4-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Alert 조건 설정</h4>\n<ul>\n<li>수정한 쿠버네티스 클러스터 차트(id: 315)의 '주문서비스 요청율' Graph를 편집한다.</li>\n<li>하단의 3번째 탭인 Alert을 클릭하여 Alert Rule을 생성한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/204773849-5f135040-fc0e-4213-82fb-424f93b3ea49.png\" alt=\"image\"></li>\n</ul>\n<ol>\n<li>Rule type\n<img src=\"https://user-images.githubusercontent.com/35618409/204776129-b65afef8-0361-4160-bbf7-60f3beb5c92a.png\" alt=\"image\"></li>\n</ol>\n<ul>\n<li>기본 설정에서 Folder를 'istio'로 선택</li>\n</ul>\n<ol start=\"2\">\n<li>Create a query to be alerted on\n<img src=\"https://user-images.githubusercontent.com/35618409/204776826-03795976-0cec-4373-810a-6f1ad9aa1c5d.png\" alt=\"image\"></li>\n</ol>\n<ul>\n<li>얼럿팅 임계치를 \"평균 초당 RPS 30\"으로 설정한다.</li>\n<li>condition WHEN > avg() 선택, IS ABOVE > 30 입력</li>\n</ul>\n<ol start=\"3\">\n<li>Define alert confitions</li>\n</ol>\n<p><strong>초당 요청율이 30개를 초과하여 30초 동안 지속되면 DDOS 공격으로 간주한다.</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/204779508-bbaaa55d-39f3-4c00-aef2-d80fa9ba51c2.png\" alt=\"image\"></p>\n<ul>\n<li>임계치가 설정된 Expression(B)에 대해 평가 주기와 얼럿팅을 만족하는 Duration을 지정한다.</li>\n<li>설정은, 10초 주기로 평가해서 요청율이 30을 넘게되면 \"Pending\" 상태로 바뀌고, 30초 동안 지속되면 Alert이 \"Firing\"된다.</li>\n<li>이때, 요청율이 30초 동안 지속되지 않으면 다시 \"Normal\" 상태로 전환된다.</li>\n<li>Alert Rule 앞에 붙는 ♥의 색상으로도 구분가능 (녹색:Normal, 황색:Alert Pending, 적색:Alert Firing)</li>\n</ul>\n<h4 id=\"명시적-alert-발생ddos-attack\"><a href=\"#%EB%AA%85%EC%8B%9C%EC%A0%81-alert-%EB%B0%9C%EC%83%9Dddos-attack\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>명시적 Alert 발생(DDOS attack)</h4>\n<ul>\n<li>Siege 부하로 초당 요청율이 임계치를 상회하도록 워크로드를 발생시킨다..</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it pod/siege -n shop -- /bin/bash\nsiege -c10 -t40S -v http://order:8080</code></pre>\n<ul>\n<li>Alerting 메뉴의 Alert rules 탭을 보면 'PENDING' 상태를 가진 '주문서비스 요청율'이 목록에서 조회된다.</li>\n<li>(30초 이상 경과되면, 설정된 DDOS 공격으로 간주되어 'Firing' 상태로 바뀐다.\n<img src=\"https://user-images.githubusercontent.com/35618409/204789604-5df4da5b-6592-493d-afaa-48faa63e5142.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"notification-설정\"><a href=\"#notification-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Notification 설정</h3>\n<p>Alert이 Firing 될때마다 슬랙(Slack) 채널로 수신해 보자.</p>\n<ul>\n<li>Alerting 메뉴의 두번째 메뉴인 \"Contact points\"를 클릭한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/204790130-ab2c09b4-1079-45ab-b682-44b4dd541bfa.png\" alt=\"image\"></li>\n<li>기본 Contact points를 Slack으로 받기 위해 grafana-default-email 편집 아이콘(몽당 연필)을 누른다.</li>\n<li>grafana-default-email 이름을 가진 Email 타입의 Alert rules 이 보이는데 편집 아이콘(몽당 연필)을 눌러 본다.\n<img src=\"https://user-images.githubusercontent.com/35618409/204790625-5b3ce11b-257d-44d8-9078-5c177322accb.png\" alt=\"image\"></li>\n<li>이름을 grafana-default-slack으로 수정한다.</li>\n<li>Contact point type을 'Slack'으로 지정한다.</li>\n</ul>\n<h4 id=\"slack-설정\"><a href=\"#slack-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Slack 설정</h4>\n<pre class=\"language-text\"><code class=\"language-text\">Recipient : #microservice-digging\nToken : xoxb-4445199624084-4446067374756-ezi3B06BkMeeD56e2amHUUn5\nTitle : {{len .Alerts.Firing}} firing, {{len .Alerts.Resolved}} resolved\nText Body : {{range.Alerts}}{{.Status}}: {{.Labels.alertname}}{{end}}</code></pre>\n<ul>\n<li>테스트를 눌러 동작 여부를 확인한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/204793483-96d8333d-3445-41fc-b57e-9f6d33114d97.png\" alt=\"image\"></li>\n<li>Token과 API 설정이 올바르다면 얼럿 메시지가 수신된다.</li>\n<li><img src=\"https://user-images.githubusercontent.com/35618409/204793841-591eeacf-23f6-4844-b422-ba1bc38a3be3.png\" alt=\"image\">  </li>\n<li>테스트까지 종료 후, Save contact point 를 눌러 저장한다.</li>\n</ul>\n<h4 id=\"테스트-slack-notification\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-slack-notification\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>테스트 Slack Notification</h4>\n<ul>\n<li>다시 Siege 부하로 워크로드를 발생시키고 Alerting 상태와 Slack을 모니터한다...</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it pod/siege -n shop -- /bin/bash\nsiege -c10 -t40S -v http://order:8080</code></pre>\n<ul>\n<li>슬랙 채널에 DDOS 공격에 의한 Alet 메시지 수신이 자동으로 확인된다.\n<img src=\"https://user-images.githubusercontent.com/35618409/204797293-59740055-385a-4ecd-8ad5-9ca3c3ef2ae8.png\" alt=\"image\"></li>\n</ul>\n<h3 id=\"기타-notification-type\"><a href=\"#%EA%B8%B0%ED%83%80-notification-type\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>기타 Notification Type</h3>\n<p>Kafka를 포함한 다양한 Contact point Type과 각 Type별 필요한 추가정보를 설정을 할 수 있다.</p>\n<h4 id=\"e-mail\"><a href=\"#e-mail\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>E-Mail</h4>\n<ul>\n<li>Notification이 Email 인 경우, 수신자 메일주소를 등록한다.</li>\n<li>\n<p>'Test' 버튼을 눌러보자.</p>\n<blockquote>\n<p>SMTP 정보를 grafana.ini에 등록해야 한다는 메시지가 출력된다.</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl edit cm grafana -n istio-system</code></pre>\n<ul>\n<li>default 설정</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">  grafana.ini: |\n    [analytics]\n    check_for_updates = true\n    [grafana_net]\n    url = https://grafana.net\n    [log]\n    mode = console\n    [paths]\n    data = /var/lib/grafana/\n    logs = /var/log/grafana\n    plugins = /var/lib/grafana/plugins\n    provisioning = /etc/grafana/provisioning</code></pre>\n<ul>\n<li>아래 내용을 추가한다. (GMail 일 경우, 예시)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    [smtp]\n    enabled = true\n    host = smtp.gmail.com:587\n    user = gmail-user@gmail.com  # Mail Account\n    password = ************             # Password\n    skip_verify = true</code></pre>\n<ul>\n<li>편집 후, Grafana Pod를 재시작한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl delete pod/GRAFANA-POD-객체 -n istio-system</code></pre>\n<ul>\n<li>SMTP 설정은 메일 서버의 2-Factor인증에 따라 제대로 working하지 않을 수 있다.</li>\n</ul>\n<h4 id=\"기타-notification-설정-참조-url\"><a href=\"#%EA%B8%B0%ED%83%80-notification-%EC%84%A4%EC%A0%95-%EC%B0%B8%EC%A1%B0-url\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>기타 Notification 설정 참조 URL</h4>\n<p><a href=\"https://grafana.com/docs/grafana/latest/alerting/contact-points/notifiers/\" target=\"_blank\" rel=\"noopener noreferrer\">https://grafana.com/docs/grafana/latest/alerting/contact-points/notifiers/</a></p>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" MSA 모니터링 w/ Istio addon Grafana","anchor":"#service-mesh-msa-모니터링-w-istio-addon-grafana"},{"depth":1,"value":" MSA 모니터링 w/ Istio addon Grafana","anchor":"#service-mesh-msa-모니터링-w-istio-addon-grafana-1"},{"depth":2,"value":"Prometheus/Grafana기반 K8s 통합 모니터링","anchor":"#prometheusgrafana기반-k8s-통합-모니터링"},{"depth":3,"value":"모니터링 서버 설치하기 (If not Installed)","anchor":"#모니터링-서버-설치하기-if-not-installed"},{"depth":4,"value":"모니터링 대상 마이크로서비스 배포","anchor":"#모니터링-대상-마이크로서비스-배포"},{"depth":3,"value":"PromQL Test in Expression Browser","anchor":"#promql-test-in-expression-browser"},{"depth":2,"value":"서비스 모니터링 in Grafana","anchor":"#서비스-모니터링-in-grafana"},{"depth":4,"value":"Built-in Dashboard 뷰","anchor":"#built-in-dashboard-뷰"},{"depth":4,"value":"Grafana providing Dashboard 뷰","anchor":"#grafana-providing-dashboard-뷰"},{"depth":3,"value":"Dashboard Customizing","anchor":"#dashboard-customizing"},{"depth":4,"value":"Dashboard 참조 URL","anchor":"#dashboard-참조-url"},{"depth":3,"value":"이상감지 & Alerting","anchor":"#이상감지--alerting"},{"depth":4,"value":"Alert 조건 설정","anchor":"#alert-조건-설정"},{"depth":4,"value":"명시적 Alert 발생(DDOS attack)","anchor":"#명시적-alert-발생ddos-attack"},{"depth":3,"value":"Notification 설정","anchor":"#notification-설정"},{"depth":4,"value":"Slack 설정","anchor":"#slack-설정"},{"depth":4,"value":"테스트 Slack Notification","anchor":"#테스트-slack-notification"},{"depth":3,"value":"기타 Notification Type","anchor":"#기타-notification-type"},{"depth":4,"value":"E-Mail","anchor":"#e-mail"},{"depth":4,"value":"기타 Notification 설정 참조 URL","anchor":"#기타-notification-설정-참조-url"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}}]}},"context":{}}