{"hash":"8ec2d2d769250ada18e8c764b3b6b292cc183178","data":{"markdownPage":{"id":"929b149d0ac0435772a5ce0c7a2b761a","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana","description":"","path":"/operations/istio-msa-telemetry/","timeToRead":6,"content":"<h1 id=\"service-mesh-msa-모니터링-w-istio-addon-grafana\"><a href=\"#service-mesh-msa-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-w-istio-addon-grafana\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[Service Mesh] MSA 모니터링 w/ Istio addon Grafana</h1>\n<h1 id=\"service-mesh-msa-모니터링-w-istio-addon-grafana-1\"><a href=\"#service-mesh-msa-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-w-istio-addon-grafana-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[Service Mesh] MSA 모니터링 w/ Istio addon Grafana</h1>\n<h3 id=\"prometheusgrafana기반-k8s-통합-모니터링\"><a href=\"#prometheusgrafana%EA%B8%B0%EB%B0%98-k8s-%ED%86%B5%ED%95%A9-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Prometheus/Grafana기반 K8s 통합 모니터링</h3>\n<ul>\n<li>프로메테우스는 SoundCloud 에서 만든 go언어 기반 오픈소스 모니터링 툴</li>\n<li>kubernetes 환경에서 모니터링하기 원하는 리소스로부터 metirc을 수집하고 해당 메트릭을 이용해서 모니터링</li>\n<li>이상 증세가 발생했을 때 Slack, Mail 또는 다른 Webhook을 이용해서 알림을 주는 등 확장 기능 제공</li>\n</ul>\n<h4 id=\"설치하기\"><a href=\"#%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>설치하기</h4>\n<ul>\n<li>다운로드한 Istio 폴더에서 Addon Server YAML로 설치</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd istio-1.11.3\nkubectl apply -f samples/addons</code></pre>\n<h4 id=\"모니터링-대상-마이크로서비스-배포\"><a href=\"#%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%EB%8C%80%EC%83%81-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>모니터링 대상 마이크로서비스 배포</h4>\n<ul>\n<li>Shop 네임스페이스를 만들고, 주문과 배송서비스를 배포한다.</li>\n<li>클라이언트용 Pod도 배포한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create ns shop\nkubectl label namespace shop istio-injection=enabled\nkubectl apply -f https://raw.githubusercontent.com/acmexii/demo/master/edu/order-liveness.yaml -n shop\nkubectl expose deploy order --port=8080 -n shop\nkubectl apply -f https://raw.githubusercontent.com/acmexii/demo/master/edu/delivery-rediness-v1.yaml -n shop\nkubectl expose deploy delivery --port=8080 -n shop\n# Client Pod deploy\nkubectl apply -f https://raw.githubusercontent.com/acmexii/demo/master/edu/siege-pod.yaml -n shop</code></pre>\n<h3 id=\"promql-test-in-expression-browser\"><a href=\"#promql-test-in-expression-browser\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PromQL Test in Expression Browser</h3>\n<ul>\n<li>PromQL Expression Browser Open</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl patch service/prometheus -n istio-system -p &#39;{&quot;spec&quot;: {&quot;type&quot;: &quot;LoadBalancer&quot;}}&#39;</code></pre>\n<ul>\n<li>Prometheus service EXTERNAL-IP:9090에 접속한다.</li>\n<li>아래와 같은 PromQL Playground WebUI가 나타난다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183331272-01891ec2-74cf-41f2-8876-02fb34a9107f.png\" alt=\"image\"></li>\n<li>Expression browser에서 주문서비스 요청 횟수를 조회해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">istio_requests_total{destination_service=&quot;order.shop.svc.cluster.local&quot;}</code></pre>\n<ul>\n<li>아무런 요청이 없었으므로, 'Empty query result'가 출력된다.</li>\n<li>Client Pod에 접속해 주문서비스를 query한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it pod/siege -n shop -- /bin/bash\nhttp GET http://order:8080\nhttp GET http://order:8080/orders</code></pre>\n<ul>\n<li>다시 PromQL로 주문서비스 요청 횟수를 조회해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">istio_requests_total{destination_service=&quot;order.shop.svc.cluster.local&quot;, response_code = &quot;200&quot;}\nistio_requests_total{destination_service=&quot;order.shop.svc.cluster.local&quot;, response_code != &quot;500&quot;}\nsum(kube_pod_status_phase{namespace=&quot;shop&quot;, phase=&quot;Running&quot;})</code></pre>\n<ul>\n<li>아래와 같이 Kubernetes 메타정보와 응답코드를 포함한 Label 정보가 출력된다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183334592-87417cc9-15bd-4b15-bc67-7e9766c5889e.png\" alt=\"image\"></li>\n<li>이번엔 Siege로 주문서비스에 부하를 발생한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">siege -c30 -t40S -v http://order:8080</code></pre>\n<ul>\n<li>Expression Browser에 아래 쿼리로 모니터링한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">rate(istio_requests_total{app=&quot;order&quot;,destination_service=&quot;order.shop.svc.cluster.local&quot;,response_code=&quot;200&quot;}[5m])</code></pre>\n<ul>\n<li>'Graph' 탭을 클릭한다.</li>\n<li>지난 5분간 Data로 PromQL기반의 그래프가 나타난다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183346842-1dda3245-d264-452e-9a2a-9c016ff7318e.png\" alt=\"image\"></li>\n<li>보다 상세한 Istio기반 메트릭은 아래 링크를 참조한다.</li>\n<li><a href=\"https://istio.io/latest/docs/reference/config/metrics/\" target=\"_blank\" rel=\"noopener noreferrer\">Istio Standard Metrics 참조</a></li>\n<li>이제, Istio 메트릭 기반으로 Grafana를 통해 대쉬보드를 시각화해 보자</li>\n</ul>\n<h3 id=\"서비스-모니터링-in-grafana\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-in-grafana\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 모니터링 in Grafana</h3>\n<ul>\n<li>Grafana 서비스 Open </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl patch service/grafana -n istio-system -p &#39;{&quot;spec&quot;: {&quot;type&quot;: &quot;LoadBalancer&quot;}}&#39;</code></pre>\n<ul>\n<li>Grafana service EXTERNAL-IP에 접속한다.</li>\n<li>아래와 같은 Grafana main WebUI가 나타난다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183338028-f5ac4664-d30d-445b-8596-630afad7fc2c.png\" alt=\"image\"></li>\n</ul>\n<h4 id=\"built-in-dashboard-뷰\"><a href=\"#built-in-dashboard-%EB%B7%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Built-in Dashboard 뷰</h4>\n<ul>\n<li>왼쪽 Search 아이콘 메뉴를 클릭 후, Istio 폴더를 펼친다.</li>\n<li>목록 중, Istio Service Dashboard를 클릭한다.</li>\n<li>조회 조건에서 order.shop.svc.cluster.local 설정하면 istio Built-in Dashboard가 나타난다.</li>\n</ul>\n<h4 id=\"grafana-providing-dashboard-뷰\"><a href=\"#grafana-providing-dashboard-%EB%B7%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Grafana providing Dashboard 뷰</h4>\n<ul>\n<li>왼쪽 '+' 아이콘의 import 서브메뉴를 클릭한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183344494-fc7ca028-b95e-4fbb-9ab3-61db07765b62.png\" alt=\"image\"></li>\n<li>Grafana dashboard id 입력란에 '6417'번을 입력하고 Load를 클릭 후, 로딩된 차트를 확인한다.</li>\n<li>동일한 방법으로 Grafana dashboard id 입력란에 '315'번을 입력하고 차트를 로딩한다.</li>\n<li>접속한 Siege 터미널에서 주문서비스로 부하를 발생시킨다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it pod/siege -n shop -- /bin/bash\nsiege -c30 -t80S -v http://order:8080</code></pre>\n<ul>\n<li>부하량에 따른 서비스 차트의 실시간 Gauge를 확인한다.</li>\n<li>아래와 같이 Network IO, CPU, Memory 사용량이 실시간 증가한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183344194-8f4e571b-3640-4c54-8896-e7b7c6b3a7ca.png\" alt=\"image\"></li>\n</ul>\n<h4 id=\"dashboard-customizing\"><a href=\"#dashboard-customizing\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dashboard Customizing</h4>\n<ul>\n<li>'315' id의 쿠버네티스 모니터링 차트에서 주문서비스 요청율(rps)을 상단에 추가해 본다.</li>\n<li>화면 상단의 'Add panel'을 클릭하여 empty panel을 추가한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183352278-f8e02a99-cb2d-4fa3-9e20-5a1b55a147e0.png\" alt=\"image\"></li>\n<li>Metics 입력란에 아래 PromQL을 입력한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">rate(istio_requests_total{app=&quot;order&quot;,destination_service=&quot;order.shop.svc.cluster.local&quot;}[5m])</code></pre>\n<ul>\n<li>왼쪽 Panel title에 '주문서비스 요청율'을 입력한다.</li>\n<li>apply를 눌러 적용한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183353312-531a693a-ac33-43e4-b75c-009ddef30153.png\" alt=\"image\"></li>\n<li>위젯의 길이를 늘여 전체 크기로 맞춘다.- </li>\n<li>상단의 저장 아이콘을 눌러 차트를 저장한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183370320-ebe428ed-413e-48ba-a809-d796b2336a74.png\" alt=\"image\"></li>\n</ul>\n<h4 id=\"dashboard-참조-url\"><a href=\"#dashboard-%EC%B0%B8%EC%A1%B0-url\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Dashboard 참조 URL</h4>\n<ul>\n<li>아래 링크를 통해 Grafana가 제공하는 더 많은 대쉬보드를 검색하여 참고할 수 있다.</li>\n<li><a href=\"https://grafana.com/grafana/dashboards/\" target=\"_blank\" rel=\"noopener noreferrer\">Grafana Dashboard 참조</a></li>\n</ul>\n<h3 id=\"이상감지--alerting\"><a href=\"#%EC%9D%B4%EC%83%81%EA%B0%90%EC%A7%80--alerting\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이상감지 &#x26; Alerting</h3>\n<h4 id=\"alert-설정\"><a href=\"#alert-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Alert 설정</h4>\n<ul>\n<li>수정한 '쿠버네티스 클러스터 차트(id: 315)'의 '주문서비스 요청율'' Graph를 편집한다.</li>\n<li>하단의 3번째 탭인 Alert을 클릭하여 'Create Alert' 버튼을 클릭해 Alert Rule을 설정한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183359486-c6b6d1e0-7411-45d8-92f6-7b4b33d02f40.png\" alt=\"image\"></li>\n<li>임계치(Threshold)를 '5'로 설정한다.</li>\n<li>Alert 이름은 자동으로 '주문서비스 요청율 alert'로 설정된다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183370815-d900326b-8da0-4503-9c23-d92903f73181.png\" alt=\"image\"></li>\n<li>수정내용을 적용(apply)하고, Dashboard를 저장하면 '♥주문서비스 요청율'로 ♥가 타이틀앞에 붙는다.</li>\n<li>이는 해당 차트에 Alert가 적용되었음을 의미한다. (녹색 : OK, 적색 : alert 발생)</li>\n</ul>\n<h5 id=\"grafana-alert-서비스\"><a href=\"#grafana-alert-%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Grafana Alert 서비스</h5>\n<ul>\n<li>Grafana 왼쪽 메뉴에서 Alert 아이콘을 클릭한다.</li>\n<li>설정된 주문서비스 요청율 Alert가 보여진다.</li>\n<li>Siege로 부하를 주어 초당 요청율을 증가시켜 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it pod/siege -n shop -- /bin/bash\nsiege -c20 -t40S -v http://order:8080</code></pre>\n<ul>\n<li>다시, Alert 목록을 조회하면 'PENDING'으로 임계치 초과에 따른 Alert이 발생했음이 보여진다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183362467-2fecbce0-3e88-4062-aeb9-26ae700f075b.png\" alt=\"image\"></li>\n</ul>\n<h4 id=\"notification-설정\"><a href=\"#notification-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Notification 설정</h4>\n<ul>\n<li>Notification channels에서 New channel을 클릭해 Alert 수신방식을 지정한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/183362971-d77df778-8ec6-40fc-9942-7a3b337ea398.png\" alt=\"image\"></li>\n<li>SMTP로 Alerting 하기위해 grafana.ini를 수정해야 한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl edit cm grafana -n istio-system</code></pre>\n<ul>\n<li>default 설정</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">  grafana.ini: |\n    [analytics]\n    check_for_updates = true\n    [grafana_net]\n    url = https://grafana.net\n    [log]\n    mode = console\n    [paths]\n    data = /var/lib/grafana/\n    logs = /var/log/grafana\n    plugins = /var/lib/grafana/plugins\n    provisioning = /etc/grafana/provisioning</code></pre>\n<ul>\n<li>아래 내용을 추가한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    [smtp]\n    enabled = true\n    host = smtp.gmail.com:587\n    user = gmail-user@gmail.com\n    password = ************\n    skip_verify = true</code></pre>\n<ul>\n<li>편집 후, Grafana Pod를 재시작한다.</li>\n<li>SMTP 설정은 메일서버의 2-Factor인증에 따라 제대로 working하지 않을 수 있음</li>\n</ul>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" MSA 모니터링 w/ Istio addon Grafana","anchor":"#service-mesh-msa-모니터링-w-istio-addon-grafana"},{"depth":1,"value":" MSA 모니터링 w/ Istio addon Grafana","anchor":"#service-mesh-msa-모니터링-w-istio-addon-grafana-1"},{"depth":3,"value":"Prometheus/Grafana기반 K8s 통합 모니터링","anchor":"#prometheusgrafana기반-k8s-통합-모니터링"},{"depth":4,"value":"설치하기","anchor":"#설치하기"},{"depth":4,"value":"모니터링 대상 마이크로서비스 배포","anchor":"#모니터링-대상-마이크로서비스-배포"},{"depth":3,"value":"PromQL Test in Expression Browser","anchor":"#promql-test-in-expression-browser"},{"depth":3,"value":"서비스 모니터링 in Grafana","anchor":"#서비스-모니터링-in-grafana"},{"depth":4,"value":"Built-in Dashboard 뷰","anchor":"#built-in-dashboard-뷰"},{"depth":4,"value":"Grafana providing Dashboard 뷰","anchor":"#grafana-providing-dashboard-뷰"},{"depth":4,"value":"Dashboard Customizing","anchor":"#dashboard-customizing"},{"depth":4,"value":"Dashboard 참조 URL","anchor":"#dashboard-참조-url"},{"depth":3,"value":"이상감지 & Alerting","anchor":"#이상감지--alerting"},{"depth":4,"value":"Alert 설정","anchor":"#alert-설정"},{"depth":5,"value":"Grafana Alert 서비스","anchor":"#grafana-alert-서비스"},{"depth":4,"value":"Notification 설정","anchor":"#notification-설정"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-service/","title":"12번가 마이크로서비스 라우터(Service) 적용"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Pub/Sub 방식의 연동 (New)"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 (New)"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation (New)"}},{"node":{"path":"/development/oauth2/","title":"Req/Res 방식의 MSA 연동 (New)"}},{"node":{"path":"/development/monolith2misvc/","title":"Kafka Retry & Dead Letter Queue (New)"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/gateway/","title":"단위 마이크로 서비스의 실행 (New)"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Kafka 기본 명령어 (New)"}},{"node":{"path":"/development/kafka-scaling/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/cna-pubsub/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/kafka-base/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/cna-pubsub2/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/front-end/","title":"Kafka Scaling (New)"}},{"node":{"path":"/development/circuitbreaker/","title":"API Gateway"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/development/advanced-connect/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}}]}},"context":{}}