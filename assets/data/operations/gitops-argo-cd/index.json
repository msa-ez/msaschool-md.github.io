{"hash":"639846ab77f2d650b364be948c0c3d68be620b02","data":{"markdownPage":{"id":"dc7eb5d3c1f46bc20c55f3fcacf78559","title":"[GitOps] Argo CD 를 통한 카나리 배포","description":"","path":"/operations/gitops-argo-cd/","timeToRead":1,"content":"<h1 id=\"gitops-argo-cd-를-통한-카나리-배포\"><a href=\"#gitops-argo-cd-%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%B9%B4%EB%82%98%EB%A6%AC-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[GitOps] Argo CD 를 통한 카나리 배포</h1>\n<h1 id=\"argo-cd-를-통한-배포\"><a href=\"#argo-cd-%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Argo CD 를 통한 배포</h1>\n<p>Argo CD 의 홈페이지를 방문한다:\n<a href=\"https://argo-cd.readthedocs.io/en/stable/\" target=\"_blank\" rel=\"noopener noreferrer\">https://argo-cd.readthedocs.io/en/stable/</a></p>\n<p>Getting Started 메뉴를 접속하여, argo cd 를 설치한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create namespace argocd\nkubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml</code></pre>\n<p>Argo CD UI 를 접속하기 위하여 LoadBalancer 로 전환한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl patch svc argocd-server -n argocd -p &#39;{&quot;spec&quot;: {&quot;type&quot;: &quot;LoadBalancer&quot;}}&#39;</code></pre>\n<p>Argo CD UI 의 External IP 주소를 획득한다</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get svc argocd-server -n argocd</code></pre>\n<p>접속한다.</p>\n<p>Argo CD 는 기본 https 로 UI 서비스가 열리므로, 인증서가 없이 서비스를 열었으므로, 이를 그냥 접속하기 위해서 해당 페이지에서 허공에 대고 \"thisisunsafe\" 를 입력하면 다음과 같은 페이지로 넘어간다 ㅡㅡ;</p>\n<p><img src=\"https://i1.wp.com/DeployHappiness.com/wp-content/uploads/2019/02/01.png?fit=442%2C230&#x26;ssl=1\"></p>\n<p>접속 user id 는 admin 이고 password 는 다음과 같이 Secret 에서 얻어내어야 한다 (무슨 CD 툴이 왠 보안에 엄청 신경을):</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=&quot;{.data.password}&quot; | base64 -d</code></pre>\n<p>왼쪽 메뉴에서 New App 을 클릭하여 Git 주소가 포함된 Application 정보를 등록한다:</p>\n<p><img src=\"https://argo-cd.readthedocs.io/en/stable/assets/new-app.png\"></p>\n<p>Guestbook Application 을 등록한다:</p>\n<p><img src=\"https://argo-cd.readthedocs.io/en/stable/assets/app-ui-information.png\"></p>\n<p><a href=\"https://github.com/argoproj/argocd-example-apps.git\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/argoproj/argocd-example-apps.git</a> 를 접속한 후, 이를 Fork 한다.</p>\n<p>내 계정으로 복제된 guest book application 의 git 주소를 argo 에 등록한다.</p>\n<p><img src=\"https://argo-cd.readthedocs.io/en/stable/assets/connect-repo.png\"></p>\n<p>배포될 타겟 클러스터를 지정한다</p>\n<p><img src=\"https://argo-cd.readthedocs.io/en/stable/assets/destination.png\"></p>\n<blockquote>\n<p>kubernetes.default.svc 가 내가 포함된 서비스의 기본 접속 주소이다.\nnamespace 를 \"guestbook\" 으로 줘본다.</p>\n</blockquote>\n<p>git 에 변화를 주고, 이를 동기화 시켜서 반영이 되는지 확인한다:</p>\n<p><img src=\"https://argo-cd.readthedocs.io/en/stable/assets/guestbook-app.png\"></p>\n<p><img src=\"https://argo-cd.readthedocs.io/en/stable/assets/guestbook-tree.png\"></p>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" Argo CD 를 통한 카나리 배포","anchor":"#gitops-argo-cd-를-통한-카나리-배포"},{"depth":1,"value":"Argo CD 를 통한 배포","anchor":"#argo-cd-를-통한-배포"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}