{"hash":"06a886723e5e9e504c2e092ae07219a81ecc6278","data":{"markdownPage":{"id":"d16a1058aae262f29067a4667d1bc595","title":"AWS Cloud Setup(EKS, ECR 설정)","description":"","path":"/operations/ops-aws-setting/","timeToRead":5,"content":"<h1 id=\"aws-cloud-setupeks-ecr-설정\"><a href=\"#aws-cloud-setupeks-ecr-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AWS Cloud Setup(EKS, ECR 설정)</h1>\n<h1 id=\"aws-cloud-setupeks-ecr-설정-1\"><a href=\"#aws-cloud-setupeks-ecr-%EC%84%A4%EC%A0%95-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AWS Cloud Setup(EKS, ECR 설정)</h1>\n<h3 id=\"아마존-iam-체계\"><a href=\"#%EC%95%84%EB%A7%88%EC%A1%B4-iam-%EC%B2%B4%EA%B3%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>아마존 IAM 체계</h3>\n<p>AWS IAM 체계는 다음의 AWS ID 와 사용자 이름, 사용자 액세스 키, 스크릿 키 같은 보안 자격증명 정보로 구성된다.\n1. AWS ID:  숫자로 채번된 사용자의 ID\n1. AWS Access Key ID:  AWS CLI 를 사용하기 위해서 제공되는 Access key\n1. AWS Secret Acess Key: 위의 Acess Key 에 대한 패스워드격</p>\n<p><del>왜 이렇게 가능한 복잡하게 만들어놨는지는 제프베조스에게 물어볼</del></p>\n<h3 id=\"아마존-콘솔에서-키들을-얻는-방법\"><a href=\"#%EC%95%84%EB%A7%88%EC%A1%B4-%EC%BD%98%EC%86%94%EC%97%90%EC%84%9C-%ED%82%A4%EB%93%A4%EC%9D%84-%EC%96%BB%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>아마존 콘솔에서 키들을 얻는 방법</h3>\n<ol>\n<li>콘솔접속 후 > </li>\n<li>상단의 서비스 검색창에서 “IAM” 으로 검색 > </li>\n<li>IAM (AWS 리소스에 대한 액세스 관리) 메뉴 진입 ></li>\n<li>\"사용자: XX\" 클릭 ></li>\n<li>사용자 목록에서 내 user id 를 선택 > </li>\n<li>탭에서 “보안 자격 증명”을 선택 > </li>\n<li>액세스 키 만들기 > </li>\n<li>csv 파일 다운로드 </li>\n</ol>\n<h3 id=\"aws-콘솔-로그인\"><a href=\"#aws-%EC%BD%98%EC%86%94-%EB%A1%9C%EA%B7%B8%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AWS 콘솔 로그인</h3>\n<ul>\n<li>로그인 URL: 강의중에 알려드릴게요</li>\n<li>사용자 이름: user01 ~ 22</li>\n<li>패스워드:  강의중에 알려드릴게요 ^^</li>\n</ul>\n<h3 id=\"aws-cli-환경-설정\"><a href=\"#aws-cli-%ED%99%98%EA%B2%BD-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>AWS CLI 환경 설정</h3>\n<pre class=\"language-text\"><code class=\"language-text\">aws configure\n\nAWS Access Key ID: [AWS 액세스 키]\nAWS Secret Access Key: [시크릿 키]\nDefault region name : [본인의 리젼]\nDefault output format : json</code></pre>\n<blockquote>\n<p>리젼은 </p>\n<p>(도쿄)ap-northeast-1 --> User 1 ~ 5\n(오사카)ap-northeast-3 - user 6 ~ 10\n(서울)ap-northeast-2 - user 11 ~ 15\n(싱가포르)ap-southeast-1 - user 16 ~ 20\n(시드니)ap-southeast-2 - user 21 ~ 25\n(아일랜드)eu-west-1 - user 26 ~ 30</p>\n</blockquote>\n<h3 id=\"iam-설정-확인\"><a href=\"#iam-%EC%84%A4%EC%A0%95-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>IAM 설정 확인</h3>\n<pre class=\"language-text\"><code class=\"language-text\">aws iam list-account-aliases\n# 정상설정 시, Root계정의 별칭이 출력된다.</code></pre>\n<h3 id=\"클러스터-생성\"><a href=\"#%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>클러스터 생성</h3>\n<pre class=\"language-text\"><code class=\"language-text\">eksctl create cluster --name [mycluster-userid] --version 1.21 --spot --managed --nodegroup-name standard-workers --node-type t3.medium --nodes 3 --nodes-min 1 --nodes-max 3</code></pre>\n<p>설정된 리전에 t3.medium 타입(2CPU, 4GB)의 EC2 3개의 노드 풀을 가진 클러스터가  생성된다.\n(약 15분이 소요되기 때문에 그 사이에 다음과정을 진행하셔도 됩니다)</p>\n<p>AWS 콘솔에 로그인하여 EKS 서비스가 잘 생성되었는지 확인한다.</p>\n<blockquote>\n<p>클러스터 제거할땐:<br>\neksctl delete cluster [mycluster]</p>\n</blockquote>\n<h3 id=\"클러스터에-접속하기-위한-설정-다운로드\"><a href=\"#%ED%81%B4%EB%9F%AC%EC%8A%A4%ED%84%B0%EC%97%90-%EC%A0%91%EC%86%8D%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%84%A4%EC%A0%95-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>클러스터에 접속하기 위한 설정 다운로드</h3>\n<pre class=\"language-text\"><code class=\"language-text\">aws eks update-kubeconfig --name [Cluster Name]</code></pre>\n<blockquote>\n<p>cluster name 을 잊었다면, eksctl get clusters 하면 클러스터명과 리전명이 나타납니다.</p>\n</blockquote>\n<p>접속이 정상적으로 되었다면:</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get nodes</code></pre>\n<p>의 결과, 생성된 3개의 워크노드가 출력되면  됩니다.</p>\n<h3 id=\"ecr-사용하기\"><a href=\"#ecr-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>ECR 사용하기</h3>\n<p>ECR 에 docker 명령을 로그인시키기 위해서 먼저 docker password 를 얻어온다:  </p>\n<pre class=\"language-text\"><code class=\"language-text\">aws --region &quot;리전명&quot; ecr get-login-password \n\n긴 암호화된 패스워드 문자열이 출력됨</code></pre>\n<p>위의 문자열을 docker login 명령과 함께 -p 옵션으로 붙여넣기 한다. 이때 registry 서버 주소도 같이 넘겨준다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">##ECR 이용시\n1) docker login --username AWS -p 아주긴도커패스워드 [AWS유저아이디-숫자로만된].dkr.ecr.[리전명].amazonaws.com\n\nex) docker login --username AWS -p 아주긴도커패스워드 979050235289.dkr.ecr.ap-northeast-2.amazonaws.com\n\n## Docker Hub 이용\ndocker login\n- dockerhub ID\n- dockerhub PW</code></pre>\n<p>잘 로그인되었다면, 앞서 예제에서 다루었던 order 마이크로 서비스를 push 해보자</p>\n<blockquote>\n<p>처음으로 ECR에 이미지를 올리는 경우 다음과 같이 해당 산출물의 Repo 를 먼저 만든 후 진행합니다:</p>\n</blockquote>\n<ol>\n<li>AWS console 접속 > </li>\n<li>서비스 검색 “ECR”로 검색 > </li>\n<li>왼쪽메뉴의 “Repositories” 를 선택 > </li>\n<li>리포지토리 생성 클릭 </li>\n<li>Repository 명의 끝 부분에 “order” 입력</li>\n<li>리포지토리 생성</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">## ECR 이용하는 경우\ngit clone https://github.com/event-storming/monolith\n\ncd monolith\nmvn package -B\ndocker build -t [AWS유저아이디-숫자로만된].dkr.ecr.ap-northeast-2.amazonaws.com/order:v1 .\ndocker push [AWS유저아이디-숫자로만된].dkr.ecr.ap-northeast-2.amazonaws.com/order:v1\n\n##Docker Hub를 이용하는 경우 \ngit clone https://github.com/event-storming/monolith\n\ncd monolith\nmvn package -B\ndocker build -t [DockerHub ID]/monolith:v1 .\ndocker push [DockerHub ID]/monolith:v1</code></pre>\n<p>push 가 잘되었다면 ECR 의 웹UI 에 이미지가 표시될 것이며,  다음명령으로 Deploy 가 잘 되는지 확인한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">##ECR을 이용하는 경우\nkubectl create deploy order --image=[AWS유저아이디-숫자로만된].dkr.ecr.ap-northeast-2.amazonaws.com/order:v1\n\n##Docker Hub를 이용하는 경우\nkubectl create deploy order --image=[Docker HubID]/monolith:v1</code></pre>\n<p>다음과 같이 po 를 확인한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&gt; kubectl get po\n\nNAME                     READY   STATUS    RESTARTS   AGE\norder-7d66c76dcd-j4nbq   1/1     Running   0          18s</code></pre>\n<p>다음과 같이 log 를 확인한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&gt; kubectl logs -f order-7d66c76dcd-j4nbq\n  .   ____          _            __ _ _\n /\\\\ / ___&#39;_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | &#39;_ | &#39;_| | &#39;_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  &#39;  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::        (v2.1.1.RELEASE)\n \n Hibernate: \n    insert \n    into\n        ProductOption\n        (id, description, name, optionName, PRODUCT_ID) \n    values\n        (null, ?, ?, ?, ?)\nHibernate: \n    insert \n    into\n        ProductOption\n        (id, description, name, optionName, PRODUCT_ID) \n    values\n        (null, ?, ?, ?, ?)\n ...</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"AWS Cloud Setup(EKS, ECR 설정)","anchor":"#aws-cloud-setupeks-ecr-설정"},{"depth":1,"value":"AWS Cloud Setup(EKS, ECR 설정)","anchor":"#aws-cloud-setupeks-ecr-설정-1"},{"depth":3,"value":"아마존 IAM 체계","anchor":"#아마존-iam-체계"},{"depth":3,"value":"아마존 콘솔에서 키들을 얻는 방법","anchor":"#아마존-콘솔에서-키들을-얻는-방법"},{"depth":3,"value":"AWS 콘솔 로그인","anchor":"#aws-콘솔-로그인"},{"depth":3,"value":"AWS CLI 환경 설정","anchor":"#aws-cli-환경-설정"},{"depth":3,"value":"IAM 설정 확인","anchor":"#iam-설정-확인"},{"depth":3,"value":"클러스터 생성","anchor":"#클러스터-생성"},{"depth":3,"value":"클러스터에 접속하기 위한 설정 다운로드","anchor":"#클러스터에-접속하기-위한-설정-다운로드"},{"depth":3,"value":"ECR 사용하기","anchor":"#ecr-사용하기"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}}]}},"context":{}}