{"hash":"82edfc9c503203a4b89aaf7ee02c1b0930a87be2","data":{"markdownPage":{"id":"ba9dfcf691a0ac15f3a86c070619b254","title":"쿠버네티스 내부구조 분석","description":"","path":"/operations/ops-anatomy-kubernetes/","timeToRead":5,"content":"<h1 id=\"쿠버네티스-내부구조-분석\"><a href=\"#%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%EB%82%B4%EB%B6%80%EA%B5%AC%EC%A1%B0-%EB%B6%84%EC%84%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>쿠버네티스 내부구조 분석</h1>\n<h3 id=\"kubernetes-installation\"><a href=\"#kubernetes-installation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kubernetes Installation</h3>\n<h4 id=\"preparing-a-vm--connect\"><a href=\"#preparing-a-vm--connect\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Preparing a VM &#x26; Connect</h4>\n<ol>\n<li>Prepare any Cloud VM(EC2, Agent, Compute Engine)</li>\n</ol>\n<ul>\n<li>아마존 콘솔 접속</li>\n<li>서비스 검색 > \"EC2\" 선택</li>\n<li>실행중인스턴스 > \"인스턴스 시작\"</li>\n<li>Ubuntu Server 20.04 LTS 선택</li>\n<li>t2.micro 선택 </li>\n<li>검토 및 시작</li>\n<li>새 키 페어 생성 \"ubuntu\" > 다운로드</li>\n<li>인스턴스 시작</li>\n</ul>\n<blockquote>\n<p>보안 그룹명이 충돌나는 경우 임의의 보안그룹 명으로 변경합니다.</p>\n</blockquote>\n<ul>\n<li>인스턴스 목록 > 생성한 인스턴스 선택 > 연결</li>\n<li>받은 pem 파일을 개발 환경에 업로드 :   File Menu > UploadFiles...</li>\n<li>chmod 400 ubuntu.pem</li>\n</ul>\n<ol>\n<li>\n<p>Connect to VM (here, aws EC2 Linux-AMI)</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ssh</span> -i ./k8s.pem ubuntu@ec2-3-35-209-101.ap-northeast-2.compute.amazonaws.com</code></pre>\n</li>\n<li>\n<p>Set root passwd and switching User to root</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">passwd</span> root\n<span class=\"token function\">su</span> -</code></pre>\n</li>\n<li>\n<p>Update and upgrade Ubuntu:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">apt</span> update\n<span class=\"token function\">apt</span> upgrade -y</code></pre>\n</li>\n</ol>\n<h3 id=\"install-k8s-binaries\"><a href=\"#install-k8s-binaries\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Install K8s Binaries</h3>\n<p>The next steps will prepare CRI and Software for kube setup.</p>\n<ol>\n<li>\n<p>도커엔진을 설치:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">apt</span> <span class=\"token function\">install</span> docker.io -y</code></pre>\n</li>\n<li>\n<p>K8s 의 바이너리 파일을 다운 받는다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://storage.googleapis.com/kubernetes-release/release/v1.9.11/kubernetes-server-linux-amd64.tar.gz\n<span class=\"token function\">tar</span> -xzf kubernetes-server-linux-amd64.tar.gz</code></pre>\n</li>\n<li>\n<p>Install the K8s binaries:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> kubernetes/server/bin/\n<span class=\"token function\">mv</span> kubectl kubelet kube-apiserver kube-controller-manager kube-scheduler kube-proxy /usr/bin/\n<span class=\"token builtin class-name\">cd</span></code></pre>\n</li>\n<li>\n<p><code>kubectl</code> 이 실행되는지 확인한다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl</code></pre>\n</li>\n<li>\n<p>압축파일이 더 이상 필요없으니 삭제:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> -rf kubernetes kubernetes-server-linux-amd64.tar.gz</code></pre>\n</li>\n</ol>\n<hr>\n<h2 id=\"creating-the-kube\"><a href=\"#creating-the-kube\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Creating the Kube</h2>\n<h3 id=\"set-up-kubelet\"><a href=\"#set-up-kubelet\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Set up kubelet</h3>\n<p>다음단계는 Kubelet 의 동작을 이해한다</p>\n<ol>\n<li>\n<p>큐블릿을 위한 디렉토리를 만든다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mkdir</span> -p /etc/kubernetes/manifests</code></pre>\n</li>\n<li>\n<p>큐블릿을 백그라운드(데몬)로 실행한다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubelet --pod-manifest-path /etc/kubernetes/manifests <span class=\"token operator\">&amp;></span> /etc/kubernetes/kubelet.log <span class=\"token operator\">&amp;</span></code></pre>\n</li>\n<li>\n<p>큐블릿의 상태와 기본 로그를 확인한다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> -au <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> kubelet\n<span class=\"token function\">head</span> /etc/kubernetes/kubelet.log</code></pre>\n</li>\n<li>\n<p>큐블릿의 manifest directory 에 yaml 을 위치하면, 큐블릿이 해당 yaml 을 도커엔진을 통해 컨테이너를 생성해주기 때문에 그를 테스트할 yaml 을 하나 만든다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span>EOF <span class=\"token operator\">></span> /etc/kubernetes/manifests/kubelet-test.yaml</code></pre>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> kubelet<span class=\"token punctuation\">-</span>test\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> alpine\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> alpine\n    <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"/bin/sh\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"-c\"</span><span class=\"token punctuation\">]</span>\n    <span class=\"token key atrule\">args</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"while true; do echo SuPeRgIaNt; sleep 15; done\"</span><span class=\"token punctuation\">]</span></code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\">EOF</code></pre>\n</li>\n<li>\n<p>파일이 생성된 직후에 도커에 해당 pod 가 생성되었는지 확인한다.:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span></code></pre>\n</li>\n<li>\n<p>컨테이너의 로그를 확인한다</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> logs <span class=\"token punctuation\">{</span>CONTAINER ID<span class=\"token punctuation\">}</span></code></pre>\n</li>\n</ol>\n<h3 id=\"set-up-etcd\"><a href=\"#set-up-etcd\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Set up etcd</h3>\n<p>이번단계는 etcd 에 쿠버네티스의 상태를 보존하는 것을 확인한다.</p>\n<ol>\n<li>\n<p>etcd 와 etcdctl를 다운받고 압축해제 한다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://github.com/etcd-io/etcd/releases/download/v3.2.26/etcd-v3.2.26-linux-amd64.tar.gz\n<span class=\"token function\">tar</span> -xzf etcd-v3.2.26-linux-amd64.tar.gz</code></pre>\n</li>\n<li>\n<p>etcd 와 etcdctl 바이너리를 설치한다.</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">mv</span> etcd-v3.2.26-linux-amd64/etcd /usr/bin/etcd\n<span class=\"token function\">mv</span> etcd-v3.2.26-linux-amd64/etcdctl /usr/bin/etcdctl</code></pre>\n</li>\n<li>\n<p>불필요한 리소스를 삭제한다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">rm</span> -rf etcd-v3.2.26-linux-amd64 etcd-v3.2.26-linux-amd64.tar.gz</code></pre>\n</li>\n<li>\n<p>etcd를 실행한다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">etcd --listen-client-urls http://0.0.0.0:2379 --advertise-client-urls http://localhost:2379 <span class=\"token operator\">&amp;></span> /etc/kubernetes/etcd.log <span class=\"token operator\">&amp;</span></code></pre>\n</li>\n<li>\n<p>etcd 가 건강하게 실행되고 있는지 다음과 같이 확인된다::</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">etcdctl cluster-health</code></pre>\n</li>\n<li>\n<p>쿠버네티스 내에 디플로이된 모든 리소스들을 한번 확인해본다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl get all --all-namespaces</code></pre>\n</li>\n</ol>\n<h3 id=\"set-up-kube-apiserver\"><a href=\"#set-up-kube-apiserver\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Set up kube-apiserver</h3>\n<p>이번 단계는 apiserver 가 어떻게 실행되는지 이해합니다.</p>\n<ol>\n<li>\n<p>kube-apiserver 를 실행한다</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kube-apiserver --etcd-servers<span class=\"token operator\">=</span>http://localhost:2379 --service-cluster-ip-range<span class=\"token operator\">=</span><span class=\"token number\">10.0</span>.0.0/16 --bind-address<span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0 --insecure-bind-address<span class=\"token operator\">=</span><span class=\"token number\">0.0</span>.0.0 <span class=\"token operator\">&amp;></span> /etc/kubernetes/apiserver.log <span class=\"token operator\">&amp;</span></code></pre>\n</li>\n<li>\n<p>실행상태와 시작로그를 확인한다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> -au <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> apiserver\n<span class=\"token function\">head</span> /etc/kubernetes/apiserver.log</code></pre>\n</li>\n<li>\n<p>API 를 확인해보고 반응을 확인한다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> http://localhost:8080/api/v1/nodes</code></pre>\n</li>\n</ol>\n<h2 id=\"kubeconfig-file-을-설정하여-kubectl-설정\"><a href=\"#kubeconfig-file-%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%98%EC%97%AC-kubectl-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>kubeconfig File 을 설정하여 kubectl 설정</h2>\n<p>이번 과정은 kubectl 을 제대로 설정해본다.</p>\n<ol>\n<li>\n<p>kubectl 이 API server 를 제대로 바라보고 있는지 확인한다</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl cluster-info</code></pre>\n</li>\n<li>\n<p>kubeconfig file에 API server address 가 잘 설정되었는지 확인한다</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl config set-cluster kube-from-scratch --server<span class=\"token operator\">=</span>http://localhost:8080\nkubectl config view</code></pre>\n</li>\n<li>\n<p>우리가 접속할 apiserver 로 kubectl 의 context 를 지정한다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl config set-context kube-from-scratch --cluster<span class=\"token operator\">=</span>kube-from-scratch\nkubectl config view</code></pre>\n</li>\n<li>\n<p>Use the context created earlier for kubectl:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl config use-context kube-from-scratch\nkubectl config view</code></pre>\n</li>\n<li>\n<p>check that resources can now be seen on the cluster:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl get all --all-namespaces\nkubectl get <span class=\"token function\">node</span></code></pre>\n</li>\n</ol>\n<h3 id=\"set-up-the-new-config-for-kubelet\"><a href=\"#set-up-the-new-config-for-kubelet\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Set up the New Config for kubelet</h3>\n<p>The next steps will take the configuration created and use it to configure kubelet.</p>\n<ol>\n<li>\n<p>Restart kubelet with a new flag pointing it to the apiserver (this step may fail once or twice, try again):</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">pkill</span> -f kubelet\nkubelet --register-node --kubeconfig<span class=\"token operator\">=</span><span class=\"token string\">\".kube/config\"</span> <span class=\"token operator\">&amp;></span> /etc/kubernetes/kubelet.log <span class=\"token operator\">&amp;</span></code></pre>\n</li>\n<li>\n<p>Check its status and initial logs:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> -au <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> kubelet\n<span class=\"token function\">head</span> /etc/kubernetes/kubelet.log</code></pre>\n</li>\n<li>\n<p>Check to see that kubelet has registered as a node:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl get <span class=\"token function\">node</span></code></pre>\n</li>\n<li>\n<p>Check to see the old Pod is not coming up:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">docker</span> <span class=\"token function\">ps</span></code></pre>\n</li>\n<li>\n<p>Check that the Pod manifest is still present:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ls</span> /etc/kubernetes/manifests</code></pre>\n</li>\n<li>\n<p>이제 kubelet 으로 pod 를 생성해봅니다. 우리가 설치한 control plane 들이 잘 동작하는지 확인하게 됩니다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span>EOF <span class=\"token operator\">></span> ./kube-test.yaml</code></pre>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Pod\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> kube<span class=\"token punctuation\">-</span>test\n<span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> kube<span class=\"token punctuation\">-</span>test\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx\n    <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span>  http\n    <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n    <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\">EOF\nkubectl create -f kube-test.yaml</code></pre>\n</li>\n<li>\n<p>Check the Pod's status:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl get po</code></pre>\n</li>\n</ol>\n<h3 id=\"set-up-kube-scheduler\"><a href=\"#set-up-kube-scheduler\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Set up kube-scheduler</h3>\n<p>다음 단계는 scheduler 를 통해서 pod 가 생성될 수 있도록 설정합니다</p>\n<ol>\n<li>\n<p>Scheduler를 시작합니다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kube-scheduler --master<span class=\"token operator\">=</span>http://localhost:8080/ <span class=\"token operator\">&amp;></span> /etc/kubernetes/scheduler.log <span class=\"token operator\">&amp;</span></code></pre>\n</li>\n<li>\n<p>스케쥴러의 상태와 시작로그를 확인합니다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> -au <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> scheduler\n<span class=\"token function\">head</span> /etc/kubernetes/scheduler.log</code></pre>\n</li>\n<li>\n<p>Check to see if the Pod was scheduled:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl get po</code></pre>\n</li>\n<li>\n<p>Delete the Pod:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl delete po --all</code></pre>\n</li>\n</ol>\n<h3 id=\"set-up-kube-controller-manager\"><a href=\"#set-up-kube-controller-manager\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Set up kube-controller-manager</h3>\n<p>다음단계는 ReplicaSet 등을 관리해주는 다양한 쿠버네티스 객체의 행위를 지원하는 controller 매니저를 설치합니다.</p>\n<ol>\n<li>\n<p>레플리카 3개가 설정된 Deployment를 준비한다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span>EOF <span class=\"token operator\">></span> ./replica-test.yaml</code></pre>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> apps/v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Deployment\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> replica<span class=\"token punctuation\">-</span>test\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">replicas</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3</span>\n<span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">matchLabels</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> replica<span class=\"token punctuation\">-</span>test\n<span class=\"token key atrule\">template</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> replica<span class=\"token punctuation\">-</span>test\n    <span class=\"token key atrule\">labels</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> replica<span class=\"token punctuation\">-</span>test\n    <span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">containers</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> nginx\n        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> nginx\n        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span>  http\n        <span class=\"token key atrule\">containerPort</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n        <span class=\"token key atrule\">protocol</span><span class=\"token punctuation\">:</span> TCP</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\">EOF\nkubectl create -f replica-test.yaml</code></pre>\n</li>\n<li>\n<p>Check the Deployment's status:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl get deploy</code></pre>\n</li>\n<li>\n<p><code>Pending</code> 상태임을 확인한다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl get po</code></pre>\n</li>\n<li>\n<p>controller-manager를 시작한다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kube-controller-manager --master<span class=\"token operator\">=</span>http://localhost:8080 <span class=\"token operator\">&amp;></span> /etc/kubernetes/controller-manager.log <span class=\"token operator\">&amp;</span></code></pre>\n</li>\n<li>\n<p>Check its status and initial logs:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> -au <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> controller\n<span class=\"token function\">head</span> /etc/kubernetes/controller-manager.log</code></pre>\n</li>\n<li>\n<p>Check the status of the Deployment:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl get deploy</code></pre>\n</li>\n<li>\n<p>이제 3개의 Replica 가 생성되어 각 pod 의 상태가 <code>AVAILABLE</code> 로 변경된 것을 확인한다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl rollout resume deploy/replica-test\nkubectl rollout status deploy/replica-test</code></pre>\n</li>\n<li>\n<p>Check the new Pods:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl get po</code></pre>\n</li>\n</ol>\n<h3 id=\"set-up-kube-proxy\"><a href=\"#set-up-kube-proxy\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Set up kube-proxy</h3>\n<p>이제 외부 트래픽을 Pod 로 전송하는 kube-proxy 를 설치하고 이들이 어떻게 동작하는지 이해한다:</p>\n<ol>\n<li>\n<p>앞서의 <code>replica-test</code> Deployment에 대한 service 를 만들어준다:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span>EOF <span class=\"token operator\">></span> ./service-test.yaml</code></pre>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">apiVersion</span><span class=\"token punctuation\">:</span> v1\n<span class=\"token key atrule\">kind</span><span class=\"token punctuation\">:</span> Service\n<span class=\"token key atrule\">metadata</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> replica<span class=\"token punctuation\">-</span>test\n<span class=\"token key atrule\">spec</span><span class=\"token punctuation\">:</span>\n<span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> ClusterIP\n<span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> http\n    <span class=\"token key atrule\">port</span><span class=\"token punctuation\">:</span> <span class=\"token number\">80</span>\n<span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">app</span><span class=\"token punctuation\">:</span> replica<span class=\"token punctuation\">-</span>test</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\">    EOF\n    kubectl create -f service-test.yaml</code></pre>\n</li>\n<li>\n<p>Curl the service to see if any Pod is contacted:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl get svc\n<span class=\"token function\">curl</span> <span class=\"token punctuation\">{</span>CLUSTER IP<span class=\"token punctuation\">}</span>:80</code></pre>\n</li>\n<li>\n<p>Start kube-proxy:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kube-proxy --master<span class=\"token operator\">=</span>http://localhost:8080/ <span class=\"token operator\">&amp;></span> /etc/kubernetes/proxy.log <span class=\"token operator\">&amp;</span></code></pre>\n</li>\n<li>\n<p>Check its status and initial logs:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">ps</span> -au <span class=\"token operator\">|</span> <span class=\"token function\">grep</span> proxy\n<span class=\"token function\">head</span> /etc/kubernetes/proxy.log</code></pre>\n</li>\n<li>\n<p>Curl the Service again to see if any Pod is contacted:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl get svc\n<span class=\"token function\">curl</span> <span class=\"token punctuation\">{</span>CLUSTER IP<span class=\"token punctuation\">}</span>:80</code></pre>\n</li>\n</ol>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"쿠버네티스 내부구조 분석","anchor":"#쿠버네티스-내부구조-분석"},{"depth":3,"value":"Kubernetes Installation","anchor":"#kubernetes-installation"},{"depth":4,"value":"Preparing a VM & Connect","anchor":"#preparing-a-vm--connect"},{"depth":3,"value":"Install K8s Binaries","anchor":"#install-k8s-binaries"},{"depth":2,"value":"Creating the Kube","anchor":"#creating-the-kube"},{"depth":3,"value":"Set up kubelet","anchor":"#set-up-kubelet"},{"depth":3,"value":"Set up etcd","anchor":"#set-up-etcd"},{"depth":3,"value":"Set up kube-apiserver","anchor":"#set-up-kube-apiserver"},{"depth":2,"value":"kubeconfig File 을 설정하여 kubectl 설정","anchor":"#kubeconfig-file-을-설정하여-kubectl-설정"},{"depth":3,"value":"Set up the New Config for kubelet","anchor":"#set-up-the-new-config-for-kubelet"},{"depth":3,"value":"Set up kube-scheduler","anchor":"#set-up-kube-scheduler"},{"depth":3,"value":"Set up kube-controller-manager","anchor":"#set-up-kube-controller-manager"},{"depth":3,"value":"Set up kube-proxy","anchor":"#set-up-kube-proxy"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}}]}},"context":{}}