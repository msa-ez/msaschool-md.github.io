{"hash":"111274b6c679aae8379740b3dad993eb43961e68","data":{"markdownPage":{"id":"674ee4947b298e70128eb38a72634c49","title":"Kubernetes Basic Command","description":"","path":"/operations/ops-kubernetes/","timeToRead":4,"content":"<h1 id=\"kubernetes-basic-command\"><a href=\"#kubernetes-basic-command\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kubernetes Basic Command</h1>\n<h1 id=\"kubernetes-basic-command-1\"><a href=\"#kubernetes-basic-command-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kubernetes Basic Command</h1>\n<h3 id=\"컨테이너-오케스트레이션-무작정-따라해-보기\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%98%A4%EC%BC%80%EC%8A%A4%ED%8A%B8%EB%A0%88%EC%9D%B4%EC%85%98-%EB%AC%B4%EC%9E%91%EC%A0%95-%EB%94%B0%EB%9D%BC%ED%95%B4-%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>컨테이너 오케스트레이션 무작정 따라해 보기</h3>\n<h4 id=\"주문서비스-생성하기\"><a href=\"#%EC%A3%BC%EB%AC%B8%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>주문서비스 생성하기</h4>\n<ul>\n<li>도커 허브에 저장된 주문 이미지으로 서비스 배포 및 확인하기</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create deploy order --image=jinyoung/monolith-order:v202105042\nkubectl get all</code></pre>\n<ul>\n<li>Docker Hub에 Push한 나만의 이미지로 쿠버네티스에 배포해 보기</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create deploy welcome --image=&lt;내 이미지 full 주소&gt;\nkubectl get all : 생성된 객체(Pod, Deployment, ReplicaSet) 확인\nkubectl get deploy -o wide : 배포에 사용된 이미지 확인\nkubectl get pod -o wide : 파드가 생성된 워크노드 확인</code></pre>\n<h3 id=\"트러블-슈팅\"><a href=\"#%ED%8A%B8%EB%9F%AC%EB%B8%94-%EC%8A%88%ED%8C%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>트러블 슈팅</h3>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl describe po [Pod 명]\nkubectl logs -f [Pod 명]\nkubectl exec -it [Pod 명] -- /bin/sh \n&gt; ls\napp.jar  dev      home     media    opt      root     sbin     sys      usr\nbin      etc      lib      mnt      proc     run      srv      tmp      var\n\n&gt; ps\nPID   USER     TIME  COMMAND\n    1 root      0:38 java -Xmx400M -Djava.security.egd=file:/dev/./urandom -jar /app.jar --\n   48 root      0:00 /bin/sh\n   58 root      0:00 ps</code></pre>\n<p>오류가 있는 경우, 이를 수정한 버전을 올린다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl set image deploy order monolith-order=jinyoung/monolith-order:v20210504</code></pre>\n<h4 id=\"주문서비스-삭제해-보기\"><a href=\"#%EC%A3%BC%EB%AC%B8%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%82%AD%EC%A0%9C%ED%95%B4-%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>주문서비스 삭제해 보기</h4>\n<pre class=\"language-text\"><code class=\"language-text\"># New Terminal (관측용)\nwatch kubectl get pod\n# New Terminal (pod 삭제용)\nkubectl delete pod -l app=order </code></pre>\n<ul>\n<li>Pod를 삭제해도 새로운 Pod로 서비스가 재생성됨을 확인</li>\n</ul>\n<h4 id=\"클라우드-외부에서도-접근-가능하도록-노출하기\"><a href=\"#%ED%81%B4%EB%9D%BC%EC%9A%B0%EB%93%9C-%EC%99%B8%EB%B6%80%EC%97%90%EC%84%9C%EB%8F%84-%EC%A0%91%EA%B7%BC-%EA%B0%80%EB%8A%A5%ED%95%98%EB%8F%84%EB%A1%9D-%EB%85%B8%EC%B6%9C%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>클라우드 외부에서도 접근 가능하도록 노출하기</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl expose deploy order --type=LoadBalancer --port=8080\nkubectl get service -w</code></pre>\n<blockquote>\n<p>External IP를 얻어오는데 오래걸리거나, ALB 등이 연결되는데, 시간이 걸리는 경우 다음의 port-forwarding 명령으로 localhost 에 접속할 수 있다: </p>\n<pre class=\"language-text\"><code class=\"language-text\"># 새 터미널\nkubectl port-forward deploy/order 8080:8080</code></pre>\n</blockquote>\n<h1 id=\"다른-터미널\"><a href=\"#%EB%8B%A4%EB%A5%B8-%ED%84%B0%EB%AF%B8%EB%84%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>다른 터미널</h1>\n<p>http localhost:8080</p>\n<pre class=\"language-text\"><code class=\"language-text\">- Service 정보의 External IP가 Pending 상태에서 IP정보로 변경시까지 대기하기\n- 엔드포인트를 통해 서비스 확인 - http://(IP정보):8080/orders\n- Ctrl + C를 눌러 모니터링 모드 종료하기 \n\n접속테스트:</code></pre>\n<h1 id=\"http-a78bb72215adc4a7c9db56a0c9acc457-1497647582ap-northeast-2elbamazonawscom8080\"><a href=\"#http-a78bb72215adc4a7c9db56a0c9acc457-1497647582ap-northeast-2elbamazonawscom8080\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>http a78bb72215adc4a7c9db56a0c9acc457-1497647582.ap-northeast-2.elb.amazonaws.com:8080</h1>\n<p>HTTP/1.1 200\nContent-Type: application/hal+json;charset=UTF-8\nDate: Wed, 26 May 2021 06:26:06 GMT\nTransfer-Encoding: chunked</p>\n<p>{\n\"_links\": {\n\"deliveries\": {\n\"href\": \"<a href=\"http://a78bb72215adc4a7c9db56a0c9acc457-1497647582.ap-northeast-2.elb.amazonaws.com:8080/deliveries%7B?page,size,sort%7D%22\" target=\"_blank\" rel=\"noopener noreferrer\">http://a78bb72215adc4a7c9db56a0c9acc457-1497647582.ap-northeast-2.elb.amazonaws.com:8080/deliveries{?page,size,sort}\"</a>,\n\"templated\": true\n},\n\"orders\": {\n\"href\": \"<a href=\"http://a78bb72215adc4a7c9db56a0c9acc457-1497647582.ap-northeast-2.elb.amazonaws.com:8080/orders%7B?page,size,sort%7D%22\" target=\"_blank\" rel=\"noopener noreferrer\">http://a78bb72215adc4a7c9db56a0c9acc457-1497647582.ap-northeast-2.elb.amazonaws.com:8080/orders{?page,size,sort}\"</a>,\n\"templated\": true\n},\n\"productOptions\": {\n\"href\": \"<a href=\"http://a78bb72215adc4a7c9db56a0c9acc457-1497647582.ap-northeast-2.elb.amazonaws.com:8080/productOptions\" target=\"_blank\" rel=\"noopener noreferrer\">http://a78bb72215adc4a7c9db56a0c9acc457-1497647582.ap-northeast-2.elb.amazonaws.com:8080/productOptions</a>\"\n},\n\"products\": {\n\"href\": \"<a href=\"http://a78bb72215adc4a7c9db56a0c9acc457-1497647582.ap-northeast-2.elb.amazonaws.com:8080/products%7B?page,size,sort%7D%22\" target=\"_blank\" rel=\"noopener noreferrer\">http://a78bb72215adc4a7c9db56a0c9acc457-1497647582.ap-northeast-2.elb.amazonaws.com:8080/products{?page,size,sort}\"</a>,\n\"templated\": true\n},\n\"profile\": {\n\"href\": \"<a href=\"http://a78bb72215adc4a7c9db56a0c9acc457-1497647582.ap-northeast-2.elb.amazonaws.com:8080/profile\" target=\"_blank\" rel=\"noopener noreferrer\">http://a78bb72215adc4a7c9db56a0c9acc457-1497647582.ap-northeast-2.elb.amazonaws.com:8080/profile</a>\"\n}\n}\n}</p>\n<pre class=\"language-text\"><code class=\"language-text\">#### 주문서비스 롤백(RollBack) 하기</code></pre>\n<p>kubectl rollout undo deploy order\nkubectl get deploy -o wide</p>\n<pre class=\"language-text\"><code class=\"language-text\">- 주문서비스에 적용된 Image가 apexacme/order로 롤백되었음을 확인\n\n\n\n#### 주문서비스 인스턴스 확장(Scale-Out) 하기 (수동)</code></pre>\n<p>kubectl scale deploy order --replicas=3\nkubectl get pod</p>\n<pre class=\"language-text\"><code class=\"language-text\">- 주문서비스의 인스턴스(Pod)가 3개로 확장됨을 확인\n\n\n#### YAML 기반 서비스 배포하기\n\n- GitPod &gt; Explorer 에서 마우스 오른쪽 클릭 &gt; New Folder &gt; Lab 입력 \n- Lab 폴더 마우스 오른쪽 클릭 &gt; New File &gt; order.yaml 입력\n- 아래 내용 복사하여 붙여넣기</code></pre>\n<p>apiVersion: apps/v1\nkind: Deployment\nmetadata:\nname: order-by-yaml\nlabels:\napp: order\nspec:\nreplicas: 2\nselector:\nmatchLabels:\napp: order\ntemplate:\nmetadata:\nlabels:\napp: order\nspec:\ncontainers:\n- name: order\nimage: jinyoung/monolith-order:v20210504\nports:\n- containerPort: 8080        </p>\n<pre class=\"language-text\"><code class=\"language-text\">- 입력 후, 저장</code></pre>\n<ul>\n<li>kubectl apply -f order.yaml </li>\n<li>kubectl get all </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">&gt; 혹은, 기존의 쿠버네티스 내에 저장된 객체에서 yaml을 획득할수도 있다:</code></pre>\n<p>kubectl get deploy order -o yaml > order.yaml</p>\n<pre class=\"language-text\"><code class=\"language-text\">&gt; 하지만 얻어낸 객체의 status 파트와 uid 등 불필요한 속성들을 일일이 지워주고 계속사용해야 한다.\n\n## 오류발생시\n\n1. Already Exist:</code></pre>\n<p>root@labs-373904008:/home/project/ops-kubernetes# kubectl expose deploy order --type=LoadBalancer --port=8080\nError from server (AlreadyExists): services \"order\" already exists</p>\n<pre class=\"language-text\"><code class=\"language-text\"> 이미 해당 객체가 존재한다는 오류. 해당 객체를 삭제:</code></pre>\n<p> kubectl delete &#x3C;svc | deploy> <objectid></p>\n<pre class=\"language-text\"><code class=\"language-text\">### 상세설명\n&lt;iframe width=&quot;100%&quot; height=&quot;100%&quot; src=&quot;https://www.youtube.com/embed/r8oRinKA01o&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen&gt;&lt;/iframe&gt;</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Kubernetes Basic Command","anchor":"#kubernetes-basic-command"},{"depth":1,"value":"Kubernetes Basic Command","anchor":"#kubernetes-basic-command-1"},{"depth":3,"value":"컨테이너 오케스트레이션 무작정 따라해 보기","anchor":"#컨테이너-오케스트레이션-무작정-따라해-보기"},{"depth":4,"value":"주문서비스 생성하기","anchor":"#주문서비스-생성하기"},{"depth":3,"value":"트러블 슈팅","anchor":"#트러블-슈팅"},{"depth":4,"value":"주문서비스 삭제해 보기","anchor":"#주문서비스-삭제해-보기"},{"depth":4,"value":"클라우드 외부에서도 접근 가능하도록 노출하기","anchor":"#클라우드-외부에서도-접근-가능하도록-노출하기"},{"depth":1,"value":"다른 터미널","anchor":"#다른-터미널"},{"depth":1,"value":"http a78bb72215adc4a7c9db56a0c9acc457-1497647582.ap-northeast-2.elb.amazonaws.com:8080","anchor":"#http-a78bb72215adc4a7c9db56a0c9acc457-1497647582ap-northeast-2elbamazonawscom8080"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}