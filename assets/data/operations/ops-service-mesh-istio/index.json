{"hash":"639846ab77f2d650b364be948c0c3d68be620b02","data":{"markdownPage":{"id":"571ab8a64d93cb63cf75352c079a9e86","title":"[Service Mesh] Istio","description":"","path":"/operations/ops-service-mesh-istio/","timeToRead":5,"content":"<h1 id=\"service-mesh-istio\"><a href=\"#service-mesh-istio\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[Service Mesh] Istio</h1>\n<h2 id=\"download-istio\"><a href=\"#download-istio\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Download Istio</h2>\n<ol>\n<li>\n<p>다운로드 후, 압축을 해제한다</p>\n<pre class=\"language-text\"><code class=\"language-text\">$ curl -L https://istio.io/downloadIstio | sh -</code></pre>\n</li>\n<li>\n<p>Istio 패키지 폴더로 이동시킨다\n<code>istio-&#x3C; istio_full_version ></code>:</p>\n<pre class=\"language-text\"><code class=\"language-text\">$ cd istio-&lt; istio_full_version &gt;</code></pre>\n<p>해당 디렉토리에는 다음의 내용을 포함하고 있다:</p>\n<ul>\n<li>샘플애플리케이션: <code>samples/</code></li>\n<li><code>istioctl</code> 클라이언트 툴은\n<code>bin/</code> 디렉토리에 포함되어있다.</li>\n</ul>\n</li>\n<li>\n<p><code>istioctl</code> 클라이언트를 PATH에 잡아준다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">$ export PATH=$PWD/bin:$PATH</code></pre>\n</li>\n</ol>\n<h2 id=\"install-istio\"><a href=\"#install-istio\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Install Istio</h2>\n<ol>\n<li>기본적인 구성인 <code>demo</code> 를 기반으로 설치한다. </li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">   $ istioctl install --set profile=demo -y\n    ✔ Istio core installed\n    ✔ Istiod installed\n    ✔ Egress gateways installed\n    ✔ Ingress gateways installed\n    ✔ Installation complete</code></pre>\n<ol>\n<li>Envoy 사이드카를 생성하는 Pod 들에 자동적으로 주입하게 하기 위해 다음의 설정을 추가한다:</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">   $ kubectl label namespace default istio-injection=enabled\n    namespace/default labeled</code></pre>\n<h2 id=\"deploy-the-sample-application-bookinfo\"><a href=\"#deploy-the-sample-application-bookinfo\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deploy the sample application bookinfo</h2>\n<ol>\n<li><code>Bookinfo</code> 샘플 애플리케이션을 설치한다</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">    $ kubectl apply -f samples/bookinfo/platform/kube/bookinfo.yaml\n    service/details created\n    serviceaccount/bookinfo-details created\n    deployment.apps/details-v1 created\n    service/ratings created\n    serviceaccount/bookinfo-ratings created\n    deployment.apps/ratings-v1 created\n    service/reviews created\n    serviceaccount/bookinfo-reviews created\n    deployment.apps/reviews-v1 created\n    deployment.apps/reviews-v2 created\n    deployment.apps/reviews-v3 created\n    service/productpage created\n    serviceaccount/bookinfo-productpage created\n    deployment.apps/productpage-v1 created</code></pre>\n<ol>\n<li>애플리케이션이 시작되고 각 Pod들이 준비상태가 된다. Istio Sidecar들이 같이 배포되었을 것이다.</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">    $ kubectl get services\n    NAME          TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)    AGE\n    details       ClusterIP   10.0.0.212      &lt;none&gt;        9080/TCP   29s\n    kubernetes    ClusterIP   10.0.0.1        &lt;none&gt;        443/TCP    25m\n    productpage   ClusterIP   10.0.0.57       &lt;none&gt;        9080/TCP   28s\n    ratings       ClusterIP   10.0.0.33       &lt;none&gt;        9080/TCP   29s\n    reviews       ClusterIP   10.0.0.28       &lt;none&gt;        9080/TCP   29s</code></pre>\n<p>  그리고 다음과 같이 확인한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">    $ kubectl get pods\n    NAME                              READY   STATUS    RESTARTS   AGE\n    details-v1-558b8b4b76-2llld       2/2     Running   0          2m41s\n    productpage-v1-6987489c74-lpkgl   2/2     Running   0          2m40s\n    ratings-v1-7dc98c7588-vzftc       2/2     Running   0          2m41s\n    reviews-v1-7f99cc4496-gdxfn       2/2     Running   0          2m41s\n    reviews-v2-7d79d5bd5d-8zzqd       2/2     Running   0          2m41s\n    reviews-v3-7dbcdcbc56-m8dph       2/2     Running   0          2m41s</code></pre>\n<blockquote>\n<p>  모든 Pod 가 <code>2/2</code>로 표시될때까지 기다린다\n모든 상태가 <code>Running</code> 이 될때까지 기다린다</p>\n</blockquote>\n<ol>\n<li>모든것이 제대로 된 후에는 다음의 주소로 접속하여 웹 페이지 HTML 콘텐츠 내용을 확인할 수 있어야 한다.</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">    $ kubectl exec &quot;$(kubectl get pod -l app=ratings -o jsonpath=&#39;{.items[0].metadata.name}&#39;)&quot; -c ratings -- curl -sS productpage:9080/productpage | grep -o &quot;&lt;title&gt;.*&lt;/title&gt;&quot;\n    &lt;title&gt;Simple Bookstore App&lt;/title&gt;</code></pre>\n<h2 id=\"open-the-application-to-outside-traffic\"><a href=\"#open-the-application-to-outside-traffic\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Open the application to outside traffic</h2>\n<p>애플리케이션이 잘 디플로이 되었지만 외부에서는 접근이 되지 않은 상태이다. 외부접속이 가능하게 하기위해서는 Istio의 Ingress Gateway를 설정해야 한다. </p>\n<ol>\n<li>애플리케이션들을 Istio Gateway 에 묶기위한 설정들을 배포한다:</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">    $ kubectl apply -f samples/bookinfo/networking/bookinfo-gateway.yaml\n    gateway.networking.istio.io/bookinfo-gateway created\n    virtualservice.networking.istio.io/bookinfo created</code></pre>\n<ol>\n<li>발생한 문제가 없는지 확인한다:</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">    $ istioctl analyze\n    ✔ No validation issues found when analyzing namespace: default.</code></pre>\n<h3 id=\"determining-the-ingress-ip-and-ports\"><a href=\"#determining-the-ingress-ip-and-ports\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Determining the ingress IP and ports</h3>\n<p>다음의 환경 변수를 인그레스의 접속 주소를 얻어와 설정한다:<code>INGRESS_HOST</code> 와 <code>INGRESS_PORT</code> </p>\n<pre class=\"language-text\"><code class=\"language-text\">$ kubectl get svc istio-ingressgateway -n istio-system\nNAME                   TYPE           CLUSTER-IP       EXTERNAL-IP     PORT(S)                                      AGE\nistio-ingressgateway   LoadBalancer   172.21.109.129   130.211.10.121  80:31380/TCP,443:31390/TCP,31400:31400/TCP   17h</code></pre>\n<p>어느정도 기다렸을때, <code>EXTERNAL-IP</code> 값이 설정되었다면 외부 로드밸런서 설정이 잘 된것이다. 만약 설정값이 기다려도 나타나지 않으면, 외부 ㄹ드밸런서가 없는 경우이다.</p>\n<p>인그레스의 IP 와 Port 번호를 가져온다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">$ export INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=&#39;{.status.loadBalancer.ingress[0].ip}&#39;)\n$ export INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=&#39;{.spec.ports[?(@.name==&quot;http2&quot;)].port}&#39;)\n$ export SECURE_INGRESS_PORT=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=&#39;{.spec.ports[?(@.name==&quot;https&quot;)].port}&#39;)</code></pre>\n<blockquote>\n<p>AWS와 같은 특정한 환경에서는 IP address 대신 host명을 넘겨주는 경우가 있다.\n이런 경우는 호스트명을 가져오도록 하는 명령으로 대치하여 설정한다:</p>\n</blockquote>\n<pre class=\"language-text\"><code class=\"language-text\">$ export INGRESS_HOST=$(kubectl -n istio-system get service istio-ingressgateway -o jsonpath=&#39;{.status.loadBalancer.ingress[0].hostname}&#39;)</code></pre>\n<ol>\n<li>그런다음 다음의 환경변수에 Gateway URL을 생성할 수 있다: <code>GATEWAY_URL</code>:</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">    $ export GATEWAY_URL=$INGRESS_HOST:$INGRESS_PORT</code></pre>\n<ol>\n<li>환경변수에 IP address 와 port 가 잘 설정되었는지 확인한다:</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">    $ echo &quot;$GATEWAY_URL&quot;\n    192.168.99.100:32194</code></pre>\n<h3 id=\"verify-external-access\"><a href=\"#verify-external-access\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Verify external access</h3>\n<p>외부에서의 접속이 문제 없는지 확인한다.</p>\n<ol>\n<li>다음의 명령을 입력하여 얻어진 url 로 브라우저를 접속하여 Bookinfo application이 잘 동작하는지 확인한다.</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">    $ echo &quot;http://$GATEWAY_URL/productpage&quot;</code></pre>\n<p>Bookinfo product page 를 여러번 리프래스 해본다.</p>\n<h2 id=\"동적-트래픽-제어-테스트\"><a href=\"#%EB%8F%99%EC%A0%81-%ED%8A%B8%EB%9E%98%ED%94%BD-%EC%A0%9C%EC%96%B4-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>동적 트래픽 제어 테스트</h2>\n<p>Review 서비스의 종류별 유입을 동적으로 변경하여 Canary 배포등의 시나리오에 적용하는 예시.</p>\n<p>VirtualService 를 먼저 배포한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f samples/bookinfo/networking/virtual-service-reviews-80-20.yaml </code></pre>\n<p>DestinationRule 을 배포한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f samples/bookinfo/networking/destination-rule-reviews.yaml</code></pre>\n<p>80:20 의 확률로 v1과 v2가 선택됨을 확인할 수 있다. </p>\n<p>virtual-service-reviews-80-20.yaml 의 내용을 아래와 같이 수정한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: reviews\nspec:\n  hosts:\n    - reviews\n  http:\n  - route:\n    - destination:\n        host: reviews\n        subset: v1\n      weight: 0\n    - destination:\n        host: reviews\n        subset: v2\n      weight: 100</code></pre>\n<p>모든 트래픽 유입이 v2버전으로 전환됨을 확인한다.</p>\n<h2 id=\"view-the-dashboard\"><a href=\"#view-the-dashboard\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>View the dashboard</h2>\n<p>Istio 는 다른 텔레메트리 모니터링 툴과 같이 제공이 된다. 이 툴은 서비스 매시의 구조를 쉽게 들여다 볼 수 있도록 되어있어 서비스간 호출 구조와 핼쓰상태를 쉽게 이해할 수 있도록 제공된다. </p>\n<ol>\n<li>이를 위해 다음을 설치한다: [Kiali and the other addons]({{&#x3C; github_tree >}}/samples/addons). 설치가 완료될 때까지 기다린다.</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">    $ kubectl apply -f samples/addons\n    $ kubectl rollout status deployment/kiali -n istio-system\n    Waiting for deployment &quot;kiali&quot; rollout to finish: 0 of 1 updated replicas are available...\n    deployment &quot;kiali&quot; successfully rolled out</code></pre>\n<blockquote>\n<p>  중간에 오류가 생길 수 있으니, 그때는 다시 명령을 보내어 설치하면 된다.</p>\n</blockquote>\n<ol>\n<li>Kiali dashboard 에 접속한다</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\"> $ istioctl dashboard kiali</code></pre>\n<p>MSA Easy 에서 열수있는 포트는 808x 대만 지원되므로 iptables 명령으로 포트포워딩 한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 8080 -j REDIRECT --to-port 20001</code></pre>\n<blockquote>\n<p>iptables 설치:\napt-get update\napt-get install iptables</p>\n</blockquote>\n<p>Labs > 포트열기 > 8080 으로 대시보드를 열어 접속해본다.</p>\n<ol>\n<li>위의 방식으로 kiali 접속이 되지 않는 경우는 kiali svc 를 LoadBalancer로 공개해서 봐야 한다:</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl edit svc kiali -n istio-system</code></pre>\n<ul>\n<li>type: ClusterIp  부분을 찾는다</li>\n<li>i 를 입력한후</li>\n<li>LoadBalancer 로 ClusterIp 를 바꾼다</li>\n<li>ESC키를 입력후,</li>\n<li>:wq 를 입력한다</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get svc -n istio-system </code></pre>\n<p>해서 kiali의 EXTERNAL_IP 를 참고하여\nhttp://&#x3C;EXTERNAL_IP>:20001/kiali\n로 브라우저 접속한다</p>\n<ol>\n<li>\n<p>왼쪽 네비게이션 메뉴에서 <em>Graph</em> 를 선택한후 <em>Namespace</em> 드롭다운 메뉴에서, <em>default</em> 를 선택해준다.</p>\n<p>The Kiali dashboard shows an overview of your mesh with the relationships\nbetween the services in the <code>Bookinfo</code> sample application. It also provides\nfilters to visualize the traffic flow.</p>\n</li>\n</ol>\n<p><img src=\"https://istio.io/latest/docs/setup/getting-started/kiali-example2.png\" alt=\"Kiali Dashboard\"></p>\n<h2 id=\"uninstall\"><a href=\"#uninstall\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Uninstall</h2>\n<p>To delete the <code>Bookinfo</code> sample application and its configuration, see\n<a href=\"/docs/examples/bookinfo/#cleanup\"><code>Bookinfo</code> cleanup</a>.</p>\n<p>The Istio uninstall deletes the RBAC permissions and all resources hierarchically\nunder the <code>istio-system</code> namespace. It is safe to ignore errors for non-existent\nresources because they may have been deleted hierarchically.</p>\n<pre class=\"language-text\"><code class=\"language-text\">$ kubectl delete -f samples/addons\n$ istioctl manifest generate --set profile=demo | kubectl delete --ignore-not-found=true -f -</code></pre>\n<p>The <code>istio-system</code> namespace is not removed by default.\nIf no longer needed, use the following command to remove it:</p>\n<pre class=\"language-text\"><code class=\"language-text\">$ kubectl delete namespace istio-system</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" Istio","anchor":"#service-mesh-istio"},{"depth":2,"value":"Download Istio","anchor":"#download-istio"},{"depth":2,"value":"Install Istio","anchor":"#install-istio"},{"depth":2,"value":"Deploy the sample application bookinfo","anchor":"#deploy-the-sample-application-bookinfo"},{"depth":2,"value":"Open the application to outside traffic","anchor":"#open-the-application-to-outside-traffic"},{"depth":3,"value":"Determining the ingress IP and ports","anchor":"#determining-the-ingress-ip-and-ports"},{"depth":3,"value":"Verify external access","anchor":"#verify-external-access"},{"depth":2,"value":"동적 트래픽 제어 테스트","anchor":"#동적-트래픽-제어-테스트"},{"depth":2,"value":"View the dashboard","anchor":"#view-the-dashboard"},{"depth":2,"value":"Uninstall","anchor":"#uninstall"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}