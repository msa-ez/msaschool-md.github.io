{"hash":"8ec2d2d769250ada18e8c764b3b6b292cc183178","data":{"markdownPage":{"id":"009eb839f718fffeb53756e5b5a3488f","title":"쿠버네티스 유틸리티","description":"","path":"/operations/ops-utility/","timeToRead":1,"content":"<h1 id=\"쿠버네티스-유틸리티\"><a href=\"#%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%EC%9C%A0%ED%8B%B8%EB%A6%AC%ED%8B%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>쿠버네티스 유틸리티</h1>\n<h1 id=\"쿠버네티스-유틸리티-1\"><a href=\"#%EC%BF%A0%EB%B2%84%EB%84%A4%ED%8B%B0%EC%8A%A4-%EC%9C%A0%ED%8B%B8%EB%A6%AC%ED%8B%B0-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>쿠버네티스 유틸리티</h1>\n<h3 id=\"helm\"><a href=\"#helm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Helm</h3>\n<p>Helm(패키지 인스톨러) 설치</p>\n<ul>\n<li>Helm 3.x 설치(권장)</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">curl</span> https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 <span class=\"token operator\">></span> get_helm.sh\n<span class=\"token function\">chmod</span> <span class=\"token number\">700</span> get_helm.sh\n./get_helm.sh</code></pre>\n<h3 id=\"kafka\"><a href=\"#kafka\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\">helm repo <span class=\"token function\">add</span> incubator https://charts.helm.sh/incubator \nhelm repo update \nkubectl create ns kafka \nhelm <span class=\"token function\">install</span> my-kafka --namespace kafka incubator/kafka </code></pre>\n<p>혹은</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">helm repo update\nhelm repo <span class=\"token function\">add</span> bitnami https://charts.bitnami.com/bitnami\nkubectl create ns kafka\nhelm <span class=\"token function\">install</span> my-kafka bitnami/kafka --namespace kafka</code></pre>\n<p>Kafka 내부에 진입하여 메시지 확인하기</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl run my-kafka-client --restart<span class=\"token operator\">=</span><span class=\"token string\">'Never'</span> --image docker.io/bitnami/kafka:2.8.0-debian-10-r0 --namespace kafka --command -- <span class=\"token function\">sleep</span> infinity\n    kubectl <span class=\"token builtin class-name\">exec</span> --tty -i my-kafka-client --namespace kafka -- <span class=\"token function\">bash</span>\n\n    PRODUCER:\n        kafka-console-producer.sh <span class=\"token punctuation\">\\</span>\n            --broker-list my-kafka-0.my-kafka-headless.kafka.svc.cluster.local:9092 <span class=\"token punctuation\">\\</span>\n            --topic <span class=\"token builtin class-name\">test</span>\n\n    CONSUMER:\n        kafka-console-consumer.sh <span class=\"token punctuation\">\\</span>\n            --bootstrap-server my-kafka.kafka.svc.cluster.local:9092 <span class=\"token punctuation\">\\</span>\n            --topic <span class=\"token builtin class-name\">test</span> <span class=\"token punctuation\">\\</span>\n            --from-beginning</code></pre>\n<h3 id=\"httpie-pod\"><a href=\"#httpie-pod\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HTTPie Pod</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">cat</span> <span class=\"token operator\">&lt;&lt;</span>EOF <span class=\"token operator\">|</span> kubectl apply -f -\napiVersion: <span class=\"token string\">\"v1\"</span>\nkind: <span class=\"token string\">\"Pod\"</span>\nmetadata: \n  name: httpie\n  labels: \n    name: httpie\nspec: \n  containers: \n    - \n      name: httpie\n      image: clue/httpie\n      command:\n        - <span class=\"token function\">sleep</span>\n        - <span class=\"token string\">\"36000\"</span>\nEOF</code></pre>\n<p>생성후, 접속:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl <span class=\"token builtin class-name\">exec</span> -it httpie bin/bash</code></pre>\n<h3 id=\"seige-pod\"><a href=\"#seige-pod\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Seige Pod</h3>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl apply -f - <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\napiVersion: v1\nkind: Pod\nmetadata:\n  name: siege\nspec:\n  containers:\n  - name: siege\n    image: apexacme/siege-nginx\nEOF</span></code></pre>\n<p>생성후, 접속:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl <span class=\"token builtin class-name\">exec</span> -it siege bin/bash</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"쿠버네티스 유틸리티","anchor":"#쿠버네티스-유틸리티"},{"depth":1,"value":"쿠버네티스 유틸리티","anchor":"#쿠버네티스-유틸리티-1"},{"depth":3,"value":"Helm","anchor":"#helm"},{"depth":3,"value":"Kafka","anchor":"#kafka"},{"depth":3,"value":"HTTPie Pod","anchor":"#httpie-pod"},{"depth":3,"value":"Seige Pod","anchor":"#seige-pod"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-service/","title":"12번가 마이크로서비스 라우터(Service) 적용"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Pub/Sub 방식의 연동 (New)"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 (New)"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation (New)"}},{"node":{"path":"/development/oauth2/","title":"Req/Res 방식의 MSA 연동 (New)"}},{"node":{"path":"/development/monolith2misvc/","title":"Kafka Retry & Dead Letter Queue (New)"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/gateway/","title":"단위 마이크로 서비스의 실행 (New)"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Kafka 기본 명령어 (New)"}},{"node":{"path":"/development/kafka-scaling/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/cna-pubsub/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/kafka-base/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/cna-pubsub2/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/front-end/","title":"Kafka Scaling (New)"}},{"node":{"path":"/development/circuitbreaker/","title":"API Gateway"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/development/advanced-connect/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}}]}},"context":{}}