{"hash":"49f02bf9a1ddbf017efeb189302ebd145a2955d8","data":{"markdownPage":{"id":"a7ddef60b0c8328b192d52a32e9e4b53","title":"12번가 Mall에 토큰인증 적용하기","description":"","path":"/operations/apply-security-to-12st-mall/","timeToRead":7,"content":"<h1 id=\"12번가-mall에-토큰인증-적용하기\"><a href=\"#12%EB%B2%88%EA%B0%80-mall%EC%97%90-%ED%86%A0%ED%81%B0%EC%9D%B8%EC%A6%9D-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>12번가 Mall에 토큰인증 적용하기</h1>\n<h1 id=\"12번가-mall에-토큰인증-적용하기-1\"><a href=\"#12%EB%B2%88%EA%B0%80-mall%EC%97%90-%ED%86%A0%ED%81%B0%EC%9D%B8%EC%A6%9D-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>12번가 Mall에 토큰인증 적용하기</h1>\n<h3 id=\"12st-mall에-토큰인증-적용\"><a href=\"#12st-mall%EC%97%90-%ED%86%A0%ED%81%B0%EC%9D%B8%EC%A6%9D-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>12st Mall에 토큰인증 적용</h3>\n<p>본 랩에서는 Single Sign-on 솔루션 중, Redhat이 지원하는 SSO 오픈스텍인 Keycloak을 내 클러스터에 설치하고, 이를 주문 마이크로서비스에 적용해 본다.</p>\n<h3 id=\"첫번째-keycloak-설치하기\"><a href=\"#%EC%B2%AB%EB%B2%88%EC%A7%B8-keycloak-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>첫번째, Keycloak 설치하기</h3>\n<ul>\n<li>Helm Chart 설정</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">git clone https://github.com/acmexii/mall-with-keylcoak-JWT.git\ncd mall-with-keylcoak-JWT\ntar xvf keycloak.tar\ncd keycloak\nvi values.yaml\n# 96라인과 99라인의 \n# adminUser, adminPassword 값을\n# 모두 admin으로 수정하고 저장/종료한다.</code></pre>\n<ul>\n<li>네임스페이스 생성 및 설치</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">helm repo add bitnami https://charts.bitnami.com/bitnami\nhelm repo update\nkubectl create namespace keycloak\nhelm install keycloak bitnami/keycloak -f values.yaml --namespace keycloak\nkubectl get all -n keycloak</code></pre>\n<ul>\n<li>keycloak SSO Server가 Postgresql DB기반으로 설치되어 조회된다.</li>\n<li>발급된 EXTERNAL-IP를 복사하여 브라우저에서 접근한다.</li>\n</ul>\n<h4 id=\"keycloak-서버-설정\"><a href=\"#keycloak-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak 서버 설정</h4>\n<ul>\n<li>웹브라우저에서 Keycloak 관리콘솔(<a href=\"http://EXTERNAL-IP/\" target=\"_blank\" rel=\"noopener noreferrer\">http://EXTERNAL-IP/</a>)에 접속한다.</li>\n<li>관리자 계정이 (admin/admin)으로 등록되어 있다.</li>\n<li>'Administration Console'을 눌러 콘솔로 진입한다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/156484122-ffa109fc-d558-4ab1-bfcf-60b83cbaf7bc.png\" alt=\"image\"></p>\n<h3 id=\"두번째-keycloak-설정하기\"><a href=\"#%EB%91%90%EB%B2%88%EC%A7%B8-keycloak-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>두번째, Keycloak 설정하기</h3>\n<h4 id=\"15-realm-추가\"><a href=\"#15-realm-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1/5. Realm 추가</h4>\n<ul>\n<li>'test-realm' 이름으로 Root 관리단위인 Realm을 추가한다.</li>\n<li>추가된 Realm에서 Token의 Lifespan을 1시간으로 조정한다.</li>\n</ul>\n<h4 id=\"25-client-등록\"><a href=\"#25-client-%EB%93%B1%EB%A1%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2/5. Client 등록</h4>\n<ul>\n<li>왼쪽 메뉴 Client를 눌러, Realm 범주의 Client를 추가한다.</li>\n<li>\n<p>'test-client' 이름으로 OAuth2 CLIENT를 등록한다.</p>\n<blockquote>\n<p>Root URL: <a href=\"http://EXTERNAL-IP/\" target=\"_blank\" rel=\"noopener noreferrer\">http://EXTERNAL-IP/</a></p>\n</blockquote>\n</li>\n<li>'Save'를 눌러 저장한다.</li>\n</ul>\n<h4 id=\"35-client의-oauth2-설정을-추가한다\"><a href=\"#35-client%EC%9D%98-oauth2-%EC%84%A4%EC%A0%95%EC%9D%84-%EC%B6%94%EA%B0%80%ED%95%9C%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3/5. Client의 OAuth2 설정을 추가한다.</h4>\n<ul>\n<li>\n<p>등록된 Client의 Settings 탭에서 아래 설정을 추가해 준다.</p>\n<blockquote>\n<p>Redirect URI: <a href=\"http://GATEWAY-EXTERNAL-IP:8080/*\" target=\"_blank\" rel=\"noopener noreferrer\">http://GATEWAY-EXTERNAL-IP:8080/*</a>\nAccess Type: public에서 confidential로 설정\nOAuth2의 \"Client Credentials\" 타입이 활성화된다.</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/156488402-9cbe5c86-bf4f-43df-a1d0-1a9468b07cd7.png\" alt=\"image\"></p>\n<ul>\n<li>'Save'를 눌러 저장한다.</li>\n<li>'Credentials' 탭을 눌러, Client의 Secret 정보가 발급됨을 확인한다.</li>\n</ul>\n<h4 id=\"45-권한role-및-사용자-설정\"><a href=\"#45-%EA%B6%8C%ED%95%9Crole-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4/5. 권한(Role) 및 사용자 설정</h4>\n<ul>\n<li>'Roles' 탭을 눌러 Client의 Local Role을 추가한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/156489319-547b9359-9ab6-48a8-b60e-840f64dd0dae.png\" alt=\"image\"></li>\n<li>아래 목록처럼 나타나도록 Role 이름을 부여한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/156489389-068e1763-45cb-467c-ac7f-cef9ff71aba0.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>\n<p>왼쪽 메뉴에서 Users를 눌러 사용자를 등록한다.</p>\n<blockquote>\n<p>사용자 정보는 Custom하게 생성해 본다. (User와 Admin 계정포함)\n<img src=\"https://user-images.githubusercontent.com/35618409/156489961-925921e0-fccc-4962-84cb-a48c095112ce.png\" alt=\"image\"></p>\n</blockquote>\n</li>\n<li>등록 후, Credentials 탭에서 비밀번호를 등록하는데 이때, Temporary를 Off로 설정한다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/156490161-f7f4d714-bb17-4b21-9931-3b26608e9cd1.png\" alt=\"image\"></p>\n<ul>\n<li>User 등록이 끝나면, Role과 사용자를 매핑한다.</li>\n<li>등록한 사용자 각각에서 'Role Mappings' 탭을 눌러 Client의 Local Role을 선택해 준다.\n<img src=\"https://user-images.githubusercontent.com/35618409/156490674-2c253aa0-44b3-45fb-be21-3fcc3952e2ed.png\" alt=\"image\"></li>\n</ul>\n<blockquote>\n<p>User 계정에는 'ORDER_CUSTOMER' 역할 매핑\nAdmin 계정에는 'ORDER_ADMIN', 'ORDER_CUSTOMER' 역할 매핑</p>\n</blockquote>\n<h4 id=\"55-로그인-페이지-설정\"><a href=\"#55-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5/5. 로그인 페이지 설정</h4>\n<ul>\n<li>등록한 Realm의  General 탭에서 Display name을 '12st_shopMall'로 설정한다.</li>\n<li>Login 탭에서 '사용자 등록', '비밀번호 분실', '기억하기'를 추가로 On 으로 설정한다.</li>\n</ul>\n<h3 id=\"세번째-12st-mall에-sso-적용하기\"><a href=\"#%EC%84%B8%EB%B2%88%EC%A7%B8-12st-mall%EC%97%90-sso-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>세번째, 12st Mall에 SSO 적용하기</h3>\n<ul>\n<li>12st Mall 코드에 Keycloak설정을 적용한다.</li>\n<li>VSCode의 Explorer영역을 펼쳐 코드를 수정한다.</li>\n</ul>\n<h3 id=\"gateway-서비스-배포\"><a href=\"#gateway-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gateway 서비스 배포</h3>\n<h4 id=\"15-gateway-oauth2-client-설정\"><a href=\"#15-gateway-oauth2-client-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1/5. Gateway OAuth2 Client 설정</h4>\n<ul>\n<li>pom.xml을 통해 Gateway에 설정된 라이브러리(oauth2 client)를 확인한다.</li>\n<li>application.yml에 oauth2 client 설정을 주입한다.</li>\n<li>주석 부분을 해제하고 나의 keycloak 정보로 수정한다.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\">#  security:</span>\n<span class=\"token comment\">#    oauth2:</span>\n<span class=\"token comment\">#      client:</span>\n<span class=\"token comment\">#        provider:</span>\n<span class=\"token comment\">#          my-keycloak-provider:</span>\n<span class=\"token comment\">#            issuer-uri: http://KEYCLOAK-EXTERNAL-IP/auth/realms/test-realm</span>\n<span class=\"token comment\">#        registration:</span>\n<span class=\"token comment\">#          keycloak-test-client:</span>\n<span class=\"token comment\">#            provider: my-keycloak-provider</span>\n<span class=\"token comment\">#            client-id: test-client</span>\n<span class=\"token comment\">#            client-secret: HKFKYP7kb8OMldAgfvnk27FhRPOv8Y7H</span>\n<span class=\"token comment\">#            authorization-grant-type: authorization_code</span>\n<span class=\"token comment\">#            redirect-uri: '{baseUrl}/login/oauth2/code/keycloak'</span>\n<span class=\"token comment\">#            scope: openid</span></code></pre>\n<blockquote>\n<p>keycloak Endpoint 정보는 Realm에서 OIDC 링크를 통해 확인 가능하다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/156495160-c1dba952-ad18-45d8-b170-e2cfe377887d.png\" alt=\"image\"></p>\n<h4 id=\"25-gateway-security-configuration\"><a href=\"#25-gateway-security-configuration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2/5. Gateway Security Configuration</h4>\n<ul>\n<li>SecurityConfig.java 파일을 열어 기본 설정을 확인한다.</li>\n<li>백엔드 마이크로서비스 단위의 화이트 리스트만 보이고, API 리소스에 대한 설정은 없어 간결하다.</li>\n</ul>\n<h4 id=\"35-gateway에서-backend-라우팅\"><a href=\"#35-gateway%EC%97%90%EC%84%9C-backend-%EB%9D%BC%EC%9A%B0%ED%8C%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3/5. Gateway에서 Backend 라우팅</h4>\n<ul>\n<li>application.yml을 다시 오픈한다.</li>\n<li>주문 마이크로서비스에 대한 라우팅 설정과 TokenRelay 필터를 적용해 준다.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\">#      default-filters:</span>\n<span class=\"token comment\">#        - TokenRelay</span>\n<span class=\"token comment\">#      routes:</span>\n<span class=\"token comment\">#        - id: order</span>\n<span class=\"token comment\">#          uri: http://order:8080</span>\n<span class=\"token comment\">#          predicates:</span>\n<span class=\"token comment\">#            - Path=/orders/**, /order/**</span></code></pre>\n<ul>\n<li>application.yml을 저장한다.</li>\n</ul>\n<h4 id=\"45-gateway-이미지-빌드-및-배포\"><a href=\"#45-gateway-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%B9%8C%EB%93%9C-%EB%B0%8F-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4/5. Gateway 이미지 빌드 및 배포</h4>\n<pre class=\"language-text\"><code class=\"language-text\">cd gateway\nmvn package -B -DskipTests\n# &#39;username&#39;을 나의 Docker account로 수정\ndocker build -t username/gateway:v2 .\ndocker push username/gateway:v2\ncd gateway/kubernetes\nvi deployment.yml\n# 19라인의 이미지 이름을 빌드한 이름에 맞도록 수정/저장한다.\nkubectl apply -f ./\nkubectl get all</code></pre>\n<h4 id=\"55-oauth2-client-확인\"><a href=\"#55-oauth2-client-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>5/5. OAuth2 Client 확인</h4>\n<ul>\n<li>브라우저를 열어 Gateway Root(<a href=\"http://EXTERN-IP:8080/\" target=\"_blank\" rel=\"noopener noreferrer\">http://EXTERN-IP:8080/</a>)에 접속한다.</li>\n<li>Controller.java에 테스트용 Content(\"/\")가 설정되어 있다.</li>\n<li>인증서버의 Login페이지가 출력되고, 등록한 사용자로 인증한다.</li>\n<li>아래와 같이 ACL이 적용된 콘텐츠가 출력된다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/156498442-37706c2f-ff8f-445b-8c2b-0f6416888233.png\" alt=\"image\"></p>\n<h4 id=\"jwt-token-확인\"><a href=\"#jwt-token-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT Token 확인</h4>\n<ul>\n<li><a href=\"http://EXTERN-IP:8080/token\" target=\"_blank\" rel=\"noopener noreferrer\">http://EXTERN-IP:8080/token</a> 호출</li>\n<li>JWT Token String이 브라우저에 출력되는데 이를 복사한다.</li>\n<li>jwt.io 에 접속한다.</li>\n<li>나타나는 'Encoded' 영역에 붙여넣어 Token을 확인한다.</li>\n</ul>\n<h3 id=\"order-서비스-설정\"><a href=\"#order-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order 서비스 설정</h3>\n<h4 id=\"oauth2-resource-server-설정\"><a href=\"#oauth2-resource-server-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth2 Resource Server 설정</h4>\n<ul>\n<li>Order 마이크로서비스의 pom.xml을 통해 Resource Server 설정에 필요한 라이브러리(oauth2-resource-server)를 확인한다.</li>\n<li>application.yml에 oauth2-resource-server 설정을 주입한다.</li>\n<li>application.yml을 열어 주석 부분을 해제한다.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\">#  security:</span>\n<span class=\"token comment\">#    oauth2:</span>\n<span class=\"token comment\">#      resourceserver:</span>\n<span class=\"token comment\">#        jwt:</span>\n<span class=\"token comment\">#          jwk-set-uri: http://KEYCLOAK-EXTERNAL-IP:80/auth/realms/test-realm/protocol/openid-connect/certs</span></code></pre>\n<blockquote>\n<p> keycloak Endpoint 정보는 Realm에서 OIDC 링크를 통해 확인 가능하다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/156495160-c1dba952-ad18-45d8-b170-e2cfe377887d.png\" alt=\"image\"></p>\n<h4 id=\"resource-server-security-configuration\"><a href=\"#resource-server-security-configuration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Resource Server Security Configuration</h4>\n<ul>\n<li>security 패키지의 ResourceSecurityConfig.java 파일을 열어 기본 설정을 확인한다.</li>\n<li>메소드 레벨의 Spring security를 적용하기 위해 @EnableGlobalMethodSecurity을 설정한다.</li>\n<li>Gateway로부터 전달받은 JWT 토큰으로부터 Claim을 추출하여 Spring security에 Injection한다.</li>\n</ul>\n<h4 id=\"메소드-레벨-fine-grained-role-적용\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EB%A0%88%EB%B2%A8-fine-grained-role-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메소드 레벨 Fine grained Role 적용</h4>\n<ul>\n<li>Order 서비스의 Controller.java를 열어 Role 설정을 확인한다.</li>\n<li>\n<p>javax.annotation.security.RolesAllowed 를 활용해 메소드 레벨 ACL을 적용한다.</p>\n<blockquote>\n<p>Spring Security의 @Secured 로도 제어 가능하다.\nKeycloak > JWT Claim > Spring Security로 전달되었다.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"order-이미지-빌드-및-배포\"><a href=\"#order-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%B9%8C%EB%93%9C-%EB%B0%8F-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order 이미지 빌드 및 배포</h4>\n<pre class=\"language-text\"><code class=\"language-text\">cd order\nmvn package -B -DskipTests\n# &#39;username&#39;을 나의 Docker account로 수정\ndocker build -t username/order:v2 .\ndocker push username/order:v2\ncd order/kubernetes\nvi deployment.yml\n# 19라인의 이미지 이름을 빌드한 이름에 맞도록 수정/저장한다.\nkubectl apply -f ./\nkubectl get all</code></pre>\n<h4 id=\"order-서비스-acl-테스트\"><a href=\"#order-%EC%84%9C%EB%B9%84%EC%8A%A4-acl-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order 서비스 ACL 테스트</h4>\n<ul>\n<li>브라우저로 <a href=\"http://GATEWAY-EXTERNAL-IP:8080%EC%97%90\" target=\"_blank\" rel=\"noopener noreferrer\">http://GATEWAY-EXTERNAL-IP:8080에</a> 접속한다.</li>\n<li>접속 후, 인증한 User의 Role에 따른 응답을 확인해 본다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">http://GATEWAY-EXTERNAL-IP:8080/orders\nhttp://GATEWAY-EXTERNAL-IP:8080/orders/placeAnOrder\nhttp://GATEWAY-EXTERNAL-IP:8080/orders/orderManage</code></pre>\n<ul>\n<li>'/orders' 는 access_token이 있으면 접근가능하다.</li>\n<li>'/orders/placeAnOrder'에는 사용자 Role이 매핑되어 있어, 사용자 정보로 로그인해야 접속 가능하다.</li>\n<li>'/orders/orderManage'에는 관리자 Role이 매핑되어 있어, 관리자 정보로 로그인해야 접속 가능하다.</li>\n</ul>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"12번가 Mall에 토큰인증 적용하기","anchor":"#12번가-mall에-토큰인증-적용하기"},{"depth":1,"value":"12번가 Mall에 토큰인증 적용하기","anchor":"#12번가-mall에-토큰인증-적용하기-1"},{"depth":3,"value":"12st Mall에 토큰인증 적용","anchor":"#12st-mall에-토큰인증-적용"},{"depth":3,"value":"첫번째, Keycloak 설치하기","anchor":"#첫번째-keycloak-설치하기"},{"depth":4,"value":"Keycloak 서버 설정","anchor":"#keycloak-서버-설정"},{"depth":3,"value":"두번째, Keycloak 설정하기","anchor":"#두번째-keycloak-설정하기"},{"depth":4,"value":"1/5. Realm 추가","anchor":"#15-realm-추가"},{"depth":4,"value":"2/5. Client 등록","anchor":"#25-client-등록"},{"depth":4,"value":"3/5. Client의 OAuth2 설정을 추가한다.","anchor":"#35-client의-oauth2-설정을-추가한다"},{"depth":4,"value":"4/5. 권한(Role) 및 사용자 설정","anchor":"#45-권한role-및-사용자-설정"},{"depth":4,"value":"5/5. 로그인 페이지 설정","anchor":"#55-로그인-페이지-설정"},{"depth":3,"value":"세번째, 12st Mall에 SSO 적용하기","anchor":"#세번째-12st-mall에-sso-적용하기"},{"depth":3,"value":"Gateway 서비스 배포","anchor":"#gateway-서비스-배포"},{"depth":4,"value":"1/5. Gateway OAuth2 Client 설정","anchor":"#15-gateway-oauth2-client-설정"},{"depth":4,"value":"2/5. Gateway Security Configuration","anchor":"#25-gateway-security-configuration"},{"depth":4,"value":"3/5. Gateway에서 Backend 라우팅","anchor":"#35-gateway에서-backend-라우팅"},{"depth":4,"value":"4/5. Gateway 이미지 빌드 및 배포","anchor":"#45-gateway-이미지-빌드-및-배포"},{"depth":4,"value":"5/5. OAuth2 Client 확인","anchor":"#55-oauth2-client-확인"},{"depth":4,"value":"JWT Token 확인","anchor":"#jwt-token-확인"},{"depth":3,"value":"Order 서비스 설정","anchor":"#order-서비스-설정"},{"depth":4,"value":"OAuth2 Resource Server 설정","anchor":"#oauth2-resource-server-설정"},{"depth":4,"value":"Resource Server Security Configuration","anchor":"#resource-server-security-configuration"},{"depth":4,"value":"메소드 레벨 Fine grained Role 적용","anchor":"#메소드-레벨-fine-grained-role-적용"},{"depth":4,"value":"Order 이미지 빌드 및 배포","anchor":"#order-이미지-빌드-및-배포"},{"depth":4,"value":"Order 서비스 ACL 테스트","anchor":"#order-서비스-acl-테스트"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}}]}},"context":{}}