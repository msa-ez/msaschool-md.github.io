{"hash":"639846ab77f2d650b364be948c0c3d68be620b02","data":{"markdownPage":{"id":"b0df06500d5706c288a98bf0ce85574d","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도","description":"","path":"/operations/istio-resiliency-part1/","timeToRead":2,"content":"<h1 id=\"service-mesh-istio-를-통한-서비스-회복성-part1---타임아웃재시도\"><a href=\"#service-mesh-istio-%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%9A%8C%EB%B3%B5%EC%84%B1-part1---%ED%83%80%EC%9E%84%EC%95%84%EC%9B%83%EC%9E%AC%EC%8B%9C%EB%8F%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도</h1>\n<h3 id=\"istio-timeout--retry\"><a href=\"#istio-timeout--retry\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Istio Timeout &#x26; Retry</h3>\n<ul>\n<li>주문서비스와 배송서비스를 활용해 이스티오가 제공하는 Service Resiliency 기능 중, '타임아웃'과 '재시도'에 대해 실습한다. </li>\n<li>먼저, 카프카 설치 후 주문과 배송 마이크로서비스를 배포한다.</li>\n</ul>\n<h3 id=\"1-timeout\"><a href=\"#1-timeout\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. Timeout</h3>\n<h4 id=\"tutorial-네임스페이스에-istio-activation\"><a href=\"#tutorial-%EB%84%A4%EC%9E%84%EC%8A%A4%ED%8E%98%EC%9D%B4%EC%8A%A4%EC%97%90-istio-activation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>tutorial 네임스페이스에 Istio Activation</h4>\n<ul>\n<li>네임스페이스가 없을 시, 생성 후 실행</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">kubectl label namespace tutorial istio<span class=\"token operator\">-</span>injection<span class=\"token operator\">=</span>enabled <span class=\"token operator\">--</span>overwrite</code></pre>\n<h4 id=\"order-이미지-배포\"><a href=\"#order-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order 이미지 배포</h4>\n<ul>\n<li>터미널에서 order 프로젝트로 이동한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd order</code></pre>\n<ul>\n<li>order 이미지 생성과 푸쉬</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">mvn package\ndocker build -t [Image Registry]/order:latest .\ndocker push [Image Registry]/order:latest</code></pre>\n<ul>\n<li>푸쉬한 이미지 정보를 아래 YAML(spec.template.spec.containers[0].image)에 수정하여 배포한다.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl apply -f - <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n  apiVersion: apps/v1\n  kind: Deployment\n  metadata:\n    name: order\n    namespace: tutorial\n    labels:\n      app: order\n  spec:\n    replicas: 1\n    selector:\n      matchLabels:\n        app: order\n    template:\n      metadata:\n        labels:\n          app: order\n      spec:\n        containers:\n          - name: order\n            image: jinyoung/order:timeout\n            ports:\n              - containerPort: 8080\n            resources:\n              limits:\n                cpu: 500m\n              requests:\n                cpu: 200m\nEOF</span></code></pre>\n<h4 id=\"order-서비스-생성\"><a href=\"#order-%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order 서비스 생성</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl expose deploy order --port=8080 -n tutorial</code></pre>\n<h4 id=\"order-서비스-timeout-설정\"><a href=\"#order-%EC%84%9C%EB%B9%84%EC%8A%A4-timeout-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order 서비스 Timeout 설정</h4>\n<ul>\n<li>배포된 order 서비스에 타임아웃 임계치(3초)를 가지는 Istio Policy를 생성한다.</li>\n<li></li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl apply -f - <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n    apiVersion: networking.istio.io/v1alpha3\n    kind: VirtualService\n    metadata:\n      name: vs-order-network-rule\n      namespace: tutorial\n    spec:\n      hosts:\n      - order\n      http:\n      - route:\n        - destination:\n            host: order\n        timeout: 3s\nEOF</span></code></pre>\n<h4 id=\"siege를-통한-order-서비스-부하-생성-및-확인\"><a href=\"#siege%EB%A5%BC-%ED%86%B5%ED%95%9C-order-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%B6%80%ED%95%98-%EC%83%9D%EC%84%B1-%EB%B0%8F-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Siege를 통한 Order 서비스 부하 생성 및 확인</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create deploy siege --image=apexacme/siege-nginx -n tutorial\nkubectl exec -it [siege-Pod-Instance] -c siege-nginx -n tutorial -- /bin/bash</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">siege -c30 -t20S -v --content-type &quot;application/json&quot; &#39;http://order:8080/orders POST {&quot;productId&quot;: &quot;1001&quot;, &quot;qty&quot;:5}&#39;</code></pre>\n<h4 id=\"타임아웃timeout-확인\"><a href=\"#%ED%83%80%EC%9E%84%EC%95%84%EC%9B%83timeout-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>타임아웃(Timeout) 확인</h4>\n<ul>\n<li>Order 서비스에 설정된 Timeout 임계치를 초과하는 연결에 대해, 사이드카에서  차단(Fail-fast)되는 것이 확인</li>\n<li>(초기, 3초의 임계치 초과가 많은  이유는 Not-Bean들의 높은 클래스 로딩 레이턴시 때문)</li>\n<li>다시 한번, 동일 부하를 발생해 본다.</li>\n<li>이번엔 부하를 높여(-c50) 임계치를 상회하는 요청에 대한 Timeout(Fail-Fast) 기능을 확인한다.</li>\n</ul>\n<h3 id=\"2-retry\"><a href=\"#2-retry\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. Retry</h3>\n<h4 id=\"order-서비스에-retry-rule-추가\"><a href=\"#order-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-retry-rule-%EC%B6%94%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order 서비스에 'Retry' Rule 추가</h4>\n<pre class=\"language-bash\"><code class=\"language-bash\">kubectl apply -f - <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">EOF\n  apiVersion: networking.istio.io/v1alpha3\n  kind: VirtualService\n  metadata:\n    name: vs-order-network-rule\n    namespace: tutorial\n  spec:\n    hosts:\n    - order\n    http:\n    - route:\n      - destination:\n          host: order\n      timeout: 3s\n      retries:\n        attempts: 3\n        perTryTimeout: 2s\n        retryOn: 5xx,retriable-4xx,gateway-error,connect-failure,refused-stream\nEOF</span></code></pre>\n<h4 id=\"order-서비스-api-주문취소-실패-호출\"><a href=\"#order-%EC%84%9C%EB%B9%84%EC%8A%A4-api-%EC%A3%BC%EB%AC%B8%EC%B7%A8%EC%86%8C-%EC%8B%A4%ED%8C%A8-%ED%98%B8%EC%B6%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order 서비스 API (주문취소-실패) 호출</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it [siege-Pod-Instance] -c siege-nginx -n tutorial -- /bin/bash\n\nhttp http://order:8080/orders/ productId=1001 qty=5</code></pre>\n<ul>\n<li>주문서비스에 아래 '주문취소' 요청을 보내게 되면 배송서비스를 동기호출 하는데, 배송서비스가 다운되어 있어 '5xx' 오류코드를 수신한다. </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http DELETE http://order:8080/orders/(주문번호)</code></pre>\n<ul>\n<li>이때, 데이터 플레인에 설정된 정책에 따라 내부적으로 재시도가 일어난다.</li>\n</ul>\n<h4 id=\"재시도retry-결과확인\"><a href=\"#%EC%9E%AC%EC%8B%9C%EB%8F%84retry-%EA%B2%B0%EA%B3%BC%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>재시도(Retry) 결과확인</h4>\n<ul>\n<li>추척 서비스인 Jaeger에 접속(<a href=\"http://Jaeger\" target=\"_blank\" rel=\"noopener noreferrer\">http://Jaeger</a> EXTERNAL-IP:80)하여 , Retry가 발생하였는지 확인</li>\n<li>검색조건: Service : siege.tutorial</li>\n<li>화면 오른쪽 검색결과에서  총 3번의 추가 호출이 데이터플레인의 사이드카에서 요청되었음을 확인할 수 있다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/135967043-086c621e-c04a-4089-8432-e3db8a999a95.png\" alt=\"image\"></p>\n<ul>\n<li>해당 요청을 클릭하면 상세 요청 명세를 조회할 수 있다.\n<img src=\"https://user-images.githubusercontent.com/35618409/135967305-a6c93ef4-b2f1-48dd-8186-1ac20025b7f7.png\" alt=\"image\"></li>\n</ul>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도","anchor":"#service-mesh-istio-를-통한-서비스-회복성-part1---타임아웃재시도"},{"depth":3,"value":"Istio Timeout & Retry","anchor":"#istio-timeout--retry"},{"depth":3,"value":"1. Timeout","anchor":"#1-timeout"},{"depth":4,"value":"tutorial 네임스페이스에 Istio Activation","anchor":"#tutorial-네임스페이스에-istio-activation"},{"depth":4,"value":"Order 이미지 배포","anchor":"#order-이미지-배포"},{"depth":4,"value":"Order 서비스 생성","anchor":"#order-서비스-생성"},{"depth":4,"value":"Order 서비스 Timeout 설정","anchor":"#order-서비스-timeout-설정"},{"depth":4,"value":"Siege를 통한 Order 서비스 부하 생성 및 확인","anchor":"#siege를-통한-order-서비스-부하-생성-및-확인"},{"depth":4,"value":"타임아웃(Timeout) 확인","anchor":"#타임아웃timeout-확인"},{"depth":3,"value":"2. Retry","anchor":"#2-retry"},{"depth":4,"value":"Order 서비스에 'Retry' Rule 추가","anchor":"#order-서비스에-retry-rule-추가"},{"depth":4,"value":"Order 서비스 API (주문취소-실패) 호출","anchor":"#order-서비스-api-주문취소-실패-호출"},{"depth":4,"value":"재시도(Retry) 결과확인","anchor":"#재시도retry-결과확인"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}