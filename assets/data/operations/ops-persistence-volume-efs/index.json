{"hash":"06a886723e5e9e504c2e092ae07219a81ecc6278","data":{"markdownPage":{"id":"d5b4fe81ffbc42dc2caedcbf9a6ac452","title":"파일공유를 위한 NAS 스토리지 생성과 설정","description":"","path":"/operations/ops-persistence-volume-efs/","timeToRead":4,"content":"<h1 id=\"파일공유를-위한-nas-스토리지-생성과-설정\"><a href=\"#%ED%8C%8C%EC%9D%BC%EA%B3%B5%EC%9C%A0%EB%A5%BC-%EC%9C%84%ED%95%9C-nas-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>파일공유를 위한 NAS 스토리지 생성과 설정</h1>\n<h1 id=\"파일공유를-위한-nas-스토리지-생성과-설정-1\"><a href=\"#%ED%8C%8C%EC%9D%BC%EA%B3%B5%EC%9C%A0%EB%A5%BC-%EC%9C%84%ED%95%9C-nas-%EC%8A%A4%ED%86%A0%EB%A6%AC%EC%A7%80-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%84%A4%EC%A0%95-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>파일공유를 위한 NAS 스토리지 생성과 설정</h1>\n<h3 id=\"여러-서비스간-파일공유를-위한-nfs-생성과-설정\"><a href=\"#%EC%97%AC%EB%9F%AC-%EC%84%9C%EB%B9%84%EC%8A%A4%EA%B0%84-%ED%8C%8C%EC%9D%BC%EA%B3%B5%EC%9C%A0%EB%A5%BC-%EC%9C%84%ED%95%9C-nfs-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>여러 서비스간 파일공유를 위한 NFS 생성과 설정</h3>\n<p>이번 랩에서는 여러 마이크로서비스간 파일 공유를 위해 일반적으로 NAS(Network Attached Storage)로 알려진 NFS 파일시스템을 AWS 클라우드에 생성하고, 이를 주문서비스에서 마운트시켜 스토리지로 활용하는 예제를 실습한다.</p>\n<h4 id=\"storageclass-dynamic-pv-provisioning-확인\"><a href=\"#storageclass-dynamic-pv-provisioning-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>StorageClass (Dynamic PV Provisioning) 확인</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get storageclass</code></pre>\n<ul>\n<li>아래와 같은 결과가 출력되었는지 확인해 줍니다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">NAME            PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE\ngp2 (default)   kubernetes.io/aws-ebs   Delete          WaitForFirstConsumer   false                  2d1h</code></pre>\n<h3 id=\"1-관리콘솔을-통한-파일시스템-생성\"><a href=\"#1-%EA%B4%80%EB%A6%AC%EC%BD%98%EC%86%94%EC%9D%84-%ED%86%B5%ED%95%9C-%ED%8C%8C%EC%9D%BC%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. 관리콘솔을 통한 파일시스템 생성</h3>\n<p>NFS 파일시스템은 AWS CLI(<a href=\"https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/efs-csi.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/efs-csi.html</a>)로도 가능하나 본랩에서는 교재를 참조하여 관리콘솔을 통해 생성해 본다. </p>\n<p>파일시스템 생성 후, 아래 순서에 따라 차례대로 EFS 프로비저너를 등록한다.</p>\n<h3 id=\"2-프로비저너-등록-및-볼륨-생성\"><a href=\"#2-%ED%94%84%EB%A1%9C%EB%B9%84%EC%A0%80%EB%84%88-%EB%93%B1%EB%A1%9D-%EB%B0%8F-%EB%B3%BC%EB%A5%A8-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. 프로비저너 등록 및 볼륨 생성</h3>\n<h4 id=\"efs-연계를-위한-eks-계정-생성-및-role-설정\"><a href=\"#efs-%EC%97%B0%EA%B3%84%EB%A5%BC-%EC%9C%84%ED%95%9C-eks-%EA%B3%84%EC%A0%95-%EC%83%9D%EC%84%B1-%EB%B0%8F-role-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EFS 연계를 위한 EKS 계정 생성 및 Role 설정</h4>\n<ul>\n<li>ServerAccount 생성</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: efs-provisioner\nEOF\t</code></pre>\n<h4 id=\"서비스-계정efs-provisioner에-권한rbac-설정\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B3%84%EC%A0%95efs-provisioner%EC%97%90-%EA%B6%8C%ED%95%9Crbac-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 계정(efs-provisioner)에 권한(rbac) 설정</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f https://raw.githubusercontent.com/event-storming/container-orchestration/master/yaml/volume/aws/efs-rbac.yaml</code></pre>\n<h4 id=\"eks에-efs-프로비저너-설치\"><a href=\"#eks%EC%97%90-efs-%ED%94%84%EB%A1%9C%EB%B9%84%EC%A0%80%EB%84%88-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EKS에 EFS 프로비저너 설치</h4>\n<ul>\n<li>아래 YAML 을 복사하여 efs-provisioner.yaml로 붙여넣기 한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: efs-provisioner\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  selector:\n    matchLabels:\n      app: efs-provisioner\n  template:\n    metadata:\n      labels:\n        app: efs-provisioner\n    spec:\n      serviceAccount: efs-provisioner\n      containers:\n        - name: efs-provisioner\n          image: quay.io/external_storage/efs-provisioner:latest\n          env:\n            - name: FILE_SYSTEM_ID\n              value: # {efs system id}\n            - name: AWS_REGION\n              value: # {region code}\n            - name: PROVISIONER_NAME\n              value: my-aws.com/aws-efs\n          volumeMounts:\n            - name: pv-volume\n              mountPath: /persistentvolumes\n      volumes:\n        - name: pv-volume\n          nfs:\n            server: # {efs dns server name}\n            path: /</code></pre>\n<ul>\n<li>\n<p>이 중, FILE_SYSTEM_ID, AWS_REGION, volumes.nfs.server 정보를 커스터마이징한다.</p>\n<blockquote>\n<p>value: #<code>{efs system id}</code> => 파일 시스템 ID\nvalue: # <code>{aws region}</code> => EKS 리전\nserver: # <code>{file-system-id}</code>.efs.<code>{aws-region}</code>.amazonaws.com</p>\n</blockquote>\n</li>\n<li>NFS 생성을 위한 Provisioner를 설치한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f efs-provisioner.yaml</code></pre>\n<ul>\n<li>생성된 Provisioner를 StorageClass에  등록</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt;EOF\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: aws-efs\nprovisioner: my-aws.com/aws-efs\nEOF</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get sc</code></pre>\n<ul>\n<li>아래와 같은 결과가 출력되었는지 확인해 줍니다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">NAME            PROVISIONER             RECLAIMPOLICY   VOLUMEBINDINGMODE      ALLOWVOLUMEEXPANSION   AGE\naws-efs         my-aws.com/aws-efs      Delete          Immediate              false                  4s\ngp2 (default)   kubernetes.io/aws-ebs   Delete          WaitForFirstConsumer   false                  2d2h</code></pre>\n<h4 id=\"efs-provisioner를-사용하는-pvc-생성\"><a href=\"#efs-provisioner%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-pvc-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>EFS Provisioner를 사용하는 pvc 생성</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt;EOF\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: aws-efs\n  labels:\n    app: test-pvc\nspec:\n  accessModes:\n  - ReadWriteMany\n  resources:\n    requests:\n      storage: 1Mi\n  storageClassName: aws-efs\n\tEOF</code></pre>\n<ul>\n<li>\n<p>아래와 같은 결과가 출력되었는지 확인해 줍니다.</p>\n<blockquote>\n<p>persistentvolumeclaim/aws-efs created</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"pvc-조회\"><a href=\"#pvc-%EC%A1%B0%ED%9A%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>pvc 조회</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl get pvc</code></pre>\n<ul>\n<li>아래와 같은 결과가 출력되었는지 확인해 줍니다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">NAME      STATUS    VOLUME   CAPACITY   ACCESS MODES   STORAGECLASS   AGE\naws-efs   Bound                                        aws-efs        59s</code></pre>\n<h4 id=\"nfs-볼륨을-가지는-주문마이크로서비스-배포\"><a href=\"#nfs-%EB%B3%BC%EB%A5%A8%EC%9D%84-%EA%B0%80%EC%A7%80%EB%8A%94-%EC%A3%BC%EB%AC%B8%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>NFS 볼륨을 가지는 주문마이크로서비스 배포</h4>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl apply -f - &lt;&lt;EOF\nkind: Pod\napiVersion: v1\nmetadata:\n  name: order\nspec:\n  containers:\n  - name: order\n    image: ghcr.io/acmexii/order-liveness:latest\n    resources:\n      requests:\n        cpu: 100m\n        memory: 128Mi\n      limits:\n        cpu: 250m\n        memory: 256Mi\n    volumeMounts:\n    - mountPath: &quot;/mnt/data&quot;\n      name: volume\n  volumes:\n    - name: volume\n      persistentVolumeClaim:\n        claimName: aws-efs\nEOF</code></pre>\n<ul>\n<li>배포 후 주문 컨테이너에 접속하여 제대로 파일시스템이 마운트되었는지 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl exec -it [ORDER POD 객체] -- /bin/sh\nls /mnt/data</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"파일공유를 위한 NAS 스토리지 생성과 설정","anchor":"#파일공유를-위한-nas-스토리지-생성과-설정"},{"depth":1,"value":"파일공유를 위한 NAS 스토리지 생성과 설정","anchor":"#파일공유를-위한-nas-스토리지-생성과-설정-1"},{"depth":3,"value":"여러 서비스간 파일공유를 위한 NFS 생성과 설정","anchor":"#여러-서비스간-파일공유를-위한-nfs-생성과-설정"},{"depth":4,"value":"StorageClass (Dynamic PV Provisioning) 확인","anchor":"#storageclass-dynamic-pv-provisioning-확인"},{"depth":3,"value":"1. 관리콘솔을 통한 파일시스템 생성","anchor":"#1-관리콘솔을-통한-파일시스템-생성"},{"depth":3,"value":"2. 프로비저너 등록 및 볼륨 생성","anchor":"#2-프로비저너-등록-및-볼륨-생성"},{"depth":4,"value":"EFS 연계를 위한 EKS 계정 생성 및 Role 설정","anchor":"#efs-연계를-위한-eks-계정-생성-및-role-설정"},{"depth":4,"value":"서비스 계정(efs-provisioner)에 권한(rbac) 설정","anchor":"#서비스-계정efs-provisioner에-권한rbac-설정"},{"depth":4,"value":"EKS에 EFS 프로비저너 설치","anchor":"#eks에-efs-프로비저너-설치"},{"depth":4,"value":"EFS Provisioner를 사용하는 pvc 생성","anchor":"#efs-provisioner를-사용하는-pvc-생성"},{"depth":4,"value":"pvc 조회","anchor":"#pvc-조회"},{"depth":4,"value":"NFS 볼륨을 가지는 주문마이크로서비스 배포","anchor":"#nfs-볼륨을-가지는-주문마이크로서비스-배포"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}}]}},"context":{}}