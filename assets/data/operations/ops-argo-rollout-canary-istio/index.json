{"hash":"70daf0702732bebfabe4090caf1cfcfa2eddd102","data":{"markdownPage":{"id":"df72a796aec00dae488e3d13129d2c88","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포","description":"","path":"/operations/ops-argo-rollout-canary-istio/","timeToRead":3,"content":"<h1 id=\"gitops-argo-rollout-와-istio-를-통한-카나리-배포\"><a href=\"#gitops-argo-rollout-%EC%99%80-istio-%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%B9%B4%EB%82%98%EB%A6%AC-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포</h1>\n<ul>\n<li>ops-argo-rollout-canary-istio</li>\n<li>[운영] Argo Rollout 와 Istio 를 통한 카나리 배포</li>\n<li>Argo Rollout 과 Istio 의 Traffic Management 를 통하여 안정적인 카나리아 배포를 실습한다.</li>\n</ul>\n<hr>\n<h1 id=\"argo-rollout-을-기반한-카나리-배포\"><a href=\"#argo-rollout-%EC%9D%84-%EA%B8%B0%EB%B0%98%ED%95%9C-%EC%B9%B4%EB%82%98%EB%A6%AC-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Argo Rollout 을 기반한 카나리 배포</h1>\n<iframe width=\"1155\" height=\"722\" src=\"https://www.youtube.com/embed/KDrDEMfWygo\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n<h2 id=\"argo-rollout-설치\"><a href=\"#argo-rollout-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Argo Rollout 설치</h2>\n<p>터미널에 아래를 입력하여 argo rollout을 설치한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl create ns argo-rollouts\n\nkubectl apply -n argo-rollouts -f https://github.com/argoproj/argo-rollouts/releases/download/v1.0.0-rc1/install.yaml</code></pre>\n<h2 id=\"argo-rollout-객체의-생성\"><a href=\"#argo-rollout-%EA%B0%9D%EC%B2%B4%EC%9D%98-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Argo Rollout 객체의 생성</h2>\n<p>다음 내용으로 rollout.yaml 파일을 생성한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: example-rollout\nspec:\n  replicas: 10\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1.15.4\n        ports:\n        - containerPort: 80\n  minReadySeconds: 30\n  revisionHistoryLimit: 3\n  strategy:\n    canary: #Indicates that the rollout should use the Canary strategy\n      maxSurge: &quot;25%&quot;\n      maxUnavailable: 0\n      steps:\n      - setWeight: 10\n      - pause:\n          duration: 1h # 1 hour\n      - setWeight: 20\n      - pause: {} # pause indefinitely</code></pre>\n<h2 id=\"argo-cli--dashboard-의-설치\"><a href=\"#argo-cli--dashboard-%EC%9D%98-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Argo CLI / Dashboard 의 설치</h2>\n<p>argo CLI 를 우선 설치:</p>\n<pre class=\"language-text\"><code class=\"language-text\">curl -LO https://github.com/argoproj/argo-rollouts/releases/download/v1.0.0-rc1/kubectl-argo-rollouts-linux-amd64\n\nchmod +x ./kubectl-argo-rollouts-linux-amd64\n\nmv ./kubectl-argo-rollouts-linux-amd64 /usr/local/bin/kubectl-argo-rollouts\n\nkubectl argo rollouts version  # 1.0.0 으로 확인되어야 함</code></pre>\n<p>Argo CLI로 모니터링하기:</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl argo rollouts get rollout example-rollout --watch</code></pre>\n<p>Argo Dashboard 웹 서비스를 로컬에 올린다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl argo rollouts dashboard</code></pre>\n<p>MSA Easy 에서 열수있는 포트는 808x 대만 지원되므로 iptables 명령으로 포트포워딩 한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">iptables -A PREROUTING -t nat -i eth0 -p tcp --dport 8080 -j REDIRECT --to-port 3100</code></pre>\n<blockquote>\n<p>iptables 설치:\napt-get update\napt-get install iptables</p>\n</blockquote>\n<p>Labs > 포트열기 > 8080 으로 대시보드를 열어 접속해본다.</p>\n<p><img src=\"https://argoproj.github.io/argo-rollouts/dashboard/rollouts-list.png\" alt=\"Argo Dashboard\"></p>\n<h1 id=\"istio-를-통한-카나리-배포\"><a href=\"#istio-%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%B9%B4%EB%82%98%EB%A6%AC-%EB%B0%B0%ED%8F%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Istio 를 통한 카나리 배포</h1>\n<p>다음의 Rollout 은 Virtual Service 의 Traffic 배분을 매 10초 간격으로 조정하면서 카나리 배포를 실시한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">apiVersion: argoproj.io/v1alpha1\nkind: Rollout\nmetadata:\n  name: rollout-order\nspec:\n  replicas: 5\n  strategy:\n    canary:\n      trafficRouting:\n        istio:\n          virtualService: \n            name: rollout-vsvc        # required\n            routes:\n            - primary                 # required\n          destinationRule:\n            name: rollout-destrule    # required\n            canarySubsetName: canary  # required\n            stableSubsetName: stable  # required\n      steps:\n      - setWeight: 5\n      - pause:\n          duration: 10s\n      - setWeight: 20\n      - pause:\n          duration: 10s\n      - setWeight: 40\n      - pause:\n          duration: 10s\n      - setWeight: 60\n      - pause:\n          duration: 10s\n      - setWeight: 80\n      - pause:\n          duration: 10s\n\n  revisionHistoryLimit: 2\n  selector:\n    matchLabels:\n      app: order\n  template:\n    metadata:\n      labels:\n        app: order\n    spec:\n      containers:\n      - name: order\n        image: &quot;jinyoung/app:blue&quot;\n        ports:\n        - name: http\n          containerPort: 80\n          protocol: TCP\n        resources:\n          requests:\n            memory: 32Mi\n            cpu: 5m\n\n--- \napiVersion: &quot;networking.istio.io/v1alpha3&quot;\nkind: &quot;Gateway&quot;\nmetadata: \n  name: &quot;shopping-gateway&quot;\nspec: \n  selector: \n    istio: &quot;ingressgateway&quot;\n  servers: \n    - \n      port: \n        number: 80\n        name: &quot;http&quot;\n        protocol: &quot;HTTP&quot;\n      hosts: \n        - &quot;*&quot;\n---\n  apiVersion: &quot;v1&quot;\n  kind: &quot;Service&quot;\n  metadata: \n    name: &quot;order&quot;\n    labels: \n      app: &quot;order&quot;\n  spec: \n    ports: \n      - \n        port: 80\n        targetPort: 80\n    selector: \n      app: &quot;order&quot;\n    type: &quot;LoadBalancer&quot;\n\n--- \n\napiVersion: networking.istio.io/v1alpha3\nkind: VirtualService\nmetadata:\n  name: rollout-vsvc\nspec:\n  gateways:\n  - shopping-gateway\n  hosts:\n  - &quot;*&quot;\n  http:\n  - name: primary       # referenced in canary.trafficRouting.istio.virtualService.routes\n    match: \n    - uri: \n        exact: &quot;/orders&quot;\n    rewrite:\n      uri: &quot;/&quot;\n    route:\n    - destination:\n        host: order\n        subset: stable  # referenced in canary.trafficRouting.istio.destinationRule.stableSubsetName\n      weight: 100\n    - destination:\n        host: order\n        subset: canary  # referenced in canary.trafficRouting.istio.destinationRule.canarySubsetName\n      weight: 0\n\n\n---\n\napiVersion: networking.istio.io/v1alpha3\nkind: DestinationRule\nmetadata:\n  name: rollout-destrule\nspec:\n  host: order\n  subsets:\n  - name: canary   # referenced in canary.trafficRouting.istio.destinationRule.canarySubsetName\n    labels:        # labels will be injected with canary rollouts-pod-template-hash value\n      app: order\n  - name: stable   # referenced in canary.trafficRouting.istio.destinationRule.stableSubsetName\n    labels:        # labels will be injected with canary rollouts-pod-template-hash value\n      app: order</code></pre>\n<p>위의 파일을 적용하고, 다음의 명령들을 통해 배포, 롤백, 다시 배포 (빠르게), 그리고 다시 롤백 (빠르게) 하는 방법을 수행한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\"># 반영\nkubectl apply -f canary.yaml \n\n# 새버전 반영\nkubectl argo rollouts set image rollout-order order=nginx\n\n# 롤백 (카나리 롤백)\nkubectl argo rollouts undo rollout-order\n\n# 다시반영 (빠르게 - 카나리 off)\nkubectl argo rollouts set image rollout-order order=jinyoung/app:blue --full\nkubectl argo rollouts promote rollout-order --full\n\n# 다시 롤백 (빠르게 - 카나리 off)\nkubectl argo rollouts undo rollout-order\nkubectl argo rollouts promote rollout-order --full</code></pre>\n<p>진행과정을 모니터링하기 위해 위의 GUI 대시보드를 관찰하여도 되고, 다음의 커맨드를 통해 모니터링 할 수 있다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">kubectl argo rollouts get rollout rollout-order --watch</code></pre>\n<p>참고기사:  <a href=\"https://dev.to/stack-labs/canary-deployment-with-argo-cd-and-istio-406d\" target=\"_blank\" rel=\"noopener noreferrer\">https://dev.to/stack-labs/canary-deployment-with-argo-cd-and-istio-406d</a></p>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" Argo Rollout 와 Istio 를 통한 카나리 배포","anchor":"#gitops-argo-rollout-와-istio-를-통한-카나리-배포"},{"depth":1,"value":"Argo Rollout 을 기반한 카나리 배포","anchor":"#argo-rollout-을-기반한-카나리-배포"},{"depth":2,"value":"Argo Rollout 설치","anchor":"#argo-rollout-설치"},{"depth":2,"value":"Argo Rollout 객체의 생성","anchor":"#argo-rollout-객체의-생성"},{"depth":2,"value":"Argo CLI / Dashboard 의 설치","anchor":"#argo-cli--dashboard-의-설치"},{"depth":1,"value":"Istio 를 통한 카나리 배포","anchor":"#istio-를-통한-카나리-배포"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}}]}},"context":{}}