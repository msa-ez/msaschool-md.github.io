{"hash":"06a886723e5e9e504c2e092ae07219a81ecc6278","data":{"markdownPage":{"id":"9e21e78ffe9de900173c8fcd7b234cc2","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added","description":"","path":"/development/pubsub-deadline/","timeToRead":5,"content":"<h1 id=\"pubsub-방식의-연동---choreography-with-deadline-added\"><a href=\"#pubsub-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%97%B0%EB%8F%99---choreography-with-deadline-added\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pub/Sub 방식의 연동 - Choreography with Deadline added</h1>\n<h1 id=\"pubsub-방식의-연동---choreography-with-deadline-added-1\"><a href=\"#pubsub-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%97%B0%EB%8F%99---choreography-with-deadline-added-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pub/Sub 방식의 연동 - Choreography with Deadline added</h1>\n<h2 id=\"12st-mall에-데드라인-추가-적용\"><a href=\"#12st-mall%EC%97%90-%EB%8D%B0%EB%93%9C%EB%9D%BC%EC%9D%B8-%EC%B6%94%EA%B0%80-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>12st Mall에 데드라인 추가 적용</h2>\n<ul>\n<li>12st Mall 주문처리 프로세스에 데드라인(Deadline)을 적용하여, 시간 내 주문건이 최종 처리(재고 차감)되어야 하는 시나리오를 추가한다.</li>\n<li>데드라인 시간 내에 처리되지 못한 주문건은 유효하지 않은 주문으로 보상처리 되어야 하는 대상이다.</li>\n<li>앞서, 중복실행 방지가 적용된 코드에 더해 Event Expiration을 추가적으로 적용해 본다.</li>\n</ul>\n<h3 id=\"gitpod-환경-구성\"><a href=\"#gitpod-%ED%99%98%EA%B2%BD-%EA%B5%AC%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GitPod 환경 구성</h3>\n<ul>\n<li>모델을 내 리파지토리로 복사(Fork)한다.</li>\n<li>CODE > Code Preview 메뉴로 코드 창을 오픈한다.</li>\n<li>GitHub 메뉴 팝업에서 코드를 Fork하여 생성한다.\n<img src=\"https://user-images.githubusercontent.com/108639319/204209954-0f47ea0f-0ca5-4e0a-9c3e-226ad4eabb37.png\" alt=\"image\"></li>\n<li>'Open GitPod'를 클릭하여 코드를 로드한다.</li>\n</ul>\n<h3 id=\"deadline-마이크로서비스-확인\"><a href=\"#deadline-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deadline 마이크로서비스 확인</h3>\n<h4 id=\"deadlinejava\"><a href=\"#deadlinejava\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deadline.java</h4>\n<ul>\n<li>데드라인 서비스는 주문이 발생되면, 주문번호와 주문시간, 만기시간(주문시간 + deadline Duration)을 스케줄한다.</li>\n<li>기본 deadline Duration은 5초로 설정되어 있다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    public static void schedule(OrderCreated orderCreated){\n        Deadline deadline = new Deadline();\n        deadline.setOrderId(orderCreated.getId());\n        deadline.setStartedTime(new Date(orderCreated.getTimestamp()));\n\n        Date deadlineDate = new Date(deadline.getStartedTime().getTime() + deadlineDurationInMS);\n        deadline.setDeadline(deadlineDate);\n        \n        repository().save(deadline);\n    }</code></pre>\n<h4 id=\"policyhandlerjava\"><a href=\"#policyhandlerjava\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>PolicyHandler.java</h4>\n<ul>\n<li>5초 주기로 Event Expiration을 체크한다. </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    // @Scheduled(fixedRate = 5000) //FOCUS: every 5 seconds. 5초에 한번씩\n    public void checkDeadline(){\n        Deadline.sendDeadlineEvents();\n    }</code></pre>\n<h4 id=\"deadlinejava-1\"><a href=\"#deadlinejava-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deadline.java</h4>\n<ul>\n<li>Expired된 주문 건에 대해서는 DeadlineReached 이벤트를 퍼블리시한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    public static void sendDeadlineEvents(){\n        repository().findAll().forEach(deadline -&gt;{\n            Date now = new Date();\n            \n            if(now.after(deadline.getDeadline())){\n             \tnew DeadlineReached(deadline).publishAfterCommit();\n                repository().delete(deadline);\n            }\n        });\n    }</code></pre>\n<h3 id=\"deadline이-적용된-서비스-테스트\"><a href=\"#deadline%EC%9D%B4-%EC%A0%81%EC%9A%A9%EB%90%9C-%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Deadline이 적용된 서비스 테스트</h3>\n<h4 id=\"topic-리스닝\"><a href=\"#topic-%EB%A6%AC%EC%8A%A4%EB%8B%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Topic 리스닝</h4>\n<ul>\n<li>새로운 터미널에서 kafka 컨슈머로 토픽을 모니터링한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose exec -it kafka /bin/bash\ncd /bin\n./kafka-console-consumer --bootstrap-server localhost:9092 --topic choreography.with.deadline</code></pre>\n<ul>\n<li>배송서비스 시작전에 Expiration을 초과하는 강제 Delay를 발생시킨다.</li>\n<li>Delivery.java 37~40 라인을 주석해제 한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">        if(&quot;1&quot;.equals(orderCreated.getProductId()))\n        try{\n            Thread.sleep(10000);\n        }catch(Exception e){}</code></pre>\n<h4 id=\"서비스-실행-데이터-초기화\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%8B%A4%ED%96%89-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%B4%88%EA%B8%B0%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 실행, 데이터 초기화</h4>\n<ul>\n<li>데드라인, 주문, 배송, 상품 서비스를 모두 실행하고 초기 데이터를 입력한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd deadline\nmvn clean spring-boot:run\n\ncd order\nmvn clean spring-boot:run\n\ncd delivery \nmvn clean spring-boot:run\n\ncd product \nmvn clean spring-boot:run\n\nhttp :8083/inventories productName=TV stock=1000   # id=1\nhttp :8083/inventories productName=RADIO stock=1000  # id=2</code></pre>\n<h4 id=\"데드라인-동작-확인\"><a href=\"#%EB%8D%B0%EB%93%9C%EB%9D%BC%EC%9D%B8-%EB%8F%99%EC%9E%91-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>데드라인 동작 확인</h4>\n<ul>\n<li>데드라인을 초과하는 주문을 발행해 본다. (1번 상품은 데드라인을 초과하는 10초의 강제 Delay를 탄다)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders customerId=1 productId=1 productName=TV qty=10</code></pre>\n<ul>\n<li>\n<p>카프카 모니터링 결과</p>\n<blockquote>\n<ul>\n<li>OrderCreated 이벤트 Push 후, 10초 대기 중,</li>\n<li>DeadlineReached 이벤트가 먼저 채널에 Push</li>\n<li>OrderRejected 이벤트가 리액티브하게 반응</li>\n<li>delivery 서비스에 멱등성 처리가 적용되어 있어 Compensation은 일어나지 않음</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>\n<p>분석  </p>\n<blockquote>\n<ul>\n<li>주문 이후, 데드라인 도래에 따라 Order Reject Compensation이 예상대로 실행</li>\n<li>http :8083/inventories/1  # 상품 재고도 Compensation에 따라 정상 수치로 복원</li>\n<li>Expired Event에 대해서는 Redundency 로직을 수행하지 않도록 조치 필요 </li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>Delivery.java 42~43 라인을 주석해제하여 Redundency 로직을 스킵한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">Date now = new Date();\nif(orderCreated.getTimestamp() + deadlineDurationInMS &lt; now.getTime()) return;  </code></pre>\n<ul>\n<li>Delivery 서비스를 재기동하고 다시 1건의 주문을 넣어본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd delivery \nmvn clean spring-boot:run\n\n\nhttp :8081/orders customerId=1 productId=1 productName=TV qty=10</code></pre>\n<ul>\n<li>\n<p>카프카 모니터링 결과</p>\n<blockquote>\n<ul>\n<li>OrderCreated 이벤트 Push 후, 10초 대기 중,</li>\n<li>DeadlineReached 이벤트가 먼저 채널에 Push</li>\n<li>OrderRejected 이벤트가 리액티브하게 반응</li>\n<li>delivery 서비스에 멱등성 처리가 적용되어 있어 Compensation은 일어나지 않음</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"배송서비스-down-테스트\"><a href=\"#%EB%B0%B0%EC%86%A1%EC%84%9C%EB%B9%84%EC%8A%A4-down-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>배송서비스 Down 테스트</h4>\n<ul>\n<li>Delivery.java 37~40 라인을 다시 주석처리 후 서비스를 다운한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    // if(&quot;1&quot;.equals(orderCreated.getProductId()))\n    // try{\n    //    Thread.sleep(10000);\n    // }catch(Exception e){}</code></pre>\n<ul>\n<li>주문을 넣고 DeadlineReached 이벤트 퍼블리쉬 확인 후, 배송 서비스를 기동해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders customerId=1 productId=1 productName=TV qty=10\nhttp :8081/orders customerId=1 productId=2 productName=TV qty=10\n\ncd delivery \nmvn clean spring-boot:run</code></pre>\n<ul>\n<li>배송서비스가 기동되어도 Redundency한 이벤트 로직이 처리되지 않음을 Kafka 로그를 통해 알 수 있다.</li>\n</ul>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Pub/Sub 방식의 연동 - Choreography with Deadline added","anchor":"#pubsub-방식의-연동---choreography-with-deadline-added"},{"depth":1,"value":"Pub/Sub 방식의 연동 - Choreography with Deadline added","anchor":"#pubsub-방식의-연동---choreography-with-deadline-added-1"},{"depth":2,"value":"12st Mall에 데드라인 추가 적용","anchor":"#12st-mall에-데드라인-추가-적용"},{"depth":3,"value":"GitPod 환경 구성","anchor":"#gitpod-환경-구성"},{"depth":3,"value":"Deadline 마이크로서비스 확인","anchor":"#deadline-마이크로서비스-확인"},{"depth":4,"value":"Deadline.java","anchor":"#deadlinejava"},{"depth":4,"value":"PolicyHandler.java","anchor":"#policyhandlerjava"},{"depth":4,"value":"Deadline.java","anchor":"#deadlinejava-1"},{"depth":3,"value":"Deadline이 적용된 서비스 테스트","anchor":"#deadline이-적용된-서비스-테스트"},{"depth":4,"value":"Topic 리스닝","anchor":"#topic-리스닝"},{"depth":4,"value":"서비스 실행, 데이터 초기화","anchor":"#서비스-실행-데이터-초기화"},{"depth":4,"value":"데드라인 동작 확인","anchor":"#데드라인-동작-확인"},{"depth":4,"value":"배송서비스 Down 테스트","anchor":"#배송서비스-down-테스트"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}}]}},"context":{}}