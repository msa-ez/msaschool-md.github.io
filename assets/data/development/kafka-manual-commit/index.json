{"hash":"82edfc9c503203a4b89aaf7ee02c1b0930a87be2","data":{"markdownPage":{"id":"9d8ef1ddf7ceeab16690f0d3eb5f2b84","title":"Kafka 수동커밋","description":"","path":"/development/kafka-manual-commit/","timeToRead":1,"content":"<h1 id=\"kafka-수동커밋\"><a href=\"#kafka-%EC%88%98%EB%8F%99%EC%BB%A4%EB%B0%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 수동커밋</h1>\n<h3 id=\"kafka-수동-커밋\"><a href=\"#kafka-%EC%88%98%EB%8F%99-%EC%BB%A4%EB%B0%8B\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 수동 커밋</h3>\n<h4 id=\"kafka-커밋모드\"><a href=\"#kafka-%EC%BB%A4%EB%B0%8B%EB%AA%A8%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 커밋모드</h4>\n<ul>\n<li>Kafka default 커밋모드는 autoCommit 이다.</li>\n<li>Kafka 커밋모드가 auto(default) 일 때 Partition이 증가해 Rebalancing이 발생하면 커밋되지 않은 Message들은 자칫 컨슈머가 다시 Subscribe하여 중복처리할 수도 있다. </li>\n</ul>\n<h4 id=\"kafka-커밋모드-변경\"><a href=\"#kafka-%EC%BB%A4%EB%B0%8B%EB%AA%A8%EB%93%9C-%EB%B3%80%EA%B2%BD\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 커밋모드 변경</h4>\n<ul>\n<li>autoCommit 설정을 false로 변경하여 수동커밋 모드로 변경한다. </li>\n<li>Product 마이크로서비스 application.yml 화일의 cloud.stream.kafka 하위의 설정을 주석해제하고 저장한다.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">bindings</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">event-in</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">consumer</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">autoCommitOffset</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> </code></pre>\n<ul>\n<li>Order와 Product 마이크로서비스를 기동한다.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> order\nmvn spring-boot:run</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> product\nmvn spring-boot:run</code></pre>\n<blockquote>\n<p>현재, kafkatest 토픽의 파티션이 2개이므로, 실행한 Product 서비스 Console에 2개의 파티션이 할당되었음을 볼 수 있다.\npartitions assigned: [kafkatest-0, kafkatest-1]</p>\n</blockquote>\n<h4 id=\"lag-확인\"><a href=\"#lag-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lag 확인</h4>\n<ul>\n<li>Order 서비스에 포스팅하여 Kafka Event를 발행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST :8081/orders message=1st-Order\nhttp POST :8081/orders message=2nd-Order</code></pre>\n<ul>\n<li>Product 마이크로서비스는 메시지를 소모(처리)했음에도 불구하고 Partition에서의 OffSet이 증가하지 않아 Lagging이 발생하고 있다.</li>\n<li>Partition Lagging 확인</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">$kafka_home/bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group product --describe</code></pre>\n<h4 id=\"manual-commit\"><a href=\"#manual-commit\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Manual Commit</h4>\n<ul>\n<li>Product 서비스에서 수동으로 ACK를 날려 Manual Commit을 해준다. </li>\n<li>Product 서비스의 PolicyHandler.java에서 아래 메서드의 블럭주석을 해제하고 기존 메서드를 블럭주석 처리한다. </li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaProcessor</span><span class=\"token punctuation\">.</span>INPUT<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">wheneverOrderPlaced_PrintMessage</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">OrderPlaced</span> orderPlaced<span class=\"token punctuation\">,</span> <span class=\"token annotation punctuation\">@Header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaHeaders</span><span class=\"token punctuation\">.</span>ACKNOWLEDGMENT<span class=\"token punctuation\">)</span> <span class=\"token class-name\">Acknowledgment</span> acknowledgment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Entering listener: \"</span> <span class=\"token operator\">+</span> orderPlaced<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Entering listener: \"</span> <span class=\"token operator\">+</span> orderPlaced<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        acknowledgment<span class=\"token punctuation\">.</span><span class=\"token function\">acknowledge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Product 마이크로서비스를 재시작한다. </li>\n<li>Console 로그를 조회하면 메시지가 재처리한 것이 확인된다.</li>\n<li>Order 서비스에 포스팅하여 Kafka Event를 추가 발행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST :8081/orders message=3rd-Order\nhttp POST :8081/orders message=4th-Order</code></pre>\n<h4 id=\"lag-확인-1\"><a href=\"#lag-%ED%99%95%EC%9D%B8-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Lag 확인</h4>\n<ul>\n<li>\n<ul>\n<li>Partition Lagging을 재확인하면 이제는 Lagging이 확인되지 않는다.</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">$kafka_home/bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group product --describe</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Kafka 수동커밋","anchor":"#kafka-수동커밋"},{"depth":3,"value":"Kafka 수동 커밋","anchor":"#kafka-수동-커밋"},{"depth":4,"value":"Kafka 커밋모드","anchor":"#kafka-커밋모드"},{"depth":4,"value":"Kafka 커밋모드 변경","anchor":"#kafka-커밋모드-변경"},{"depth":4,"value":"Lag 확인","anchor":"#lag-확인"},{"depth":4,"value":"Manual Commit","anchor":"#manual-commit"},{"depth":4,"value":"Lag 확인","anchor":"#lag-확인-1"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}}]}},"context":{}}