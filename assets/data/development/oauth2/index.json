{"hash":"639846ab77f2d650b364be948c0c3d68be620b02","data":{"markdownPage":{"id":"65974ded095eed650829d479f7265f2d","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr","description":"","path":"/development/oauth2/","timeToRead":2,"content":"<h1 id=\"jwt토큰-기반-인증인가-w-spring-authz-svr\"><a href=\"#jwt%ED%86%A0%ED%81%B0-%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D%EC%9D%B8%EA%B0%80-w-spring-authz-svr\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT토큰 기반 인증인가 w/ Spring Authz-svr</h1>\n<h3 id=\"gateway에서의-jwt-토큰기반-인증\"><a href=\"#gateway%EC%97%90%EC%84%9C%EC%9D%98-jwt-%ED%86%A0%ED%81%B0%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gateway에서의 JWT 토큰기반 인증</h3>\n<h4 id=\"인증인가에-대한-자세한-내용은-msaschool에서-확인할-수-있다\"><a href=\"#%EC%9D%B8%EC%A6%9D%EC%9D%B8%EA%B0%80%EC%97%90-%EB%8C%80%ED%95%9C-%EC%9E%90%EC%84%B8%ED%95%9C-%EB%82%B4%EC%9A%A9%EC%9D%80-msaschool%EC%97%90%EC%84%9C-%ED%99%95%EC%9D%B8%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>인증,인가에 대한 자세한 내용은 MSASchool에서 확인할 수 있다.</h4>\n<p><a href=\"http://msaschool.io/operation/design/design-seven/\" target=\"_blank\" rel=\"noopener noreferrer\">http://msaschool.io/operation/design/design-seven/</a></p>\n<ul>\n<li>Spring Security와 Spring oauth2를 사용해 Resource Owner, Client, Authorization Server, Resource Server간의 인증/인가를 실습한다.</li>\n<li>여기서 Resouce란 Gateway를 경유하는 Rest APIs 들이며, Gateway가 Client 이자 Resource Server 역할을 한다. </li>\n<li>JWT기반 Access_Token을 활용한다.</li>\n</ul>\n<h4 id=\"gateway-서비스에서-리소스서버-설정\"><a href=\"#gateway-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90%EC%84%9C-%EB%A6%AC%EC%86%8C%EC%8A%A4%EC%84%9C%EB%B2%84-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>gateway 서비스에서 리소스서버 설정</h4>\n<ul>\n<li>게이트웨이 서비스의 ResourceServerConfiguration.java 파일을 열어본다.</li>\n<li>spring-cloud-gateway 는 webflux로 기동되기 때문에 @EnableWebFluxSecurity 를 적용한다.</li>\n<li>ServerHttpSecurity 생성시, oauth2ResourceServer() 리소스 서버역할을 부여하고 .jwt() 를 선언해 jwt 형식의 Authorization을 지정한다.</li>\n<li>인증/인가를 위한 Url은 JWK(Json Web Key)로 정의해 application.yaml에 선언되어 있다.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">spring</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">security</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">oauth2</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">resourceserver</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">jwt</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">jwk-set-uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8090/.well<span class=\"token punctuation\">-</span>known/jwks.json</code></pre>\n<ul>\n<li>\n<p>8090 포트의 서버는 인증(oauth) 서버이다. 인증서버에서 인증 Url인 jwks.json 엔드포인트가 GetMapping으로 선언되어 있다.</p>\n<blockquote>\n<p>JwkSetEndpointConfiguration.java</p>\n</blockquote>\n</li>\n<li>\n<p>Gateway 서비스(Client)는 인증서버에 uengine-client:uengine-secret 정보로 등록되어 있다.</p>\n<blockquote>\n<p>OAuth2AuthorizationServerConfig.java</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"서비스-구동\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 구동</h4>\n<ul>\n<li>게이트웨이 서비스와 일반 마이크로 서비스인 order 서비스를 실행한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd gateway\nmvn spring-boot:run\ncd order\nmvn spring-boot:run</code></pre>\n<ul>\n<li>8081 로 기동된 order 서비스를 바로 접근해 본다. (접근됨)\n- http localhost:8081/orders</li>\n<li>8088 로 기동된 gateway 서비스를 통하여 접근해 본다. (401 Unauthorized)\n- http localhost:8088/orders</li>\n</ul>\n<h4 id=\"oauth-서버에서-토큰-발급\"><a href=\"#oauth-%EC%84%9C%EB%B2%84%EC%97%90%EC%84%9C-%ED%86%A0%ED%81%B0-%EB%B0%9C%EA%B8%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>oauth 서버에서 토큰 발급</h4>\n<ul>\n<li>토큰을 발급하려면, 사용자가 있어야 한다.</li>\n<li>oauth 서비스의 AuthorizationServerApplication.java 에서 초기 사용자username=\"1@uengine.org\" / password = \"1\" 로 사전 등록되어 있다.</li>\n</ul>\n<h4 id=\"oauth-인증서버--구동\"><a href=\"#oauth-%EC%9D%B8%EC%A6%9D%EC%84%9C%EB%B2%84--%EA%B5%AC%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth 인증서버  구동</h4>\n<ul>\n<li>인증 서버를 실행한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd oauth\nmvn spring-boot:run</code></pre>\n<ul>\n<li>\n<p>서버를 실행 후, 토큰을 요청하는 API(/oauth/token) 를 호출하여 토큰을 가져온다.\n- 이때 Basic 뒤의 base64 값은 인증서버에 등록된 Gateway의 인코딩된 CLIENT_ID:CLIENT_SECRET 정보이다.</p>\n<pre class=\"language-text\"><code class=\"language-text\"> http --form POST localhost:8088/oauth/token &quot;Authorization: Basic dWVuZ2luZS1jbGllbnQ6dWVuZ2luZS1zZWNyZXQ=&quot; grant_type=password username=1@uengine.org password=1</code></pre>\n</li>\n<li>\n<p>출력된 access_token을 복사하여 <a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener noreferrer\">https://jwt.io/</a> 페이지에 접속 후 decode해 본다.</p>\n<blockquote>\n<p>Header, Payload, Signature로 파싱된다.\t</p>\n</blockquote>\n</li>\n<li>\n<p>가져온 데이터의 \"access_token\": 부분이 토큰 정보이다. 이 토큰을 이용하여 게이트웨이를 통하여 주문 서비스를 조회한다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">export access_token=[TOKEN입력]\necho $access_token\nhttp localhost:8088/orders &quot;Authorization: Bearer $access_token&quot;</code></pre>\n<pre class=\"language-text\"><code class=\"language-text\">\t- $access_token 부분에 넘어온 토큰 정보를 입력한다.\n\t- 토큰정보를 일부러 틀리게 하여 호출하여 본다.  </code></pre>\n</li>\n<li>\n<p>토큰이 유효한지 체크하여 본다\n- http --form POST localhost:8088/oauth/check_token token=$access_token\n- 토큰정보를 일부러 틀리게 하여 호출하여 본다.  </p>\n<pre class=\"language-text\"><code class=\"language-text\">\t```\n\t{\n\t    &quot;error&quot;: &quot;invalid_token&quot;,\n\t    &quot;error_description&quot;: &quot;Invalid access token&quot;\n\t}\n\t```</code></pre>\n</li>\n</ul>\n<h4 id=\"service-clear\"><a href=\"#service-clear\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Service Clear</h4>\n<ul>\n<li>다음 Lab을 위해 기동된 모든 서비스 종료</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">fuser -k 8081/tcp\nfuser -k 8088/tcp\nfuser -k 8090/tcp</code></pre>\n<h4 id=\"상세설명\"><a href=\"#%EC%83%81%EC%84%B8%EC%84%A4%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상세설명</h4>\n<iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/dsUW_JTvqIA\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"JWT토큰 기반 인증인가 w/ Spring Authz-svr","anchor":"#jwt토큰-기반-인증인가-w-spring-authz-svr"},{"depth":3,"value":"Gateway에서의 JWT 토큰기반 인증","anchor":"#gateway에서의-jwt-토큰기반-인증"},{"depth":4,"value":"인증,인가에 대한 자세한 내용은 MSASchool에서 확인할 수 있다.","anchor":"#인증인가에-대한-자세한-내용은-msaschool에서-확인할-수-있다"},{"depth":4,"value":"gateway 서비스에서 리소스서버 설정","anchor":"#gateway-서비스에서-리소스서버-설정"},{"depth":4,"value":"서비스 구동","anchor":"#서비스-구동"},{"depth":4,"value":"oauth 서버에서 토큰 발급","anchor":"#oauth-서버에서-토큰-발급"},{"depth":4,"value":"OAuth 인증서버  구동","anchor":"#oauth-인증서버--구동"},{"depth":4,"value":"Service Clear","anchor":"#service-clear"},{"depth":4,"value":"상세설명","anchor":"#상세설명"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}