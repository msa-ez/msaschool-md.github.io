{"hash":"639846ab77f2d650b364be948c0c3d68be620b02","data":{"markdownPage":{"id":"ce5824372b15cf24f6caf2f438ea4979","title":"프론트엔드 개발","description":"","path":"/development/front-end/","timeToRead":11,"content":"<h1 id=\"프론트엔드-개발\"><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프론트엔드 개발</h1>\n<h3 id=\"vuejs-프레임워크를-사용하기-위한-vue-유틸리티-명령어-설치\"><a href=\"#vuejs-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-vue-%EC%9C%A0%ED%8B%B8%EB%A6%AC%ED%8B%B0-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>VueJS 프레임워크를 사용하기 위한 vue 유틸리티 명령어 설치</h3>\n<pre class=\"language-text\"><code class=\"language-text\">npm install -g @vue/cli</code></pre>\n<h3 id=\"애플리케이션-생성\"><a href=\"#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>애플리케이션 생성</h3>\n<pre class=\"language-text\"><code class=\"language-text\">vue create front-end</code></pre>\n<blockquote>\n<p>옵션선택:  Vue2 선택,  패키지 매니저를 npm 으로 설정하는 것을 제외한 나머지 옵션은 모두 Default 선택을 선택함:\nPackage Manager: Use NPM</p>\n</blockquote>\n<h3 id=\"생성된-애플리케이션-살펴보기\"><a href=\"#%EC%83%9D%EC%84%B1%EB%90%9C-%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98-%EC%82%B4%ED%8E%B4%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>생성된 애플리케이션 살펴보기</h3>\n<pre class=\"language-text\"><code class=\"language-text\">cd front-end\nls</code></pre>\n<blockquote>\n<p>vuejs 파일(*.vue)들을 IDE 에서 읽기 쉽게 하기 위해 Extensions > \"vuejs\" 로 검색하면 플러그인을 설치할 수 있습니다.</p>\n</blockquote>\n<h3 id=\"vuetify-ui-component-설치\"><a href=\"#vuetify-ui-component-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Vuetify UI Component 설치</h3>\n<pre class=\"language-text\"><code class=\"language-text\">vue add vuetify</code></pre>\n<blockquote>\n<p>Default 옵션으로 설치. </p>\n</blockquote>\n<h3 id=\"애플리케이션의-빌드와-실행\"><a href=\"#%EC%95%A0%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%9D%98-%EB%B9%8C%EB%93%9C%EC%99%80-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>애플리케이션의 빌드와 실행</h3>\n<pre class=\"language-text\"><code class=\"language-text\">npm install\nnpm run serve</code></pre>\n<h3 id=\"브라우저에서-열기\"><a href=\"#%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EC%97%90%EC%84%9C-%EC%97%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>브라우저에서 열기</h3>\n<p>Labs > 포트열기 > 8080 (혹은 다른 포트번호)</p>\n<blockquote>\n<p>Invalid Host Header 오류를 제거하기 위하여 vue.config.js 에 devServer 블록을 추가:</p>\n</blockquote>\n<pre class=\"language-text\"><code class=\"language-text\">module.exports = {\n  transpileDependencies: [\n    &#39;vuetify&#39;\n  ],\n\n  devServer: {\n    allowedHosts: &quot;all&quot;,\n  }\n}</code></pre>\n<h3 id=\"상품목록을-만들기-위하여-card-컴포넌트를-사용\"><a href=\"#%EC%83%81%ED%92%88%EB%AA%A9%EB%A1%9D%EC%9D%84-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EC%9C%84%ED%95%98%EC%97%AC-card-%EC%BB%B4%ED%8F%AC%EB%84%8C%ED%8A%B8%EB%A5%BC-%EC%82%AC%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상품목록을 만들기 위하여 Card 컴포넌트를 사용</h3>\n<ul>\n<li>card 컴포넌트 사용 설명 URL:  <a href=\"https://vuetifyjs.com/en/components/cards/\" target=\"_blank\" rel=\"noopener noreferrer\">https://vuetifyjs.com/en/components/cards/</a></li>\n<li>샘플을 복사:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">  &lt;v-card\n    :loading=&quot;loading&quot;\n    class=&quot;mx-auto my-12&quot;\n    max-width=&quot;374&quot;\n  &gt;\n    &lt;template slot=&quot;progress&quot;&gt;\n      &lt;v-progress-linear\n        color=&quot;deep-purple&quot;\n        height=&quot;10&quot;\n        indeterminate\n      &gt;&lt;/v-progress-linear&gt;\n    &lt;/template&gt;\n\n    &lt;v-img\n      height=&quot;250&quot;\n      src=&quot;https://cdn.vuetifyjs.com/images/cards/cooking.png&quot;\n    &gt;&lt;/v-img&gt;\n\n    &lt;v-card-title&gt;Cafe Badilico&lt;/v-card-title&gt;\n\n    &lt;v-card-text&gt;\n      &lt;v-row\n        align=&quot;center&quot;\n        class=&quot;mx-0&quot;\n      &gt;\n        &lt;v-rating\n          :value=&quot;4.5&quot;\n          color=&quot;amber&quot;\n          dense\n          half-increments\n          readonly\n          size=&quot;14&quot;\n        &gt;&lt;/v-rating&gt;\n\n        &lt;div class=&quot;grey--text ml-4&quot;&gt;\n          4.5 (413)\n        &lt;/div&gt;\n      &lt;/v-row&gt;\n\n      &lt;div class=&quot;my-4 subtitle-1&quot;&gt;\n        $ • Italian, Cafe\n      &lt;/div&gt;\n\n      &lt;div&gt;Small plates, salads &amp; sandwiches - an intimate setting with 12 indoor seats plus patio seating.&lt;/div&gt;\n    &lt;/v-card-text&gt;\n\n    &lt;v-divider class=&quot;mx-4&quot;&gt;&lt;/v-divider&gt;\n\n    &lt;v-card-title&gt;Tonight&#39;s availability&lt;/v-card-title&gt;\n\n    &lt;v-card-text&gt;\n      &lt;v-chip-group\n        v-model=&quot;selection&quot;\n        active-class=&quot;deep-purple accent-4 white--text&quot;\n        column\n      &gt;\n        &lt;v-chip&gt;5:30PM&lt;/v-chip&gt;\n\n        &lt;v-chip&gt;7:30PM&lt;/v-chip&gt;\n\n        &lt;v-chip&gt;8:00PM&lt;/v-chip&gt;\n\n        &lt;v-chip&gt;9:00PM&lt;/v-chip&gt;\n      &lt;/v-chip-group&gt;\n    &lt;/v-card-text&gt;\n\n    &lt;v-card-actions&gt;\n      &lt;v-btn\n        color=&quot;deep-purple lighten-2&quot;\n        text\n        @click=&quot;reserve&quot;\n      &gt;\n        Reserve\n      &lt;/v-btn&gt;\n    &lt;/v-card-actions&gt;\n  &lt;/v-card&gt;</code></pre>\n<ul>\n<li>App.vue 의 \"HelloWorld\" 태그를 복사한 내용으로 대체</li>\n<li>사용하지 않는 컴포넌트선언들을 주석처리하여 무력화:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;script&gt;\n//import HelloWorld from &#39;./components/HelloWorld&#39;;\n\nexport default {\n  name: &#39;App&#39;,\n\n  components: {\n //   HelloWorld,\n  },\n\n  data: () =&gt; ({\n    //\n  }),\n};\n&lt;/script&gt;</code></pre>\n<h3 id=\"상품목록을-위한-변수-선언\"><a href=\"#%EC%83%81%ED%92%88%EB%AA%A9%EB%A1%9D%EC%9D%84-%EC%9C%84%ED%95%9C-%EB%B3%80%EC%88%98-%EC%84%A0%EC%96%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상품목록을 위한 변수 선언</h3>\n<pre class=\"language-text\"><code class=\"language-text\">  data: () =&gt; ({\n    products: []\n  }),</code></pre>\n<h3 id=\"생성자에-상품-목록-얻어오는-로직-작성\"><a href=\"#%EC%83%9D%EC%84%B1%EC%9E%90%EC%97%90-%EC%83%81%ED%92%88-%EB%AA%A9%EB%A1%9D-%EC%96%BB%EC%96%B4%EC%98%A4%EB%8A%94-%EB%A1%9C%EC%A7%81-%EC%9E%91%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>생성자에 상품 목록 얻어오는 로직 작성</h3>\n<pre class=\"language-text\"><code class=\"language-text\">export default {\n  name: &#39;App&#39;,\n\n  components: {\n //   HelloWorld,\n  },\n\n  data: () =&gt; ({\n    products: []\n  }),\n\n  async created() {\n      var temp = await axios.get(&#39;http://8081-labs--1247012378.kuberman.io/products&#39;)\n\n      console.log(temp.data._embedded.products)\n      this.products = temp.data._embedded.products;\n  }\n}</code></pre>\n<blockquote>\n<p>쇼핑몰 상품 정보 서비스를 호출하기 위해서 다음의 git 에서 코드를 다운받고 실행시켜야 합니다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">git clone https://github.com/event-storming/monolith.git\ncd monolith\nmvn spring-boot:run</code></pre>\n<p>axios 라이브러리를 가져오기 위하여   다음 import 문장을 export default 상단에 추가:   </p>\n<pre class=\"language-text\"><code class=\"language-text\">const axios = require(&#39;axios&#39;).default;</code></pre>\n<p>그래도 라이브러리가 없다고 나오면 터미널에서 다음을 실행 (front-end 의 디렉토리에서 실행)</p>\n<pre class=\"language-text\"><code class=\"language-text\">npm install axios</code></pre>\n</blockquote>\n<h3 id=\"화면-요소와-데이터의-바인딩-mvvm\"><a href=\"#%ED%99%94%EB%A9%B4-%EC%9A%94%EC%86%8C%EC%99%80-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EB%B0%94%EC%9D%B8%EB%94%A9-mvvm\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>화면 요소와 데이터의 바인딩 (MVVM)</h3>\n<p>v-card 태그와 얻어온 product 데이터를 바인딩 합니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\"> &lt;v-card v-for=&quot;(product, index) in products&quot; v-bind:key=&quot;index&quot; \n ...</code></pre>\n<blockquote>\n<p>화면에 아까 존재하던 카드가 사라졌나요? 그렇다면 서버에 아직 product 상품이 존재하지 않기 때문입니다.</p>\n</blockquote>\n<h3 id=\"상품-서비스-기동시키기\"><a href=\"#%EC%83%81%ED%92%88-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B8%B0%EB%8F%99%EC%8B%9C%ED%82%A4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상품 서비스 기동시키기</h3>\n<p>새 터미널을 열고 monolith2micsvc 폴더의 monolith 프로젝트에 진입하여 백엔드를 기동시킵니다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">cd monolith2misvc/\ncd monolith\nmvn spring-boot:run</code></pre>\n<blockquote>\n<p>상품서비스의 외부접속 주소를 얻기 위하여 Labs>포트열기>8081 (모놀리스 프로젝트의 포트번호) 를 통하여 브라우저에서 외부 주소를 확인합니다. 확인한 외부주소를 복사하여 앞서의 ajax 코드에 반영해줍니다:</p>\n</blockquote>\n<pre class=\"language-text\"><code class=\"language-text\">var temp = await axios.get(&#39;http://8081-labs--1247012378.kuberman.io/products&#39;)</code></pre>\n<ul>\n<li>화면을 리프래시 하여 상품개수만큼 리스트가 들어오는 것을 확인합니다</li>\n</ul>\n<h3 id=\"상품-이름-표시하기\"><a href=\"#%EC%83%81%ED%92%88-%EC%9D%B4%EB%A6%84-%ED%91%9C%EC%8B%9C%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상품 이름 표시하기</h3>\n<p>상품이름을 어떻게 출력할 수 있을까요? vuejs 에서는 템플릿 html 내용에 {{변수명}} 를 사용하여 변수내용을 해당 위치에 표시할 수 있습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">    &lt;v-card-title&gt;{{product.name}}&lt;/v-card-title&gt;</code></pre>\n<h3 id=\"주문-목록으로-전환하기\"><a href=\"#%EC%A3%BC%EB%AC%B8-%EB%AA%A9%EB%A1%9D%EC%9C%BC%EB%A1%9C-%EC%A0%84%ED%99%98%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>주문 목록으로 전환하기</h3>\n<p>상품목록 대신 주문 목록을 표시하도록 전환해보겠습니다. 주문정보를 통해서 어떤 상품을 주문했는지와, 배송상태를 얻어와 하나의 카드에 같이 출력하도록 Lazy Loading 방식으로 UI 에서 각각의 다른 마이크로서비스에서의 데이터를 통합할 수 있습니다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">  data: () =&gt; ({\n    orders: []\n  }),\n\nasync created() {\n      var temp = await axios.get(&#39;http://8081-labs--1247012378.kuberman.io/orders&#39;)\n\n      console.log(temp.data._embedded.orders)\n      this.orders = temp.data._embedded.orders;\n\n      this.orders.forEach(async order=&gt;{\n          var productData = await axios.get(&#39;http://8081-labs--1247012378.kuberman.io/products/&#39; + order.productId)\n\n          order.product = productData.data;\n\n          order.__ob__.dep.notify()\n      })\n  }</code></pre>\n<p>코드는 얻어온 주문의 목록에서 각 주문의 상품데이터를 다시 fetch 하여 객체에 담습니다. 주문정보에 상품정보가 보완이 되면, 그 때에 <strong>ob</strong>.notify() 에 의하여 객체의 변화가 MVVM 체계에 의하여 템플릿에 전달되어 변경된 주문 정보를 업데이트 하게 됩니다. </p>\n<p>따라서 템플릿 부분도 아래와 같이 변경합니다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;v-card v-for=&quot;(order, index) in orders&quot; v-bind:key=&quot;index&quot;\n    :loading=&quot;loading&quot;\n    class=&quot;mx-auto my-12&quot;\n    max-width=&quot;374&quot;\n  &gt;\n...\n\n    &lt;v-card-title&gt;      \n        &lt;v-progress-linear\n            v-if=&quot;!order.product&quot;\n        color=&quot;deep-purple&quot;\n        height=&quot;10&quot;\n        indeterminate\n      &gt;&lt;/v-progress-linear&gt;\n      &lt;div v-else&gt;\n        {{order.product.name}}\n      &lt;/div&gt;\n    &lt;/v-card-title &gt;</code></pre>\n<p>v-if 를 통하여 order.product 의 정보가 로딩되는 중일때는 progress bar 를 표시하고, 주문정보가 채워질때 비로소 상품이름을 표시함으로서 각 마이크로서비스의 호출결과가 도달하지 않더라도 주문의 기본 정보는 미리 표시해 둘 수 있습니다.</p>\n<h3 id=\"확장-실험\"><a href=\"#%ED%99%95%EC%9E%A5-%EC%8B%A4%ED%97%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>확장 실험</h3>\n<p>해당 주문에 대한 배송상태 정보도 같이 표시해보세요.</p>\n<h3 id=\"order-를-위한-vue-component-를-분리하시오\"><a href=\"#order-%EB%A5%BC-%EC%9C%84%ED%95%9C-vue-component-%EB%A5%BC-%EB%B6%84%EB%A6%AC%ED%95%98%EC%8B%9C%EC%98%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order 를 위한 Vue Component 를 분리하시오</h3>\n<p>VueJS 는 도메인 특화된 html 태그를 만들 수 있습니다. 이것은 유비쿼터스 랭귀지를 유지하여 비즈니스 피플과 개발자간의 커뮤니케이션을 유지하는 효과와 동시에 향후 컴포넌트의 재사용성과 간섭의 분리효과도 같이 높힐 수 있습니다.  주문에 대한 화면과 내부 정보를 채우는 로직을 \"ShoppingOrder\" 라고 하는 Vue Component 로 분리하여 html 태그로 간편하게 호출하여 어디서든 활용할 수 있도록 만들어 보겠습니다.</p>\n<p>먼저, 우리는 기존의 v-card 부분을 이렇게 변경하고 싶습니다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">          &lt;shopping-order :order=&quot;order&quot; v-for=&quot;(order, index) in orders&quot; v-bind:key=&quot;index&quot;/&gt;</code></pre>\n<blockquote>\n<p>:order=\"order\" 는 order 라는 컴포넌트에 주문한 건의 데이터를 전달 한다는 컴포넌트간 데이터 바인딩입니다. \":\"이 들어가면 뒤에 따르는 값은 문자열이 아닌 실행세션 내의 접근가능한 변수 참조가 됩니다.</p>\n</blockquote>\n<p>그렇게 하기 위하여 기존의 v-card 의 템플릿영역과 관련된 로직의 덩어리들을 Order.vue 라고 하는 컴포넌트를 만들어서 사용하고 싶습니다. 기존에 HelloWorld.vue 라고 하는 샘플 컴포넌트를 참고하여 다음과 같이 ShoppingOrder.vue 를 만들어 components 폴더아래 위치합니다 (혹은 HelloWorld.vue 파일명을 변경해서 바로 작성해도 좋겠네요):</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;template&gt;\n  &lt;v-card \n    :loading=&quot;loading&quot;\n    class=&quot;mx-auto my-12&quot;\n    max-width=&quot;374&quot;\n  &gt;\n    &lt;template slot=&quot;progress&quot;&gt;\n      &lt;v-progress-linear\n        color=&quot;deep-purple&quot;\n        height=&quot;10&quot;\n        indeterminate\n      &gt;&lt;/v-progress-linear&gt;\n    &lt;/template&gt;\n\n    &lt;v-img\n      height=&quot;250&quot;\n      src=&quot;https://cdn.vuetifyjs.com/images/cards/cooking.png&quot;\n    &gt;&lt;/v-img&gt;\n\n    &lt;v-card-title&gt;      \n        &lt;v-progress-linear\n            v-if=&quot;!order.product&quot;\n        color=&quot;deep-purple&quot;\n        height=&quot;10&quot;\n        indeterminate\n      &gt;&lt;/v-progress-linear&gt;\n      &lt;div v-else&gt;\n        {{order.product.name}}\n      &lt;/div&gt;\n    &lt;/v-card-title &gt;\n\n    &lt;v-card-text &gt;\n      &lt;v-row\n        align=&quot;center&quot;\n        class=&quot;mx-0&quot;\n      &gt;\n        &lt;v-rating\n          :value=&quot;4.5&quot;\n          color=&quot;amber&quot;\n          dense\n          half-increments\n          readonly\n          size=&quot;14&quot;\n        &gt;&lt;/v-rating&gt;\n\n        &lt;div class=&quot;grey--text ml-4&quot;&gt;\n          4.5 (413)\n        &lt;/div&gt;\n      &lt;/v-row&gt;\n\n      &lt;div class=&quot;my-4 subtitle-1&quot;&gt;\n        $ • Italian, Cafe\n      &lt;/div&gt;\n\n      &lt;div&gt;Small plates, salads &amp; sandwiches - an intimate setting with 12 indoor seats plus patio seating.&lt;/div&gt;\n    &lt;/v-card-text&gt;\n\n    &lt;v-divider class=&quot;mx-4&quot;&gt;&lt;/v-divider&gt;\n\n    &lt;v-card-title&gt;Tonight&#39;s availability&lt;/v-card-title&gt;\n\n    &lt;v-card-text&gt;\n      &lt;v-chip-group\n        v-model=&quot;selection&quot;\n        active-class=&quot;deep-purple accent-4 white--text&quot;\n        column\n      &gt;\n        &lt;v-chip&gt;5:30PM&lt;/v-chip&gt;\n\n        &lt;v-chip&gt;7:30PM&lt;/v-chip&gt;\n\n        &lt;v-chip&gt;8:00PM&lt;/v-chip&gt;\n\n        &lt;v-chip&gt;9:00PM&lt;/v-chip&gt;\n      &lt;/v-chip-group&gt;\n    &lt;/v-card-text&gt;\n\n    &lt;v-card-actions&gt;\n      &lt;v-btn\n        color=&quot;deep-purple lighten-2&quot;\n        text\n        @click=&quot;reserve&quot;\n      &gt;\n        \n      &lt;/v-btn&gt;\n    &lt;/v-card-actions&gt;\n  &lt;/v-card&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  export default {\n    name: &#39;ShoppingOrder&#39;,\n\n    props: {\n        order: Object\n    },\n\n    data: () =&gt; ({\n    }),\n  }\n&lt;/script&gt;</code></pre>\n<p>여기서 주목할 점은 props 부분입니다. 외부에서 이 컴포넌트를 사용할때 props 에서 정의된 attribute 를 통해서 inbound 로 받아올 값을 얻어올 수 있습니다. 템플릿은 기존의 코드 그대로를 옮겨왔습니다.</p>\n<p>이 컴포넌트를 이용할 수 있도록 하려면 앞에서 주석처리했던 import 절과 component 목록에 Order 를 추가해주어야 합니다:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;script&gt;\n\nimport ShoppingOrder from &#39;./components/ShoppingOrder&#39;\n...\n\nexport default {\n  name: &#39;App&#39;,\n\n  components: {\n      ShoppingOrder\n  },\n\t\n\t...\n}</code></pre>\n<p>이렇게 변경한 후 브라우저를 리프래시하여 기존의 동작과 동일하게 동작하는지 확인해 봅니다. </p>\n<p>보시다시피, 상품정보를 읽어들여오지 못합니다. 이것은 한번 넘겨줄때의 order 값이 다른 컴포넌트에 전달될때는 해당 값의 복사본으로 전달되기 때문에 더이상 App.vue 에서 넘겨준 orders 각자의 값의 변경이 Order 컴포넌트 내부에는 영향을 줄 수 없기 때문에 발생한 문제입니다. </p>\n<p>다르게 생각하면, 이제부터는 Order.vue 에서 자신의 주문정보내부의 세부정보를 채우도록 하는 로직을 가져오는 것이 더 간섭과 Order.vue 파일을 관리할 주문팀의 자치성을 높히는 방향이 되므로, Order.vue 에 상품정보를 추가하는 로직을 옮겨오도록 하겠습니다.</p>\n<p>기존 App.vue 에 있던 상품정보를 로딩하는 for loop 를 잘라내어 Order.vue 의  생성자 (created 메서드) 로 옮깁니다:</p>\n<p>App.vue</p>\n<pre class=\"language-text\"><code class=\"language-text\"> async created() {\n      var temp = await axios.get(&#39;http://8081-labs--1247012378.kuberman.io/orders&#39;)\n\n      console.log(temp.data._embedded.orders)\n      this.orders = temp.data._embedded.orders;\n\n      [이 부분이 잘라낼 부분]\n\t\t\t\n  }</code></pre>\n<p>Order.vue</p>\n<pre class=\"language-text\"><code class=\"language-text\">    async created(){\n\n        var productData = await axios.get(&#39;http://8081-labs--1247012378.kuberman.io/products/&#39; + this.order.productId)\n\n        this.order.product = productData.data;\n\n        this.order.__ob__.dep.notify()\n\n    }</code></pre>\n<p>Order.vue 에서는 for loop 가 더이상 필요 없어집니다. 각자의 Order Component 에서 created 는 매번 호출 되기 때문이죠. </p>\n<p>그리고 기존에 그냥 \"order\" 로 접근했던 코드는 자신의 객체의 멤버 프로퍼티를 확실하게 참조하도록 \"this.order\"로 모두 변경해줍니다.</p>\n<p>자, 이제 리프래시해서 기존 동작과 동일하게 동작됨을 확인합니다. </p>\n<p>이렇게 각 도메인별 컴포넌트를 분리하면 팀별 자율성을 높히면서 간섭없이 큰 프론트엔드를 관리할 수 있습니다. </p>\n<h4 id=\"ordervue-의-완성파일\"><a href=\"#ordervue-%EC%9D%98-%EC%99%84%EC%84%B1%ED%8C%8C%EC%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order.vue 의 완성파일</h4>\n<p>vue compiler 의 오류검증이 강화됨에 따라 props 의 값을 직접 변경하는 것이 불가능해졌기 때문에 초기값만을 복사한 후, 세부 값을 변경하는 코드로 변경됨:</p>\n<pre class=\"language-text\"><code class=\"language-text\">&lt;template&gt;\n  &lt;v-card \n    :loading=&quot;loading&quot;\n    class=&quot;mx-auto my-12&quot;\n    max-width=&quot;374&quot;\n  &gt;\n    &lt;template slot=&quot;progress&quot;&gt;\n      &lt;v-progress-linear\n        color=&quot;deep-purple&quot;\n        height=&quot;10&quot;\n        indeterminate\n      &gt;&lt;/v-progress-linear&gt;\n    &lt;/template&gt;\n\n    &lt;v-img\n      height=&quot;250&quot;\n      src=&quot;https://cdn.vuetifyjs.com/images/cards/cooking.png&quot;\n    &gt;&lt;/v-img&gt;\n\n    &lt;v-card-title&gt;      \n        &lt;v-progress-linear\n            v-if=&quot;!innerOrder.product&quot;\n        color=&quot;deep-purple&quot;\n        height=&quot;10&quot;\n        indeterminate\n      &gt;&lt;/v-progress-linear&gt;\n      &lt;div v-else&gt;\n        {{innerOrder.product.name}}\n      &lt;/div&gt;\n    &lt;/v-card-title &gt;\n\n    &lt;v-card-text &gt;\n      &lt;v-row\n        align=&quot;center&quot;\n        class=&quot;mx-0&quot;\n      &gt;\n        &lt;v-rating\n          :value=&quot;4.5&quot;\n          color=&quot;amber&quot;\n          dense\n          half-increments\n          readonly\n          size=&quot;14&quot;\n        &gt;&lt;/v-rating&gt;\n\n        &lt;div class=&quot;grey--text ml-4&quot;&gt;\n          4.5 (413)\n        &lt;/div&gt;\n      &lt;/v-row&gt;\n\n      &lt;div class=&quot;my-4 subtitle-1&quot;&gt;\n        $ • Italian, Cafe\n      &lt;/div&gt;\n\n      &lt;div&gt;Small plates, salads &amp; sandwiches - an intimate setting with 12 indoor seats plus patio seating.&lt;/div&gt;\n    &lt;/v-card-text&gt;\n\n    &lt;v-divider class=&quot;mx-4&quot;&gt;&lt;/v-divider&gt;\n\n    &lt;v-card-title&gt;Tonight&#39;s availability&lt;/v-card-title&gt;\n\n    &lt;v-card-text&gt;\n      &lt;v-chip-group\n        v-model=&quot;selection&quot;\n        active-class=&quot;deep-purple accent-4 white--text&quot;\n        column\n      &gt;\n        &lt;v-chip&gt;5:30PM&lt;/v-chip&gt;\n\n        &lt;v-chip&gt;7:30PM&lt;/v-chip&gt;\n\n        &lt;v-chip&gt;8:00PM&lt;/v-chip&gt;\n\n        &lt;v-chip&gt;9:00PM&lt;/v-chip&gt;\n      &lt;/v-chip-group&gt;\n    &lt;/v-card-text&gt;\n\n    &lt;v-card-actions&gt;\n      &lt;v-btn\n        color=&quot;deep-purple lighten-2&quot;\n        text\n        @click=&quot;reserve&quot;\n      &gt;\n        \n      &lt;/v-btn&gt;\n    &lt;/v-card-actions&gt;\n  &lt;/v-card&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n  const axios = require(&#39;axios&#39;).default;\n\n  export default {\n    name: &#39;ShoppingOrder&#39;,\n\n    props: {\n        order: Object\n    },\n\n    data: () =&gt; ({\n        innerOrder: Object\n    }),\n\n    async created(){\n\n        this.innerOrder = this.order;\n         \n        var productData = await axios.get(&#39;https://8088-labs--1471950141.kuberez.io/products/&#39; + this.order.productId)\n\nconsole.log(productData);\n        this.innerOrder.product = productData.data;\n\n        this.innerOrder.__ob__.dep.notify()\n    \n    }\n  }\n&lt;/script&gt;</code></pre>\n<h3 id=\"마이크로-프론트엔드\"><a href=\"#%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마이크로 프론트엔드</h3>\n<p>이렇게 잘 만들어진 VueJS 컴포넌트구조가 있다하더라도 프론트엔드 컴포넌트들은 빌드를 통하여 한번에 반영되어야 하므로 실행중의 커플링은 여전히 존재하며, 각 팀이 만약 다른 프레임워크를 혼용하여 사용하길 선호한다면 (예를 들어 React.js 등) 여러분께서는 \"마이크로프론트엔드\"를 검토해볼 수 있습니다.  마이크로 프론트엔드는 다음과 같은 장점을 제공해 줍니다:</p>\n<ol>\n<li>팀간 분리된 컴포넌트 기반 개발과 통합</li>\n<li>팀간 배포 독립성</li>\n<li>팀간 기술 독립성 (다종의 UI-framework 혼합)</li>\n<li>장애 격리 (하나의 컴포넌트내의 자바스크립트 엔진이 죽어도 다른 컴포넌트가 영향 안받아야)</li>\n<li>이벤트 채널을 통한 컴포넌트간 연동 </li>\n</ol>\n<p>마이크로 프론트엔드를 적용해보고 싶다면 다음의 링크들을 참고하세요:</p>\n<ul>\n<li><a href=\"https://www.martinfowler.com/articles/micro-frontends.html\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.martinfowler.com/articles/micro-frontends.html</a></li>\n<li><a href=\"https://micro-frontends.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://micro-frontends.org/</a></li>\n<li><a href=\"https://github.com/jinyoung/micro-frontends-with-web-components\" target=\"_blank\" rel=\"noopener noreferrer\">https://github.com/jinyoung/micro-frontends-with-web-components</a></li>\n<li><a href=\"https://medium.com/javascript-in-plain-english/create-micro-frontends-using-web-components-with-support-for-angular-and-react-2d6db18f557a\" target=\"_blank\" rel=\"noopener noreferrer\">https://medium.com/javascript-in-plain-english/create-micro-frontends-using-web-components-with-support-for-angular-and-react-2d6db18f557a</a></li>\n</ul>\n<h4 id=\"마이크로-프론트엔드-실습하기-위한-기본-코드-다운로드\"><a href=\"#%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C-%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C-%EC%8B%A4%EC%8A%B5%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EA%B8%B0%EB%B3%B8-%EC%BD%94%EB%93%9C-%EB%8B%A4%EC%9A%B4%EB%A1%9C%EB%93%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마이크로 프론트엔드 실습하기 위한 기본 코드 다운로드</h4>\n<pre class=\"language-text\"><code class=\"language-text\"></code></pre>\n<h4 id=\"포트넘버-수정\"><a href=\"#%ED%8F%AC%ED%8A%B8%EB%84%98%EB%B2%84-%EC%88%98%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>포트넘버 수정</h4>\n<p>micro-fe-ng/package.json 을 아래와 같이 수정:</p>\n<pre class=\"language-text\"><code class=\"language-text\">    &quot;start&quot;: &quot;npm run build &amp;&amp; serve -l 5001 dist/micro-fe-ng&quot;,</code></pre>\n<p>--></p>\n<pre class=\"language-text\"><code class=\"language-text\">    &quot;start&quot;: &quot;npm run build &amp;&amp; serve -l 8081 dist/micro-fe-ng&quot;,</code></pre>\n<p>나머지 micro-fe-react, micro-fe-vue, micro-fe-wrapper 의 package.json 내의 포트넘버를 아래와 같이 변경:</p>\n<pre class=\"language-text\"><code class=\"language-text\">5002 -&gt; 8082\n5003 -&gt; 8083\n5000 -&gt; 8080</code></pre>\n<p>각 프로젝트를 Open in Terminal 을 통해 별도 터미널을 열고 </p>\n<pre class=\"language-text\"><code class=\"language-text\">npm i\nnpm start</code></pre>\n<p>마지막으로, micro-fe-wrapper/index.html 을 다음과 같이 수정:</p>\n<pre class=\"language-text\"><code class=\"language-text\">  &lt;script src=&quot;https://8081-labs--1471950141.kuberez.io/main.js&quot;&gt;&lt;/script&gt;\n  &lt;script src=&quot;https://8082-labs--1471950141.kuberez.io/main.js&quot;&gt;&lt;/script&gt;\n  &lt;script src=&quot;https://8083-labs--1471950141.kuberez.io/order-form.js&quot;&gt;&lt;/script&gt;</code></pre>\n<p>Labs> 포트열기> 8080</p>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"프론트엔드 개발","anchor":"#프론트엔드-개발"},{"depth":3,"value":"VueJS 프레임워크를 사용하기 위한 vue 유틸리티 명령어 설치","anchor":"#vuejs-프레임워크를-사용하기-위한-vue-유틸리티-명령어-설치"},{"depth":3,"value":"애플리케이션 생성","anchor":"#애플리케이션-생성"},{"depth":3,"value":"생성된 애플리케이션 살펴보기","anchor":"#생성된-애플리케이션-살펴보기"},{"depth":3,"value":"Vuetify UI Component 설치","anchor":"#vuetify-ui-component-설치"},{"depth":3,"value":"애플리케이션의 빌드와 실행","anchor":"#애플리케이션의-빌드와-실행"},{"depth":3,"value":"브라우저에서 열기","anchor":"#브라우저에서-열기"},{"depth":3,"value":"상품목록을 만들기 위하여 Card 컴포넌트를 사용","anchor":"#상품목록을-만들기-위하여-card-컴포넌트를-사용"},{"depth":3,"value":"상품목록을 위한 변수 선언","anchor":"#상품목록을-위한-변수-선언"},{"depth":3,"value":"생성자에 상품 목록 얻어오는 로직 작성","anchor":"#생성자에-상품-목록-얻어오는-로직-작성"},{"depth":3,"value":"화면 요소와 데이터의 바인딩 (MVVM)","anchor":"#화면-요소와-데이터의-바인딩-mvvm"},{"depth":3,"value":"상품 서비스 기동시키기","anchor":"#상품-서비스-기동시키기"},{"depth":3,"value":"상품 이름 표시하기","anchor":"#상품-이름-표시하기"},{"depth":3,"value":"주문 목록으로 전환하기","anchor":"#주문-목록으로-전환하기"},{"depth":3,"value":"확장 실험","anchor":"#확장-실험"},{"depth":3,"value":"Order 를 위한 Vue Component 를 분리하시오","anchor":"#order-를-위한-vue-component-를-분리하시오"},{"depth":4,"value":"Order.vue 의 완성파일","anchor":"#ordervue-의-완성파일"},{"depth":3,"value":"마이크로 프론트엔드","anchor":"#마이크로-프론트엔드"},{"depth":4,"value":"마이크로 프론트엔드 실습하기 위한 기본 코드 다운로드","anchor":"#마이크로-프론트엔드-실습하기-위한-기본-코드-다운로드"},{"depth":4,"value":"포트넘버 수정","anchor":"#포트넘버-수정"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}