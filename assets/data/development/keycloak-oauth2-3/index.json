{"hash":"639846ab77f2d650b364be948c0c3d68be620b02","data":{"markdownPage":{"id":"c24c4be272db66e786f823a2485af3be","title":"Fine grained RBAC w/ Resource Server","description":"","path":"/development/keycloak-oauth2-3/","timeToRead":1,"content":"<h1 id=\"fine-grained-rbac-w-resource-server\"><a href=\"#fine-grained-rbac-w-resource-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Fine grained RBAC w/ Resource Server</h1>\n<h3 id=\"keycloak-jwt기반-oauth2---resource-server\"><a href=\"#keycloak-jwt%EA%B8%B0%EB%B0%98-oauth2---resource-server\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak, JWT기반 OAuth2 - Resource Server</h3>\n<h4 id=\"oauth2-resource-server-설정\"><a href=\"#oauth2-resource-server-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth2 Resource Server 설정</h4>\n<ul>\n<li>주문 마이크로서비스를 Resource Server로 설정한다.</li>\n<li>Gateway로부터 JWT Token을 전달받아 클레임에 포함된 User Role기반의 Fine grained한 ACL을 적용한다.</li>\n<li>\n<p>Platform에서 작업이 원활히지 않을 경우, Local에서 수행한다.</p>\n<blockquote>\n<p>Local 머신에 IDE(IntelliJ, VSCode)와 JDK 11 이상이 설치되어 있어야 한다. </p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"oauth2-resource-server-설정-1\"><a href=\"#oauth2-resource-server-%EC%84%A4%EC%A0%95-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth2 Resource Server 설정</h4>\n<ul>\n<li>Order 마이크로서비스의 pom.xml을 통해 Resource Server 설정에 필요한 라이브러리(oauth2-resource-server)를 확인한다.</li>\n<li>application.yml에 oauth2-resource-server 설정을 주입한다.</li>\n<li>application.yml을 열어 주석 부분을 해제한다.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\">#  security:</span>\n<span class=\"token comment\">#    oauth2:</span>\n<span class=\"token comment\">#      resourceserver:</span>\n<span class=\"token comment\">#        jwt:</span>\n<span class=\"token comment\">#          jwk-set-uri: http://localhost:8080/realms/my_realm/protocol/openid-connect/certs</span></code></pre>\n<blockquote>\n<p>12행과 같이 keycloak Endpoint 정보는 Realm에서 OIDC 링크를 통해 확인 가능하다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/156495160-c1dba952-ad18-45d8-b170-e2cfe377887d.png\" alt=\"image\"></p>\n<h4 id=\"resource-server-security-configuration\"><a href=\"#resource-server-security-configuration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Resource Server Security Configuration</h4>\n<ul>\n<li>security 패키지의 ResourceSecurityConfig.java 파일을 열어 기본 설정을 확인한다.</li>\n<li>메소드 레벨의 Spring security를 적용하기 위해 @EnableGlobalMethodSecurity을 설정한다.</li>\n<li>Gateway로부터 전달받은 JWT 토큰으로부터 Claim을 추출하여 Spring security에 Injection한다.</li>\n</ul>\n<h4 id=\"메소드-레벨-fine-grained-role-적용\"><a href=\"#%EB%A9%94%EC%86%8C%EB%93%9C-%EB%A0%88%EB%B2%A8-fine-grained-role-%EC%A0%81%EC%9A%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>메소드 레벨 Fine grained Role 적용</h4>\n<ul>\n<li>Order 서비스의 Controller.java를 열어 Role 설정을 확인한다.</li>\n<li>javax.annotation.security.RolesAllowed 를 활용해 메소드 레벨 ACL을 적용한다.</li>\n<li>\n<p>Spring Security의 @Secured 로도 제어 가능하다.</p>\n<blockquote>\n<p>Keycloak > JWT Claim > Spring Security로 전달되었다.</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"order-서비스-메소드-레벨-acl-테스트\"><a href=\"#order-%EC%84%9C%EB%B9%84%EC%8A%A4-%EB%A9%94%EC%86%8C%EB%93%9C-%EB%A0%88%EB%B2%A8-acl-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order 서비스 메소드 레벨 ACL 테스트</h4>\n<ul>\n<li>브라우저로 <a href=\"http://localhost:8088%EC%97%90\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8088에</a> 접속한다.</li>\n<li>접속 후, 인증한 User의 Role에 따른 응답을 확인해 본다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">http://localhost:8088/orders\nhttp://localhost:8088/orders/placeAnOrder\nhttp://localhost:8088/orders/orderManage</code></pre>\n<h4 id=\"service-clear\"><a href=\"#service-clear\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Service Clear</h4>\n<ul>\n<li>다음 Lab을 위해 기동된 모든 서비스 종료</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">fuser -k 8080/tcp\nfuser -k 8081/tcp\nfuser -k 8088/tcp</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Fine grained RBAC w/ Resource Server","anchor":"#fine-grained-rbac-w-resource-server"},{"depth":3,"value":"Keycloak, JWT기반 OAuth2 - Resource Server","anchor":"#keycloak-jwt기반-oauth2---resource-server"},{"depth":4,"value":"OAuth2 Resource Server 설정","anchor":"#oauth2-resource-server-설정"},{"depth":4,"value":"OAuth2 Resource Server 설정","anchor":"#oauth2-resource-server-설정-1"},{"depth":4,"value":"Resource Server Security Configuration","anchor":"#resource-server-security-configuration"},{"depth":4,"value":"메소드 레벨 Fine grained Role 적용","anchor":"#메소드-레벨-fine-grained-role-적용"},{"depth":4,"value":"Order 서비스 메소드 레벨 ACL 테스트","anchor":"#order-서비스-메소드-레벨-acl-테스트"},{"depth":4,"value":"Service Clear","anchor":"#service-clear"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}