{"hash":"8ec2d2d769250ada18e8c764b3b6b292cc183178","data":{"markdownPage":{"id":"a0061728843e2f39ce362779601547dd","title":"Kafka 기본 명령어 (New)","description":"","path":"/development/keycloak-oauth2-1/","timeToRead":2,"content":"<h1 id=\"kafka-기본-명령어-new\"><a href=\"#kafka-%EA%B8%B0%EB%B3%B8-%EB%AA%85%EB%A0%B9%EC%96%B4-new\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 기본 명령어 (New)</h1>\n<h1 id=\"kafka-기본-명령어-new-1\"><a href=\"#kafka-%EA%B8%B0%EB%B3%B8-%EB%AA%85%EB%A0%B9%EC%96%B4-new-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 기본 명령어 (New)</h1>\n<h3 id=\"kafka-기본-명령-이해하기\"><a href=\"#kafka-%EA%B8%B0%EB%B3%B8-%EB%AA%85%EB%A0%B9-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 기본 명령 이해하기</h3>\n<ul>\n<li>IDE 를 실행하기 위하여 CODE > Project IDE 를 선택하여 gitpod 에 접속한다.</li>\n<li>kafka 를 docker를 통하여 실행한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose up</code></pre>\n<blockquote>\n<p>kafka 는 zookeeper 서버와 함께 2개의 프로세스로 기동된다.\ndocker-compose file 은 하나 이상의 docker 서비스를 실행관리할 때 사용된다.</p>\n</blockquote>\n<ul>\n<li>kafka 유틸리티가 포함된 위치에 접속하기 위하여 docker 를 통하여 shell 에 진입한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose exec -it kafka /bin/bash\ncd /bin</code></pre>\n<ul>\n<li>토픽생성</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">./kafka-topics --bootstrap-server http://localhost:9092 --topic example --create --partitions <span class=\"token number\">1</span> --replication-factor <span class=\"token number\">1</span></code></pre>\n<ul>\n<li>토픽 리스트 보기</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">./kafka-topics --bootstrap-server http://localhost:9092 --list    </code></pre>\n<ul>\n<li>새로운 터미널 창에서 kafka producer 연결 후 메세지 publish</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">./kafka-console-producer --broker-list http://localhost:9092 --topic example</code></pre>\n<ul>\n<li>새로운 터미널 창에서 kafka consumer 연결 후 메세지 subscribe</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">./kafka-console-consumer --bootstrap-server http://localhost:9092 --topic example --from-beginning</code></pre>\n<ul>\n<li>hello world 라는 메세지 publish 해보기 </li>\n</ul>\n<h3 id=\"kafka-consumer-group--offsets\"><a href=\"#kafka-consumer-group--offsets\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Consumer Group &#x26; Offsets</h3>\n<ul>\n<li>consumer group 목록</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">./kafka-consumer-groups --bootstrap-server http://localhost:9092 --list</code></pre>\n<ul>\n<li>consumer group 의 offset 확인</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">./kafka-consumer-groups --bootstrap-server http://localhost:9092 --group <span class=\"token operator\">&lt;</span>group_id<span class=\"token operator\">></span> --describe</code></pre>\n<ul>\n<li>consumer group 의 offset 재설정</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\">./kafka-consumer-groups --bootstrap-server http://localhost:9092 --group <span class=\"token operator\">&lt;</span>group_id<span class=\"token operator\">></span> --topic example --reset-offsets --to-earliest --execute</code></pre>\n<blockquote>\n<p>There are many other resetting options, run kafka-consumer-groups for details:</p>\n</blockquote>\n<pre class=\"language-bash\"><code class=\"language-bash\"> --shift-by <span class=\"token operator\">&lt;</span>positive_or_negative_integer<span class=\"token operator\">></span>\n --to-current\n --to-latest\n --to-offset <span class=\"token operator\">&lt;</span>offset_integer<span class=\"token operator\">></span>\n --to-datetime <span class=\"token operator\">&lt;</span>datetime_string<span class=\"token operator\">></span>\n --by-duration <span class=\"token operator\">&lt;</span>duration_string<span class=\"token operator\">></span></code></pre>\n<h2 id=\"카프카의-로컬-설치\"><a href=\"#%EC%B9%B4%ED%94%84%EC%B9%B4%EC%9D%98-%EB%A1%9C%EC%BB%AC-%EC%84%A4%EC%B9%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>카프카의 로컬 설치</h2>\n<ul>\n<li>Kafka Download</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">wget https://dlcdn.apache.org/kafka/3.1.0/kafka_2.13-3.1.0.tgz\ntar -xf kafka_2.13-3.1.0.tgz</code></pre>\n<ul>\n<li>Run Kafka</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka_2.13-3.1.0/\nbin/zookeeper-server-start.sh config/zookeeper.properties &amp;\nbin/kafka-server-start.sh config/server.properties &amp;</code></pre>\n<ul>\n<li>Kafka Event 컨슈밍하기 (별도 터미널)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka_2.13-3.1.0/\nbin/kafka-console-consumer.sh --bootstrap-server 127.0.0.1:9092 --topic petstore</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Kafka 기본 명령어 (New)","anchor":"#kafka-기본-명령어-new"},{"depth":1,"value":"Kafka 기본 명령어 (New)","anchor":"#kafka-기본-명령어-new-1"},{"depth":3,"value":"Kafka 기본 명령 이해하기","anchor":"#kafka-기본-명령-이해하기"},{"depth":3,"value":"Kafka Consumer Group & Offsets","anchor":"#kafka-consumer-group--offsets"},{"depth":2,"value":"카프카의 로컬 설치","anchor":"#카프카의-로컬-설치"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-service/","title":"12번가 마이크로서비스 라우터(Service) 적용"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Pub/Sub 방식의 연동 (New)"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 (New)"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation (New)"}},{"node":{"path":"/development/oauth2/","title":"Req/Res 방식의 MSA 연동 (New)"}},{"node":{"path":"/development/monolith2misvc/","title":"Kafka Retry & Dead Letter Queue (New)"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/gateway/","title":"단위 마이크로 서비스의 실행 (New)"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Kafka 기본 명령어 (New)"}},{"node":{"path":"/development/kafka-scaling/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/cna-pubsub/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/kafka-base/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/cna-pubsub2/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/front-end/","title":"Kafka Scaling (New)"}},{"node":{"path":"/development/circuitbreaker/","title":"API Gateway"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/development/advanced-connect/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}}]}},"context":{}}