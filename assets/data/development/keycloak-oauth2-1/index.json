{"hash":"639846ab77f2d650b364be948c0c3d68be620b02","data":{"markdownPage":{"id":"a0061728843e2f39ce362779601547dd","title":"Keycloak Authorization 서버 설정","description":"","path":"/development/keycloak-oauth2-1/","timeToRead":1,"content":"<h1 id=\"keycloak-authorization-서버-설정\"><a href=\"#keycloak-authorization-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak Authorization 서버 설정</h1>\n<h3 id=\"keycloak기반-oauth2---authorization-svr\"><a href=\"#keycloak%EA%B8%B0%EB%B0%98-oauth2---authorization-svr\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak기반 OAuth2 - Authorization Svr</h3>\n<h4 id=\"oauth2-stackholders\"><a href=\"#oauth2-stackholders\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth2 Stackholders</h4>\n<ul>\n<li>Gateway를 OAuth2 Client로, 주문 마이크로서비스를 Resource Server로 설정한다. </li>\n<li>Keycloak 서버를 설치하고 접속하여 기본설정과 사용할 User를 등록한다.</li>\n<li>OAuth2의 Grant type을 'authorization_code'를 적용한다.</li>\n<li>\n<p>Platform에서 작업이 원활히지 않을 경우, Local에서 수행한다.</p>\n<blockquote>\n<p>Local 머신에 IDE(IntelliJ, VSCode)와 JDK 11 이상이 설치되어 있어야 한다. </p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"keycloak-시작\"><a href=\"#keycloak-%EC%8B%9C%EC%9E%91\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak 시작</h4>\n<ul>\n<li>Redhat이 만든 Keycloak 서버는 8080포트를 기본 사용한다.</li>\n<li>bin 폴더 하위에 OS에 맞는 Script를 실행한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd keycloak/bin\nchmod 744 ./kc.sh\n./kc.sh start-dev</code></pre>\n<ul>\n<li>웹브라우저에서 Keycloak 관리콘솔(<a href=\"http://localhost:8080/\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8080/</a>)에 접속한다.</li>\n<li>관리자 계정이 (admin/admin)으로 등록되어 있다.</li>\n<li>'Administration Console'을 눌러 콘솔로 진입한다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/156484122-ffa109fc-d558-4ab1-bfcf-60b83cbaf7bc.png\" alt=\"image\"></p>\n<h4 id=\"keycloak-설정\"><a href=\"#keycloak-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak 설정</h4>\n<ul>\n<li>Realm 추가</li>\n<li>'test-realm' 이름으로 Root 관리단위인 Realm을 추가한다.</li>\n<li>추가된 Realm에서 Token의 Lifespan을 1시간으로 조정한다.</li>\n<li>Client 등록</li>\n<li>왼쪽 메뉴 Client를 눌러, Realm 범주의 Client를 추가한다.</li>\n<li>\n<p>'test-client' 이름으로 OAuth2 CLIENT를 등록한다.</p>\n<blockquote>\n<p>Root URL: <a href=\"http://localhost:8080\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8080</a></p>\n</blockquote>\n</li>\n<li>'Save'를 눌러 저장한다.</li>\n<li>\n<p>Client의 OAuth2 설정을 추가한다.</p>\n<blockquote>\n<p>Redirect URI: <a href=\"http://localhost:8088/login/oauth2/code/keycloak\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8088/login/oauth2/code/keycloak</a>\nAccess Type: public에서 confidential로 설정\nOAuth2의 \"Client Credentials\" 타입이 활성화된다.</p>\n</blockquote>\n</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/156488402-9cbe5c86-bf4f-43df-a1d0-1a9468b07cd7.png\" alt=\"image\"></p>\n<ul>\n<li>'Save'를 눌러 저장한다.</li>\n<li>'Credentials' 탭을 눌러, Client의 Secret 정보가 발급됨을 확인한다.</li>\n</ul>\n<h4 id=\"권한role-및-사용자-설정\"><a href=\"#%EA%B6%8C%ED%95%9Crole-%EB%B0%8F-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>권한(Role) 및 사용자 설정</h4>\n<ul>\n<li>'Roles' 탭을 눌러 Client의 Local Role을 추가한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/156489319-547b9359-9ab6-48a8-b60e-840f64dd0dae.png\" alt=\"image\"></li>\n<li>아래 목록처럼 나타나도록 Role 이름을 부여한다.\n<img src=\"https://user-images.githubusercontent.com/35618409/156489389-068e1763-45cb-467c-ac7f-cef9ff71aba0.png\" alt=\"image\"></li>\n</ul>\n<ul>\n<li>\n<p>왼쪽 메뉴에서 Users를 눌러 사용자를 등록한다.</p>\n<blockquote>\n<p>사용자 정보는 Custom하게 생성해 본다. (User와 Admin 계정포함)\n<img src=\"https://user-images.githubusercontent.com/35618409/156489961-925921e0-fccc-4962-84cb-a48c095112ce.png\" alt=\"image\"></p>\n</blockquote>\n</li>\n<li>등록 후, Credentials 탭에서 비밀번호를 등록하는데 이때, Temporary를 Off로 설정한다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/156490161-f7f4d714-bb17-4b21-9931-3b26608e9cd1.png\" alt=\"image\"></p>\n<ul>\n<li>User 등록이 끝나면, Role과 사용자를 매핑한다.</li>\n<li>등록한 사용자 각각에서 'Role Mappings' 탭을 눌러 Client의 Local Role을 선택해 준다.\n<img src=\"https://user-images.githubusercontent.com/35618409/156490674-2c253aa0-44b3-45fb-be21-3fcc3952e2ed.png\" alt=\"image\"></li>\n</ul>\n<blockquote>\n<p>User 계정에는 'ORDER_CUSTOMER' 역할 매핑\nAdmin 계정에는 'ORDER_ADMIN', 'ORDER_CUSTOMER' 역할 매핑</p>\n</blockquote>\n<ul>\n<li>이로써, 간단하게 Keycloak 설정을 마무리한다.</li>\n</ul>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Keycloak Authorization 서버 설정","anchor":"#keycloak-authorization-서버-설정"},{"depth":3,"value":"Keycloak기반 OAuth2 - Authorization Svr","anchor":"#keycloak기반-oauth2---authorization-svr"},{"depth":4,"value":"OAuth2 Stackholders","anchor":"#oauth2-stackholders"},{"depth":4,"value":"Keycloak 시작","anchor":"#keycloak-시작"},{"depth":4,"value":"Keycloak 설정","anchor":"#keycloak-설정"},{"depth":4,"value":"권한(Role) 및 사용자 설정","anchor":"#권한role-및-사용자-설정"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}