{"hash":"82edfc9c503203a4b89aaf7ee02c1b0930a87be2","data":{"markdownPage":{"id":"7e279c02a153401f765f0ee88ad10a11","title":"[구현] 데이터프로젝션-컴포지트서비스","description":"","path":"/development/dp-composite-svc/","timeToRead":2,"content":"<h1 id=\"구현-데이터프로젝션-컴포지트서비스\"><a href=\"#%EA%B5%AC%ED%98%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%94%84%EB%A1%9C%EC%A0%9D%EC%85%98-%EC%BB%B4%ED%8F%AC%EC%A7%80%ED%8A%B8%EC%84%9C%EB%B9%84%EC%8A%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[구현] 데이터프로젝션-컴포지트서비스</h1>\n<h3 id=\"composite-서비스에-의한-데이터-통합\"><a href=\"#composite-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-%EC%9D%98%ED%95%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%86%B5%ED%95%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Composite 서비스에 의한 데이터 통합</h3>\n<ul>\n<li>\n<p>개요 참조</p>\n<ul>\n<li><a href=\"http://www.msaschool.io/operation/integration/integration-five/\" target=\"_blank\" rel=\"noopener noreferrer\">http://www.msaschool.io/operation/integration/integration-five/</a></li>\n</ul>\n</li>\n<li>주문,상품,배송 서비스를 모두 기동한다.\n- 터미널 3개를 열어서 각각의 프로젝트로 이동한 후, run을 실행한다.\n- 주문서비스 기동(8081)</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd reqres_orders\nmvn spring-boot:run</code></pre>\n<ul>\n<li>상품서비스 기동(8085)</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd reqres_products\nmvn spring-boot:run</code></pre>\n<ul>\n<li>배송서비스 기동(8082)</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd reqres_delivery\nmvn spring-boot:run</code></pre>\n<ul>\n<li>1개의 주문을 생성한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">http localhost:8081/orders productId=1 quantity=1 customerId=\"1@uengine.org\"</code></pre>\n<ul>\n<li>composite_service 서비스를 기동(8088) 한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd composite_service\nmvn spring-boot:run</code></pre>\n<ul>\n<li>CompositeService.java 파일의 getOrderByCustomerId 메서드 내용을 파악한다.</li>\n<li>getOrderByCustomerId 메서드안에서 3개의 서비스를 모두 호출하고, 데이터를 수집하여 보여준다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">http localhost:8088/composite/orders/1@uengine.org</code></pre>\n<h4 id=\"장애전파-확인\"><a href=\"#%EC%9E%A5%EC%95%A0%EC%A0%84%ED%8C%8C-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>장애전파 확인</h4>\n<ol>\n<li>주문,배송,상품중 1개의 서비스라도 동작을 안하게 되면 에러가 발생한다.  </li>\n<li>3개중 1개의 서비스에서 호출이 늦어지면 전체 조회는 늦어진다.  </li>\n</ol>\n<ul>\n<li>reqres_products 서비스의 ProductController.java 파일의 productStockCheck 을 확인 한다.</li>\n<li>thread.sleep 부분을 주석 해제 한 후, reqres_products 서비스를 재시작한다.</li>\n<li>한개의 서비스가 0.5초 느려졌지만 컴포지트 서비스를 통하여 데이터를 가져오는 api도 전파된 시간만큼 느려진다.</li>\n</ul>\n<h4 id=\"단점-경험-정리\"><a href=\"#%EB%8B%A8%EC%A0%90-%EA%B2%BD%ED%97%98-%EC%A0%95%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단점 경험 정리</h4>\n<ul>\n<li>주문, 배송, 상품 서비스가 모두 가동중이어야 데이터 조회가 된다.</li>\n<li>주문이력이 많을시에 모든 데이터를 조회 하기때문에 시간이 많이 걸린다.</li>\n<li>각 호출 API 별로 return 되는 data 를 알고 있어야 한다. ( 각 서비스에서 변경시 잦은 변경 요청)</li>\n<li>1개의 서비스에서 호출이 늦어지면 전체 조회는 늦어진다.</li>\n</ul>\n<h4 id=\"service-clear\"><a href=\"#service-clear\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Service Clear</h4>\n<ul>\n<li>다음 Lab을 위해 기동된 모든 서비스 종료</li>\n<li>808x의 모든 Process Kill</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kill -9 `netstat -lntp|grep 808|awk &#39;{ print $7 }&#39;|grep -o &#39;[0-9]*&#39;`</code></pre>\n<h4 id=\"구현관련-시사점\"><a href=\"#%EA%B5%AC%ED%98%84%EA%B4%80%EB%A0%A8-%EC%8B%9C%EC%82%AC%EC%A0%90\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>구현관련 시사점</h4>\n<ol>\n<li>HATEOAS 링크: 각 주문건에 대한 배송정보를 links.delivery.href 로 제공해줄 수 있도록 하기 위한 구현:</li>\n</ol>\n<ul>\n<li>order의 config/Config.java</li>\n</ul>\n<pre class=\"language-javascript\"><code class=\"language-javascript\">\t@<span class=\"token maybe-class-name\">Bean</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token maybe-class-name\">ResourceProcessor</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Resource</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Order</span><span class=\"token operator\">>></span> <span class=\"token function\">orderProcessor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token keyword control-flow\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ResourceProcessor</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Resource</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Order</span><span class=\"token operator\">>></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t\t@<span class=\"token maybe-class-name\">Override</span>\n\t\t\t<span class=\"token keyword\">public</span> <span class=\"token maybe-class-name\">Resource</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Order</span><span class=\"token operator\">></span> <span class=\"token function\">process</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token maybe-class-name\">Resource</span><span class=\"token operator\">&lt;</span><span class=\"token maybe-class-name\">Order</span><span class=\"token operator\">></span> resource</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t\t\tresource<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Link</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/deliveries/search/findByOrderIdOrderByDeliveryIdDesc?orderId=\"</span> <span class=\"token operator\">+</span> resource<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getContent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"delivery\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword control-flow\">return</span> resource<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre>\n<h3 id=\"참고-graph-ql-in-java-spring\"><a href=\"#%EC%B0%B8%EA%B3%A0-graph-ql-in-java-spring\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>참고: Graph QL in Java Spring</h3>\n<p><a href=\"https://www.baeldung.com/spring-graphql\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.baeldung.com/spring-graphql</a></p>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" 데이터프로젝션-컴포지트서비스","anchor":"#구현-데이터프로젝션-컴포지트서비스"},{"depth":3,"value":"Composite 서비스에 의한 데이터 통합","anchor":"#composite-서비스에-의한-데이터-통합"},{"depth":4,"value":"장애전파 확인","anchor":"#장애전파-확인"},{"depth":4,"value":"단점 경험 정리","anchor":"#단점-경험-정리"},{"depth":4,"value":"Service Clear","anchor":"#service-clear"},{"depth":4,"value":"구현관련 시사점","anchor":"#구현관련-시사점"},{"depth":3,"value":"참고: Graph QL in Java Spring","anchor":"#참고-graph-ql-in-java-spring"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}}]}},"context":{}}