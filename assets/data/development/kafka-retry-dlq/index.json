{"hash":"70daf0702732bebfabe4090caf1cfcfa2eddd102","data":{"markdownPage":{"id":"619eb74e8e698ab73e1563bb4a597398","title":"Retry & Dead Letter Queue","description":"","path":"/development/kafka-retry-dlq/","timeToRead":3,"content":"<h1 id=\"retry--dead-letter-queue\"><a href=\"#retry--dead-letter-queue\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Retry &#x26; Dead Letter Queue</h1>\n<h3 id=\"retry--dlq\"><a href=\"#retry--dlq\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Retry &#x26; DLQ</h3>\n<h4 id=\"kafka-retry\"><a href=\"#kafka-retry\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Retry</h4>\n<ul>\n<li>Consumer가 message를 처리하던 중 오류가 발생하면 해당 Message를 다시 Polling하여 처리해야 한다. </li>\n<li>이를 Retry라고 하며, 간단하게 Kafka 설정으로 동작할 수 있다. </li>\n<li>Product 마이크로서비스 application.yml 화일의 cloud.stream.bindings.event-in 하위의 설정을 주석해제하고 저장한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">bindings:\n  event-in:\n    group: product\n    destination: kafkatest\n    contentType: application/json\n    consumer:\n      max-attempts: 5 \n      back-off-initial-interval: 1000\n      back-off-max-interval: 1000\n      back-off-multiplier: 1.0\n      defaultRetryable: false  </code></pre>\n<ul>\n<li>3번의 retry를 수행하는데 Retry시 백오프 초기간격이 1초, 이후 최대 1초 간격으로 retry를 실행한다. </li>\n<li>Product 서비스의 PolicyHandler.java에서 아래 코드의 블럭주석을 해제하고 기존 메서드를 블럭주석 처리한다. </li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaProcessor</span><span class=\"token punctuation\">.</span>INPUT<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">wheneverOrderPlaced_PrintMessage</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">OrderPlaced</span> orderPlaced<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Entering listener: \"</span> <span class=\"token operator\">+</span> orderPlaced<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Entering listener: \"</span> <span class=\"token operator\">+</span> orderPlaced<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RuntimeException</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>Order와 Product 마이크로서비스를 기동한다.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> order\nmvn spring-boot:run</code></pre>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> product\nmvn spring-boot:run</code></pre>\n<ul>\n<li>Order 서비스에 포스팅하여 Kafka Event를 발행한다.</li>\n<li>Product에서 Message를 subscribe하여 내용을 출력한다. </li>\n<li>throw new RuntimeException에 의해 Kafka retry가 수행되는지 Console의 log로 확인한다.</li>\n<li>허나, </li>\n<li>해당 메시지는 처리될 수 없으므로 파티션 Lag가 항상 잔존하게 된다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">$kafka_home/bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group product --describe</code></pre>\n<ul>\n<li>이는 별도의 Topic에 저장한 후 백오피스에서 처리해야 할 대상인 것이다. </li>\n</ul>\n<h4 id=\"kafka-dead-letter-queuedlq\"><a href=\"#kafka-dead-letter-queuedlq\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Dead Letter Queue(DLQ)</h4>\n<ul>\n<li>Kafka에서 retry를 통해서도 처리하지 못하는 message를 Posion pill이라고 한다.</li>\n<li>Kafka에서 Posion pill은 별도의 메시지 저장소인 DLQ로 보내지게 된다. </li>\n<li>DLQ는 또 하나의 topic이며 Consumer에서 정상적으로 처리되지 못한 message들이 쌓여있다. </li>\n<li>DLQ를 설정하기 위해서 아래와 같이 Product의 application.yml를 변경한다. </li>\n<li>cloud.stream.kafka 아래에 있는 아래 설정을 주석해제 한다. </li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">bindings</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">event-in</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">consumer</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">enableDlq</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n      <span class=\"token key atrule\">dlqName</span><span class=\"token punctuation\">:</span> dlq<span class=\"token punctuation\">-</span>kafkatest\n      <span class=\"token key atrule\">dlqPartitions</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></code></pre>\n<ul>\n<li>저장 후 Product 마이크로서비스를 재기동한다.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> product\nmvn spring-boot:run</code></pre>\n<blockquote>\n<p>Product 서비스가 기동되면서 Retry를 반복하게 되고, 그래도 처리하지 못한 메시지를 DLQ로 보내는 것이 Console에 확인된다.\nSent to DLQ  a message with key='null' and payload='{123, 34, 101, 118, 101, 110, 116, 84, 121, 112, 1...' received from 0</p>\n</blockquote>\n<ul>\n<li>설정에서 지정한 DLQ 토픽이 생성되었는지 확인한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">$kafka_home/bin/kafka-topics.sh --bootstrap-server http://localhost:9092  --list</code></pre>\n<h4 id=\"kafka-dlq-test\"><a href=\"#kafka-dlq-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka DLQ Test</h4>\n<ul>\n<li>Order 서비스에 포스팅하여 Kafka Event를 추가 발행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST :8081/orders message=5th-Order</code></pre>\n<ul>\n<li>Product에서 retry 3번 시도 후, 자동으로 DLQ로 보낸다. </li>\n<li>아래 명령어를 통해 DLQ에 해당 message가 쌓였는지 확인한다. </li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">$kafka_home/bin/kafka-console-consumer.sh --bootstrap-server http://localhost:9092 --topic dlq-kafkatest --from-beginning</code></pre>\n<ul>\n<li>커밋모드가 '자동'일때 Dlq에 처리되지 않은 메세지를 보낸 후, 자동으로 Offset을 증가시켜 Lag가 쌓이지 않게 된다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">$kafka_home/bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group product --describe</code></pre>\n<h4 id=\"kafka-수동모드에서의-retry-dlq\"><a href=\"#kafka-%EC%88%98%EB%8F%99%EB%AA%A8%EB%93%9C%EC%97%90%EC%84%9C%EC%9D%98-retry-dlq\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 수동모드에서의 Retry, DLQ</h4>\n<ul>\n<li>커밋모드가 수동일때에도 동일하게 동작하는지 확인한다.</li>\n<li>\n<p>Product 서비스의 커밋모드를 수정한다. </p>\n<blockquote>\n<p>cloud.stream.kafka 아래에 있는 Dlq설정 위에 'autoCommitOffset: false'를 추가하고 저장한다. </p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">bindings</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">event-in</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">consumer</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">autoCommitOffset</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span> <span class=\"token comment\"># 이 라인만 추가</span>\n      <span class=\"token key atrule\">enableDlq</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n      <span class=\"token key atrule\">dlqName</span><span class=\"token punctuation\">:</span> dlq<span class=\"token punctuation\">-</span>kafkatest\n      <span class=\"token key atrule\">dlqPartitions</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span></code></pre>\n<ul>\n<li>Product 서비스의 PolicyHandler.java에서 아래 코드를 삽입하고, 기존 메서드를 블럭주석 처리한다. </li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaProcessor</span><span class=\"token punctuation\">.</span>INPUT<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">wheneverOrderPlaced_PrintMessage2</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">OrderPlaced</span> orderPlaced<span class=\"token punctuation\">,</span> \n                    <span class=\"token annotation punctuation\">@Header</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaHeaders</span><span class=\"token punctuation\">.</span>ACKNOWLEDGMENT<span class=\"token punctuation\">)</span> <span class=\"token class-name\">Acknowledgment</span> acknowledgment<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">String</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Entering listener: \"</span> <span class=\"token operator\">+</span> orderPlaced<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Entering listener: \"</span> <span class=\"token operator\">+</span> orderPlaced<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            \n            <span class=\"token class-name\">String</span> idx <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// raise Exception.</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            acknowledgment<span class=\"token punctuation\">.</span><span class=\"token function\">acknowledge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>저장 후 Product 마이크로서비스를 재기동한다.</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> product\nmvn spring-boot:run</code></pre>\n<ul>\n<li>Order 서비스에 포스팅하여 Kafka Event를 추가 발행한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">http POST :8081/orders message=7th-Order</code></pre>\n<ul>\n<li>PolicyHandler의 명시적 Exception Code로 인해, Manual Commit과 Retry, DLQ 전송이 일어난다.</li>\n<li>수동커밋 모드에서도  Lag가 남지 않으며 DLQ에도 미처리된 메시지가 정상적으로 적재됨을 최종 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">$kafka_home/bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --group product --describe\n$kafka_home/bin/kafka-console-consumer.sh --bootstrap-server http://localhost:9092 --topic dlq-kafkatest --from-beginning</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Retry & Dead Letter Queue","anchor":"#retry--dead-letter-queue"},{"depth":3,"value":"Retry & DLQ","anchor":"#retry--dlq"},{"depth":4,"value":"Kafka Retry","anchor":"#kafka-retry"},{"depth":4,"value":"Kafka Dead Letter Queue(DLQ)","anchor":"#kafka-dead-letter-queuedlq"},{"depth":4,"value":"Kafka DLQ Test","anchor":"#kafka-dlq-test"},{"depth":4,"value":"Kafka 수동모드에서의 Retry, DLQ","anchor":"#kafka-수동모드에서의-retry-dlq"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}}]}},"context":{}}