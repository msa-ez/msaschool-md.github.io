{"hash":"49f02bf9a1ddbf017efeb189302ebd145a2955d8","data":{"markdownPage":{"id":"a1dc1f9cbb8c643989748fc8683dba3c","title":"Kafka Scaling ","description":"","path":"/development/kafka-scaling/","timeToRead":3,"content":"<h1 id=\"kafka-scaling\"><a href=\"#kafka-scaling\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Scaling</h1>\n<h1 id=\"kafka-scaling-1\"><a href=\"#kafka-scaling-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Scaling</h1>\n<h3 id=\"kafka-스케일링\"><a href=\"#kafka-%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 스케일링</h3>\n<h4 id=\"kafka-partition-vs-consumers\"><a href=\"#kafka-partition-vs-consumers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Partition vs. Consumers</h4>\n<ul>\n<li>Kafka Topic 생성시, default partition은 1개로 생성된다. </li>\n<li>kafka에서 하나의 Partition은 반드시 하나의 Consumer가 매칭되어 메시지를 소비한다. </li>\n<li>Partiton 수보다 동일한 Group id를 가진 Consumer 수가 많다면 일부 Consumer들은 partition에 binding되지 못해 message를 Polling 하지 못하는 현상이 일어난다. </li>\n<li>아래의 Instruction을 따라 일부 Consumer가 메시지를 poll 해오지 못하는 현상을 확인한다. </li>\n<li>Order 서비스 시작</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> order\nmvn spring-boot:run</code></pre>\n<ul>\n<li>inventory 서비스 시작 (port=8082)</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> inventory\nmvn spring-boot:run</code></pre>\n<ul>\n<li>inventory 2 서비스 시작 (port=8083)</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> inventory\nmvn spring-boot:run -Dspring-boot.run.arguments<span class=\"token operator\">=</span>--server.port<span class=\"token operator\">=</span><span class=\"token number\">8083</span></code></pre>\n<blockquote>\n<p>inventory1 서비스와는 달리 inventory2 마이크로서비스의 Console 창을 통해 파티션 할당이 일어나지 않았음을 확인할 수 있다.\npartitions assigned: []</p>\n</blockquote>\n<ul>\n<li>Consumer 그룹정보를 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose exec -it kafka /bin/bash\ncd /bin\n\n./kafka-topics --bootstrap-server 127.0.0.1:9092 --topic labshoppubsub --describe\n\n./kafka-consumer-groups --bootstrap-server localhost:9092 --describe --group inventory</code></pre>\n<blockquote>\n<p>Inventory Group 의  Consumer (마이크로서비스 레플리카)가 2개임에도 파티션이 1개이므로, 매칭된 Consumer가  1개로 확인된다.</p>\n</blockquote>\n<ul>\n<li>실험을 위하여 8082, 8083 의 inventory 에 각각 10개의 재고를 등록한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories id=1 stock=10\nhttp :8083/inventories id=1 stock=10</code></pre>\n<ul>\n<li>주문 4건을 등록한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders productId=1 qty=1\nhttp :8081/orders productId=1 qty=1\nhttp :8081/orders productId=1 qty=1\nhttp :8081/orders productId=1 qty=1</code></pre>\n<ul>\n<li>해당 주문에 대한 재고 감소가 8082 혹은 8083 한 곳에서만 발생한 것을 확인한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories/1\nhttp :8083/inventories/1</code></pre>\n<h4 id=\"kafka-partition-scale-out\"><a href=\"#kafka-partition-scale-out\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Partition Scale out</h4>\n<ul>\n<li>Kafka Partition을 확장한다. </li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">./kafka-topics --bootstrap-server 127.0.0.1:9092 --alter --topic labshoppubsub -partitions 2</code></pre>\n<ul>\n<li>Inventory2 마이크로서비스를 재시작하거나 2~3분 정도 기다리면 Partition Rebalancing이 일어나면서 Inventory2 서비스도 partition assigned로 바뀌며 message를 Polling할 수 있는 상태로 변경된다.</li>\n<li>토픽정보와 Consumer Group 정보를 재확인한다.</li>\n</ul>\n<blockquote>\n<p>Partition 0,1 각각에 Consumer가 매핑된 것을 확인할 수 있다.</p>\n</blockquote>\n<ul>\n<li>Order 서비스에 POST로 메시지를 발행하면 Inventory 1, Inventory 2 서비스가 차례로 메시지를 수신하기 때문에 8082, 8083이 나누어서 재고량이 1씩 감소된다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders productId=1 qty=1\nhttp :8082/inventories\nhttp :8083/inventories\n\nhttp :8081/orders productId=1 qty=1\nhttp :8082/inventories\nhttp :8083/inventories\n\nhttp :8081/orders productId=1 qty=1\nhttp :8082/inventories\nhttp :8083/inventories</code></pre>\n<blockquote>\n<p>물론, 실제 inventory 이 production 될때는 같은 데이터베이스를 사용하도록 production 될 것이기 때문에 재고량의 차이가 생기지는 않는다.</p>\n</blockquote>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Kafka Scaling","anchor":"#kafka-scaling"},{"depth":1,"value":"Kafka Scaling","anchor":"#kafka-scaling-1"},{"depth":3,"value":"Kafka 스케일링","anchor":"#kafka-스케일링"},{"depth":4,"value":"Kafka Partition vs. Consumers","anchor":"#kafka-partition-vs-consumers"},{"depth":4,"value":"Kafka Partition Scale out","anchor":"#kafka-partition-scale-out"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}}]}},"context":{}}