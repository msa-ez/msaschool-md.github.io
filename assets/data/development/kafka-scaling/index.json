{"hash":"639846ab77f2d650b364be948c0c3d68be620b02","data":{"markdownPage":{"id":"a1dc1f9cbb8c643989748fc8683dba3c","title":"Kafka 스케일링","description":"","path":"/development/kafka-scaling/","timeToRead":1,"content":"<h1 id=\"kafka-스케일링\"><a href=\"#kafka-%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 스케일링</h1>\n<h3 id=\"kafka-스케일링-1\"><a href=\"#kafka-%EC%8A%A4%EC%BC%80%EC%9D%BC%EB%A7%81-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka 스케일링</h3>\n<h4 id=\"kafka-partition-vs-consumers\"><a href=\"#kafka-partition-vs-consumers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Partition vs. Consumers</h4>\n<ul>\n<li>Kafka Topic 생성시, default partition은 1개로 생성된다. </li>\n<li>kafka에서 하나의 Partition은 반드시 하나의 Consumer가 매칭되어 메시지를 소비한다. </li>\n<li>Partiton 수보다 동일한 Group id를 가진 Consumer 수가 많다면 일부 Consumer들은 partition에 binding되지 못해 message를 Polling 하지 못하는 현상이 일어난다. </li>\n<li>아래의 Instruction을 따라 일부 Consumer가 메시지를 poll 해오지 못하는 현상을 확인한다. </li>\n<li>Order 서비스 시작</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> order\nmvn spring-boot:run</code></pre>\n<ul>\n<li>Product1 서비스 시작</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> product1\nmvn spring-boot:run</code></pre>\n<ul>\n<li>Product2 서비스 시작</li>\n</ul>\n<pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">cd</span> product2\nmvn spring-boot:run</code></pre>\n<blockquote>\n<p>Product1 서비스와는 달리 Product2 마이크로서비스의 Console 창을 통해 파티션 할당이 일어나지 않았음을 확인할 수 있다.\npartitions assigned: []</p>\n</blockquote>\n<ul>\n<li>토픽정보와 Consumer 그룹정보를 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">/usr/local/kafka/bin/kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic kafkatest --describe\n/usr/local/kafka/bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group product</code></pre>\n<blockquote>\n<p>Product Consumer가 2개임에도 파티션이 1개이므로, 매칭된 Consumer가  1개로 확인된다.</p>\n</blockquote>\n<h4 id=\"kafka-partition-scale-out\"><a href=\"#kafka-partition-scale-out\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Kafka Partition Scale out</h4>\n<ul>\n<li>Kafka Partition을 확장한다. </li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">$kafka_home/bin/kafka-topics.sh --zookeeper localhost:2181 --alter --topic kafkatest -partitions 2</code></pre>\n<ul>\n<li>Product2 마이크로서비스를 재시작하거나 2~3분 정도 기다리면 Partition Rebalancing이 일어나면서 Product2 서비스도 partition assigned로 바뀌며 message를 Polling할 수 있는 상태로 변경된다.</li>\n<li>토픽정보와 Consumer Group 정보를 재확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">/usr/local/kafka/bin/kafka-topics.sh --bootstrap-server 127.0.0.1:9092 --topic kafkatest --describe\n/usr/local/kafka/bin/kafka-consumer-groups.sh --bootstrap-server localhost:9092 --describe --group product</code></pre>\n<blockquote>\n<p>Partition 0,1 각각에 Consumer가 매핑된 것을 확인할 수 있다.</p>\n</blockquote>\n<ul>\n<li>Order 서비스에 POST로 메시지를 발행하면 Product 1, Product 2 서비스가 차례로 메시지를 수신한다. </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST :8081/orders message=1st-Order\nhttp POST :8081/orders message=2nd-Order\nhttp POST :8081/orders message=3rd-Order\nhttp POST :8081/orders message=4th-Order</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Kafka 스케일링","anchor":"#kafka-스케일링"},{"depth":3,"value":"Kafka 스케일링","anchor":"#kafka-스케일링-1"},{"depth":4,"value":"Kafka Partition vs. Consumers","anchor":"#kafka-partition-vs-consumers"},{"depth":4,"value":"Kafka Partition Scale out","anchor":"#kafka-partition-scale-out"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}