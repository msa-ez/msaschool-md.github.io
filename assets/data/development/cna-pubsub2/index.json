{"hash":"f58eca0934380d084e357b0b95045cf3b386277b","data":{"markdownPage":{"id":"0aca9d9e171e80621ec9af60da24c842","title":"[구현] Pub/Sub - Compensation and Correlation","description":"","path":"/development/cna-pubsub2/","timeToRead":2,"content":"<h1 id=\"구현-pubsub---compensation-and-correlation\"><a href=\"#%EA%B5%AC%ED%98%84-pubsub---compensation-and-correlation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[구현] Pub/Sub - Compensation and Correlation</h1>\n<h3 id=\"compensation-and-correlation\"><a href=\"#compensation-and-correlation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Compensation and Correlation</h3>\n<p>이전 랩에서 주문을 생성하는 OrderPlaced 라는 이벤트를 발행하였다.<br>\n이번 랩에서는 주문서비스에서 주문을 취소하는 OrderCancelled 라는 이벤트를 발행 하고,<br>\n배송 서비스에서는 OrderCancelled 이벤트를 수신하여 DeliveryCancelled 라는 이벤트를 발행한다.  </p>\n<h3 id=\"작업순서\"><a href=\"#%EC%9E%91%EC%97%85%EC%88%9C%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>작업순서</h3>\n<h4 id=\"주문서비스에서-주문을-취소하는-작업\"><a href=\"#%EC%A3%BC%EB%AC%B8%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90%EC%84%9C-%EC%A3%BC%EB%AC%B8%EC%9D%84-%EC%B7%A8%EC%86%8C%ED%95%98%EB%8A%94-%EC%9E%91%EC%97%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>주문서비스에서 주문을 취소하는 작업</h4>\n<p>Aggregate 에서 이벤트 발행 </p>\n<ul>\n<li>Ctrl + p로 Order.java 리소스 찾기  </li>\n<li>Order.java 27라인에 아래 로직 추가 후 저장</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PreRemove</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPreRemove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">OrderCancelled</span> orderCancelled <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderCancelled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">BeanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyProperties</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> orderCancelled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    orderCancelled<span class=\"token punctuation\">.</span><span class=\"token function\">publishAfterCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>OrderCancelled 도메인 이벤트 클래스 생성  </p>\n<ul>\n<li>shopmall 패키지에서 마우스 오른쪽 메뉴에서 'New File' 선택</li>\n<li>OrderCancelled.java 파일을 생성 한 후, OrderPlaced.java 파일 내용을 모두 복사한다.</li>\n<li>public class OrderCancelled 로 클래스명을 변경하고 저장한다.</li>\n</ul>\n<p>주문삭제 커맨드를 실행하여 OrderCancelled 이벤트 발행 확인</p>\n<ul>\n<li>주문 서비스 및 카프카 Consumer 실행 </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">mvn spring-boot:run\n/usr/local/kafka/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic shopmall --from-beginning</code></pre>\n<ul>\n<li>주문 생성 후, 삭제     </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 productName=&quot;TV&quot; qty=3\nhttp DELETE localhost:8081/orders/1</code></pre>\n<h4 id=\"배송서비스에서-주문-삭제시-배송을-취소하는-작업\"><a href=\"#%EB%B0%B0%EC%86%A1%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90%EC%84%9C-%EC%A3%BC%EB%AC%B8-%EC%82%AD%EC%A0%9C%EC%8B%9C-%EB%B0%B0%EC%86%A1%EC%9D%84-%EC%B7%A8%EC%86%8C%ED%95%98%EB%8A%94-%EC%9E%91%EC%97%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>배송서비스에서 주문 삭제시 배송을 취소하는 작업</h4>\n<p>배송서비스의 PolicyHandler 코드 수정 </p>\n<ul>\n<li>PolicyHandler.java 29라인에 아래 이벤트 수신 시, 실행할 로직을 추가한다. </li>\n<li>List 클래스에 대한 임포트를 추가해 준다.(import java.util.List;)</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@StreamListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">KafkaProcessor</span><span class=\"token punctuation\">.</span>INPUT<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">wheneverOrderCancelled_DeleteDelivery</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@Payload</span> <span class=\"token class-name\">OrderCancelled</span> orderCancelled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>orderCancelled<span class=\"token punctuation\">.</span><span class=\"token function\">isMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Delivery</span><span class=\"token punctuation\">></span></span> deliveryList <span class=\"token operator\">=</span> deliveryRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByOrderId</span><span class=\"token punctuation\">(</span>orderCancelled<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>deliveryList <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>deliveryList<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            deliveryRepository<span class=\"token punctuation\">.</span><span class=\"token function\">deleteAll</span><span class=\"token punctuation\">(</span>deliveryList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>OrderCancelled 도메인 이벤트 클래스 복제</p>\n<ul>\n<li>order 서비스의 OrderCancelled.java 파일을 복사하여 delivery 서비스의 shopmall 패키지에 붙여넣는다.  </li>\n</ul>\n<p>주문번호에 해당하는 배송을 취소하기 위해서는 주문 ID에 맞는 배송 Entity를 찾아야 한다.</p>\n<ul>\n<li>DeliveryRepository.java 파일에서 아래와 같이 주문 아이디별 배송을 찾는 로직을 추가(7라인)한다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Delivery</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">findByOrderId</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> orderId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre>\n<ul>\n<li>(import 구문이 필요하다. import java.util.List; )\n</li>\n</ul>\n<p>Delivery Aggregate 에서 삭제시 이벤트 발행</p>\n<ul>\n<li>Delivery.java 에 아래 로직 입력(25라인)</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PreRemove</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPreRemove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">DeliveryCancelled</span> deliveryCancelled <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DeliveryCancelled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">BeanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyProperties</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> deliveryCancelled<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    deliveryCancelled<span class=\"token punctuation\">.</span><span class=\"token function\">publishAfterCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre>\n<p>DeliveryCancelled 이벤트 생성</p>\n<ul>\n<li>DeliveryCancelled.java 파일을 생성 한 후, DeliveryStarted.java 파일의 내용을 복사하여 붙여 넣는다.  </li>\n<li>public class DeliveryCancelled 로 클래스명과 생성자 이름을 변경한다.</li>\n</ul>\n<p>확인</p>\n<ul>\n<li>파일 저장여부를 확인하고 주문과 배송서비스 모두 재기동한다.</li>\n<li>새로운 주문과 주문삭제 커맨드로 DeliveryCancelled 이벤트 발행 확인 </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 productName=&quot;TV&quot; qty=3\nhttp localhost:8081/orders\nhttp localhost:8082/deliveries\nhttp DELETE localhost:8081/orders/1</code></pre>\n<ul>\n<li>kafka Consumer에서 이벤트 확인</li>\n</ul>\n<h4 id=\"checkpoints-확인\"><a href=\"#checkpoints-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Checkpoints 확인</h4>\n<ul>\n<li>1번과 2번작업을 모두 정상적으로 실행한다.  </li>\n<li>IDE 상단의 메뉴에서 labs > 결과제츨 버튼을 클릭한다.  </li>\n</ul>\n<h4 id=\"service-clear\"><a href=\"#service-clear\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Service Clear</h4>\n<ul>\n<li>다음 Lab을 위해 기동된 모든 서비스 종료</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">fuser -k 8081/tcp\nfuser -k 8082/tcp</code></pre>\n<h4 id=\"상세설명\"><a href=\"#%EC%83%81%EC%84%B8%EC%84%A4%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상세설명</h4>\n<iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/l87qvRN_Qn0\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" Pub/Sub - Compensation and Correlation","anchor":"#구현-pubsub---compensation-and-correlation"},{"depth":3,"value":"Compensation and Correlation","anchor":"#compensation-and-correlation"},{"depth":3,"value":"작업순서","anchor":"#작업순서"},{"depth":4,"value":"주문서비스에서 주문을 취소하는 작업","anchor":"#주문서비스에서-주문을-취소하는-작업"},{"depth":4,"value":"배송서비스에서 주문 삭제시 배송을 취소하는 작업","anchor":"#배송서비스에서-주문-삭제시-배송을-취소하는-작업"},{"depth":4,"value":"Checkpoints 확인","anchor":"#checkpoints-확인"},{"depth":4,"value":"Service Clear","anchor":"#service-clear"},{"depth":4,"value":"상세설명","anchor":"#상세설명"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}