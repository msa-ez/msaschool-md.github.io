{"hash":"06a886723e5e9e504c2e092ae07219a81ecc6278","data":{"markdownPage":{"id":"b6ee9c1c33c72b014629b6acafed1edf","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation","description":"","path":"/development/compensation-correlation/","timeToRead":4,"content":"<h1 id=\"pubsub-방식의-연동---compensation-과-correlation\"><a href=\"#pubsub-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%97%B0%EB%8F%99---compensation-%EA%B3%BC-correlation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pub/Sub 방식의 연동 - Compensation 과 Correlation</h1>\n<h1 id=\"pubsub-방식의-연동---compensation-과-correlation-1\"><a href=\"#pubsub-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%97%B0%EB%8F%99---compensation-%EA%B3%BC-correlation-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pub/Sub 방식의 연동 - Compensation 과 Correlation</h1>\n<h3 id=\"compensation-and-correlation\"><a href=\"#compensation-and-correlation\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Compensation and Correlation</h3>\n<p>어떠한 이벤트로 인하여 발생한 변경사항들에 대하여 고객이 원하거나 어떠한 기술적 이유로 인하여 해당 트랜잭션을 취소해야 하는 경우 이를 원복하거나 보상해주는 처리를 Compensation 이라고 한다. 그리고 해당 취소건에 대하여 여러개의 마이크로 서비스 내의 데이터간 상관 관계를 키값으로 연결하여 취소해야 하는데, 이러한 관계값에 대한 처리를 Correlation 이라고 한다. </p>\n<h3 id=\"실습-시나리오\"><a href=\"#%EC%8B%A4%EC%8A%B5-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>실습 시나리오</h3>\n<p>이전 랩에서 주문을 생성하는 OrderPlaced 라는 이벤트를 발행하였다.<br>\n이번 랩에서는 주문서비스에서 주문을 취소하는 OrderCancelled 라는 이벤트를 발행 하고,  Inventory 에서는 해당 주문량에 대한 재고량을 다시 원복하는 Compensation을 수행한다. inventory 에 대해서는 해당 주문의 상품 id 를 상관관계 키 (Correlation Key)로 초기 주문되었던 개수만큼을 다시 추가하는 방법으로 복구가 이루어진다. </p>\n<h3 id=\"작업순서\"><a href=\"#%EC%9E%91%EC%97%85%EC%88%9C%EC%84%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>작업순서</h3>\n<h4 id=\"이벤트-스토밍\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-%EC%8A%A4%ED%86%A0%EB%B0%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 스토밍</h4>\n<ul>\n<li>\"cancel\" Command 의 부착. 이때 해당 이벤트는 Order Aggregate 의 왼쪽에 인접하도록 부착한다.</li>\n<li>cancel command의 설정창을 열고(더블클릭) http method 로 \"DELETE\" 를 선택한다.</li>\n<li>\"OrderCancelled\" Event 를 부착한다. cancel command 에 따라서 OrderCancelled 라는 이벤트를 발행하도록 Aggregate 의 우측편에 인접하도록 부착한다.</li>\n<li>OrderCancelled Event 의 속성을 Aggregate 의 것에서 복사한다 (Sync Attributes 클릭)</li>\n<li>cancel command 와 OrderCancelled event 를 선으로 연결한다.</li>\n<li>inventory bounded context 내에 Policy 를 추가하고 이름을 \"increase stock\" 으로 설정한다.</li>\n<li>OrderCancelled Event 와 \"increase stock\" Policy 를 연결한다.</li>\n</ul>\n<h4 id=\"코드의-생성\"><a href=\"#%EC%BD%94%EB%93%9C%EC%9D%98-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>코드의 생성</h4>\n<ul>\n<li>order/../ Order.java</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">   @PreRemove\n    public void onPreRemove() {\n        OrderCancelled orderCancelled = new OrderCancelled(this);\n        orderCancelled.publishAfterCommit();\n    }</code></pre>\n<ul>\n<li>order/../   OrderCancelled.java 와 inventory/../ OrderCancelled.java</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">package labshopcompensation.domain;\n\nimport java.util.*;\nimport labshopcompensation.domain.*;\nimport labshopcompensation.infra.AbstractEvent;\nimport lombok.*;\n\n@Data\n@ToString\npublic class OrderCancelled extends AbstractEvent {\n\n    private Long id;\n    private String productId;\n    private Integer qty;\n    private String customerId;\n    private Double amount;\n    private String status;\n    private String address;\n\n    public OrderCancelled(Order aggregate) {\n        super(aggregate);\n    }\n\n    public OrderCancelled() {\n        super();\n    }\n    // keep\n\n}</code></pre>\n<ul>\n<li>inventory/../ PolicyHandler.java 의 wheneverOrderCancelled_increaseStock method</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    @StreamListener(\n        value = KafkaProcessor.INPUT,\n        condition = &quot;headers[&#39;type&#39;]==&#39;OrderCancelled&#39;&quot;\n    )\n    public void wheneverOrderCancelled_IncreaseStock(\n        @Payload OrderCancelled orderCancelled\n    ) {\n        OrderCancelled event = orderCancelled;\n        System.out.println(\n            &quot;\\n\\n##### listener IncreaseStock : &quot; + orderCancelled + &quot;\\n\\n&quot;\n        );\n\n        // Sample Logic //\n        Inventory.increaseStock(event);\n    }</code></pre>\n<ul>\n<li>inventory/../ Inventory.java 의 increaseStock method</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    public static void increaseStock(OrderCancelled orderCancelled) {\n\n        /** fill out following code  */\n\n    }</code></pre>\n<h4 id=\"주문-취소와-이벤트-확인\"><a href=\"#%EC%A3%BC%EB%AC%B8-%EC%B7%A8%EC%86%8C%EC%99%80-%EC%9D%B4%EB%B2%A4%ED%8A%B8-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>주문 취소와 이벤트 확인</h4>\n<ul>\n<li>생성된 코드를 반영한 후, 주문을 서비스를 재기동 한다.</li>\n<li>초기 재고량 설정</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories id=1  stock=10</code></pre>\n<ul>\n<li>다음 명령으로 주문 생성한다:     </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 productName=TV qty=3</code></pre>\n<ul>\n<li>주문에 의한 재고량 확인:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories/1    # stock=7</code></pre>\n<ul>\n<li>주문을 취소한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http DELETE localhost:8081/orders/1</code></pre>\n<ul>\n<li>취소에 의한 재고량 확인:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories/1    # stock=10</code></pre>\n<ul>\n<li>Kafka consumer 를 이용하여 OrderCancelled 이벤트가 발행되는 것을 확인한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose exec -it kafka /bin/bash\ncd /bin\n\n./kafka-console-consumer --bootstrap-server localhost:9092 --topic labshopcompensation --from-beginning</code></pre>\n<h4 id=\"inventory-서비스의-구현\"><a href=\"#inventory-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>inventory 서비스의 구현</h4>\n<ul>\n<li>inventory의 Aggregate 인 Inventory.java  에 increaseStock method 를 다음과 같이 구현한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    public static void increaseStock(OrderCancelled orderCancelled) {\n\n        repository().findById(Long.valueOf(orderCancelled.getProductId())).ifPresent(inventory-&gt;{\n            \n            inventory.setStock(inventory.getStock() + orderCancelled.getQty()); \n            repository().save(inventory);\n\n\n         });\n\n    }</code></pre>\n<h3 id=\"확장시나리오-배송서비스에서-주문-삭제시-배송을-취소하는-작업\"><a href=\"#%ED%99%95%EC%9E%A5%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4-%EB%B0%B0%EC%86%A1%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90%EC%84%9C-%EC%A3%BC%EB%AC%B8-%EC%82%AD%EC%A0%9C%EC%8B%9C-%EB%B0%B0%EC%86%A1%EC%9D%84-%EC%B7%A8%EC%86%8C%ED%95%98%EB%8A%94-%EC%9E%91%EC%97%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>확장시나리오: 배송서비스에서 주문 삭제시 배송을 취소하는 작업</h3>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Pub/Sub 방식의 연동 - Compensation 과 Correlation","anchor":"#pubsub-방식의-연동---compensation-과-correlation"},{"depth":1,"value":"Pub/Sub 방식의 연동 - Compensation 과 Correlation","anchor":"#pubsub-방식의-연동---compensation-과-correlation-1"},{"depth":3,"value":"Compensation and Correlation","anchor":"#compensation-and-correlation"},{"depth":3,"value":"실습 시나리오","anchor":"#실습-시나리오"},{"depth":3,"value":"작업순서","anchor":"#작업순서"},{"depth":4,"value":"이벤트 스토밍","anchor":"#이벤트-스토밍"},{"depth":4,"value":"코드의 생성","anchor":"#코드의-생성"},{"depth":4,"value":"주문 취소와 이벤트 확인","anchor":"#주문-취소와-이벤트-확인"},{"depth":4,"value":"inventory 서비스의 구현","anchor":"#inventory-서비스의-구현"},{"depth":3,"value":"확장시나리오: 배송서비스에서 주문 삭제시 배송을 취소하는 작업","anchor":"#확장시나리오-배송서비스에서-주문-삭제시-배송을-취소하는-작업"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}}]}},"context":{}}