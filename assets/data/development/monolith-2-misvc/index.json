{"hash":"06a886723e5e9e504c2e092ae07219a81ecc6278","data":{"markdownPage":{"id":"ef4d8b57992d63248437c51e699b88c4","title":"Req/Res 방식의 MSA 연동 ","description":"","path":"/development/monolith-2-misvc/","timeToRead":6,"content":"<h1 id=\"reqres-방식의-msa-연동\"><a href=\"#reqres-%EB%B0%A9%EC%8B%9D%EC%9D%98-msa-%EC%97%B0%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Req/Res 방식의 MSA 연동</h1>\n<h1 id=\"reqres-방식의-msa-연동-1\"><a href=\"#reqres-%EB%B0%A9%EC%8B%9D%EC%9D%98-msa-%EC%97%B0%EB%8F%99-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Req/Res 방식의 MSA 연동</h1>\n<h3 id=\"monolith-서비스의-동작-구조-확인\"><a href=\"#monolith-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EB%8F%99%EC%9E%91-%EA%B5%AC%EC%A1%B0-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Monolith 서비스의 동작 구조 확인</h3>\n<p>모노리스 기반 쇼핑몰 서비스에서 inventory 서비스를 분리하고, Feign Client 를 사용해 모노리식 쇼핑몰과 분리된 마이크로서비스 분리하는 Lab 이다.<br>\nFeign Client 는 기존의 로컬 객체 인터페이스를 준수하면서 실제적으로는 원격 호출(Request/Response) 방식으로 서비스간의 통신을 가능하게 하여 레가시 코드의 변경을 최소화 하여 transform하는 방법이다.</p>\n<p>이전 랩에서 실행한 GitPod 환경을 로딩한다.</p>\n<ul>\n<li>monolith 서비스 기동</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd monolith\nmvn spring-boot:run\n\nhttp localhost:8081</code></pre>\n<ul>\n<li>Order.java 에서 inventory 로컬 객체를 통해 재고처리 중임을 확인:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    @PostPersist\n    public void onPostPersist() {\n        inventoryService().decreaseStock(Long.valueOf(getProductId()), new DecreaseStockCommand(getQty()));\n\n    }\n\n    @PrePersist\n    public void checkAvailability(){\n        if(inventoryService().getInventory(Long.valueOf(getProductId())).getStock() &lt; getQty()) throw new RuntimeException(&quot;Out of stock&quot;);\n    }\n\n    public static InventoryService inventoryService(){\n        InventoryService inventoryService = MonolithApplication.applicationContext.getBean(\n            InventoryService.class\n        );\n\n        return inventoryService; // 여기에 breakpoint 설정\n    }</code></pre>\n<ul>\n<li>Order.java의 inventoryService() 메서드에 디버그 포인트 설치</li>\n<li>\"return inventoryService;\" 라인의 라인번호 앞을 클릭하면, 빨간색의 원(breakpoint)이 나타남</li>\n<li>주문 발송  </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 quantity=3 customerId=&quot;1@uengine.org&quot; customerName=&quot;hong&quot; customerAddr=&quot;seoul&quot;</code></pre>\n<ul>\n<li>InventoryServiceImpl.java 를 통해서 처리가 되는 Monolith 임을 확인.</li>\n</ul>\n<h3 id=\"기존-monolith에서-일부-영역을-마이크로서비스로-분리\"><a href=\"#%EA%B8%B0%EC%A1%B4-monolith%EC%97%90%EC%84%9C-%EC%9D%BC%EB%B6%80-%EC%98%81%EC%97%AD%EC%9D%84-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A1%9C-%EB%B6%84%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>기존 Monolith에서 일부 영역을 마이크로서비스로 분리</h3>\n<p>본 랩에 주어진 기본 모델을 수정하기 위해 모델을 복제(FORK)한 다음, 도구를 활용하여 가이드에 따라 커스터마이징 한다.</p>\n<h4 id=\"이벤트스토밍\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8%EC%8A%A4%ED%86%A0%EB%B0%8D\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트스토밍</h4>\n<ul>\n<li>bounded context 를 추가하고 이름을 \"inventory\"로 설정</li>\n<li>inventory aggregate 객체들을 묶음 선택하여 inventory bounded context 내로 이동</li>\n</ul>\n<img width=\"874\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/190896320-72973cf1-c1dc-44f4-a46a-9be87d072284.png\">\n<ul>\n<li>재고량을 감소시키는 Command 의 추가: inventory BC 내에 Command  스티커를 추가하고, 이름을 \"decrease stock\" 으로 부여. 이때 Command 스티커는 Inventory Aggregate 스티커의 왼쪽에 인접하게 부착.</li>\n<li>Command 의 설정:  \"decrease stock\" command 를 더블클릭한 후, \"Controller\" 를 선택. Attribute로 name: qty, type: Integer 를 추가.</li>\n</ul>\n<img width=\"784\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/190896393-30889e96-6cbc-4e7f-9631-25c0d004635d.png\">\n<ul>\n<li>원격 호출선 연결:  monolith 내의 OrderPlaced Event 스티커와 inventory 의 decrease stock Command 스티커를 연결. 이때 Req/res 라는 표시가 나타남.</li>\n</ul>\n<img width=\"859\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/190896427-f91962cd-f8ab-4113-bd85-5abe1ada3bcd.png\">\n<h4 id=\"호출측-코드-확인과-구현\"><a href=\"#%ED%98%B8%EC%B6%9C%EC%B8%A1-%EC%BD%94%EB%93%9C-%ED%99%95%EC%9D%B8%EA%B3%BC-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>호출측 코드 확인과 구현</h4>\n<ul>\n<li>\n<p>이벤트 스토밍 결과 코드를 생성하고 push 한 후, Code 를 update 한다.</p>\n<blockquote>\n<p>Code Preview 메뉴에서 \"Commit &#x26; Push on Git\" 서브 메뉴를 통해 내 GitHub에 코드를 내보낸다.\n그러기 위해서는 MSAEz에 내 Github 토큰이 설정되어야 한다.</p>\n</blockquote>\n</li>\n<li>monolith/../ Order.java 의 @PostPersist 내에 호출을 위해 생성된 샘플코드를 확인하고 //here 부분과 같이 수정한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">     @PostPersist\n    public void onPostPersist() {\n        //Following code causes dependency to external APIs\n        // it is NOT A GOOD PRACTICE. instead, Event-Policy mapping is recommended.\n\n        labshopmonolith.external.DecreaseStockCommand decreaseStockCommand = new labshopmonolith.external.DecreaseStockCommand();\n        decreaseStockCommand.setQty(getQty()); //here\n        \n        // mappings goes here\n        MonolithApplication.applicationContext\n            .getBean(labshopmonolith.external.InventoryService.class)\n            .decreaseStock((Long.valueOf(getProductId())), decreaseStockCommand); //here\n\n        OrderPlaced orderPlaced = new OrderPlaced(this);\n        orderPlaced.publishAfterCommit();\n    }</code></pre>\n<blockquote>\n<p>우리는 decreaseStock stub 메서드를 로컬 객체를 호출하는것처럼 호출하지만 실제적으로는 inventory 원격객체를 호출하는 결과가 될 것이다.\n재고량 수정을 위하여 qty 값을 전달하는 Command 객체와 해당 제품 id 를 path 로 전달하는 첫번째 아규먼트로 productId를 전달한다.</p>\n</blockquote>\n<ul>\n<li>monolith/../ external 패키지 내에 생성된 FeignClient 관련 Stub 코드들을 참고한다 (InventoryService.java, DecreaseStockCommand.java, Inventory.java)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">@FeignClient(name = &quot;inventory&quot;, url = &quot;${api.url.inventory}&quot;)\npublic interface InventoryService {\n    @RequestMapping(\n        method = RequestMethod.PUT,\n        path = &quot;/inventories/{id}/decreasestock&quot;\n    )\n    public void decreaseStock(\n        @PathVariable(&quot;id&quot;) Long id,\n        @RequestBody DecreaseStockCommand decreaseStockCommand\n    );\n\n}</code></pre>\n<blockquote>\n<p>FeignClient 는 실제로는 inventory 원격객체를 호출하는 proxy 객체를 생성할 것이다. application.yaml 의 api.url.inventory 설정값의 url 로 PUT 메서드를 해당 path 로 호출하는 원격 호출의 구현체가 채워진다. </p>\n</blockquote>\n<h4 id=\"피호출측-소스코드의-확인과-구현\"><a href=\"#%ED%94%BC%ED%98%B8%EC%B6%9C%EC%B8%A1-%EC%86%8C%EC%8A%A4%EC%BD%94%EB%93%9C%EC%9D%98-%ED%99%95%EC%9D%B8%EA%B3%BC-%EA%B5%AC%ED%98%84\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>피호출측 소스코드의 확인과 구현</h4>\n<ul>\n<li>inventory/.. /infra/InventoryController.java</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">public class InventoryController {\n\n    @Autowired\n    InventoryRepository inventoryRepository;\n\n    @RequestMapping(\n        value = &quot;inventories/{id}/decreasestock&quot;,\n        method = RequestMethod.PUT,\n        produces = &quot;application/json;charset=UTF-8&quot;\n    )\n    public Inventory decreaseStock(\n        @PathVariable(value = &quot;id&quot;) Long id,\n        @RequestBody DecreaseStockCommand decreaseStockCommand,\n        HttpServletRequest request,\n        HttpServletResponse response\n    ) throws Exception {\n        System.out.println(&quot;##### /inventory/decreaseStock  called #####&quot;);\n        Optional&lt;Inventory&gt; optionalInventory = inventoryRepository.findById(\n            id\n        );\n\n        optionalInventory.orElseThrow(() -&gt; new Exception(&quot;No Entity Found&quot;));\n        Inventory inventory = optionalInventory.get();\n        inventory.decreaseStock(decreaseStockCommand);\n\n        inventoryRepository.save(inventory);\n        return inventory;\n    }\n}</code></pre>\n<blockquote>\n<p>decreaseStock 에 대한 원격호출을 받을 수 있는 REST Service Mapping 이다.\n호출을 받으면 Inventory 어그리거트의 decreaseStock 으로 전달하는 input adapter 역할을 한다(hexagonal architecture). 실제 비즈니스 로직 (재고량 감소)은 어그리거트 내부에서만 ubiquitous 언어로 구현되어야 한다.</p>\n</blockquote>\n<ul>\n<li>inventory/../Inventory.java 의 구현</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    public void decreaseStock(DecreaseStockCommand decreaseStockCommand) {\n        setStock(getStock() - decreaseStockCommand.getQty().longValue());\n    }</code></pre>\n<h4 id=\"inventory-서비스의-테스트\"><a href=\"#inventory-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>inventory 서비스의 테스트</h4>\n<ul>\n<li>inventory 서비스를 기동시키고 httpie 툴을 통하여 서비스가 잘 호출되는지 테스트한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd inventory\nmvn spring-boot:run</code></pre>\n<ul>\n<li>서비스 기동 후, \"could not be established. Broker may not be~..\" 오류가 발생한다.</li>\n<li>메시징 브로커인 Kafka가 실행되고 있지 않아서 발생하는 접속 오류이다.</li>\n<li>새로운 터미널에서 Kafka 서버를 기동한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose down\ndocker-compose up</code></pre>\n<ul>\n<li>새 터미널에서 테스트 전, http Client를 먼저 설치한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">pip install httpie</code></pre>\n<ul>\n<li>인벤토리에 테스트할 상품을 먼저 등록하고 사전 검증한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories id=1 stock=10\nhttp PUT :8082/inventories/1/decreasestock qty=3\nhttp :8082/inventories/1  # stock must be 7</code></pre>\n<h4 id=\"monolith-를-통하여-inventory-호출-테스트\"><a href=\"#monolith-%EB%A5%BC-%ED%86%B5%ED%95%98%EC%97%AC-inventory-%ED%98%B8%EC%B6%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>monolith 를 통하여 inventory 호출 테스트</h4>\n<ul>\n<li>monolith 를 기동시키고 실제 주문을 통하여 inventory 가 호출되는지 확인한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd monolith\nmvn spring-boot:run\n\n#새 터미널\nhttp :8081/orders productId=1 qty=5\nhttp :8082/inventories/1  # stock must be 2</code></pre>\n<h1 id=\"참고\"><a href=\"#%EC%B0%B8%EA%B3%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>참고</h1>\n<ol>\n<li>파일 다운로드 받기:  터미널 열고 > zip -r test.zip ./* 하신후, 생성된 test.zip 을 우클릭 다운로드</li>\n</ol>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Req/Res 방식의 MSA 연동","anchor":"#reqres-방식의-msa-연동"},{"depth":1,"value":"Req/Res 방식의 MSA 연동","anchor":"#reqres-방식의-msa-연동-1"},{"depth":3,"value":"Monolith 서비스의 동작 구조 확인","anchor":"#monolith-서비스의-동작-구조-확인"},{"depth":3,"value":"기존 Monolith에서 일부 영역을 마이크로서비스로 분리","anchor":"#기존-monolith에서-일부-영역을-마이크로서비스로-분리"},{"depth":4,"value":"이벤트스토밍","anchor":"#이벤트스토밍"},{"depth":4,"value":"호출측 코드 확인과 구현","anchor":"#호출측-코드-확인과-구현"},{"depth":4,"value":"피호출측 소스코드의 확인과 구현","anchor":"#피호출측-소스코드의-확인과-구현"},{"depth":4,"value":"inventory 서비스의 테스트","anchor":"#inventory-서비스의-테스트"},{"depth":4,"value":"monolith 를 통하여 inventory 호출 테스트","anchor":"#monolith-를-통하여-inventory-호출-테스트"},{"depth":1,"value":"참고","anchor":"#참고"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}}]}},"context":{}}