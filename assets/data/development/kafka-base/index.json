{"hash":"8ec2d2d769250ada18e8c764b3b6b292cc183178","data":{"markdownPage":{"id":"2df9bdc7651427fa227a808e65f87759","title":"JWT Token 기반 인증 인가","description":"","path":"/development/kafka-base/","timeToRead":5,"content":"<h1 id=\"jwt-token-기반-인증-인가\"><a href=\"#jwt-token-%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D-%EC%9D%B8%EA%B0%80\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT Token 기반 인증 인가</h1>\n<h1 id=\"jwt-token-기반-인증-인가-1\"><a href=\"#jwt-token-%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D-%EC%9D%B8%EA%B0%80-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT Token 기반 인증 인가</h1>\n<h3 id=\"jwt-토큰기반-인증-w-keycloak\"><a href=\"#jwt-%ED%86%A0%ED%81%B0%EA%B8%B0%EB%B0%98-%EC%9D%B8%EC%A6%9D-w-keycloak\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT 토큰기반 인증 w/ Keycloak</h3>\n<h4 id=\"oauth2-stackholders\"><a href=\"#oauth2-stackholders\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth2 Stackholders</h4>\n<ul>\n<li>Spring Security와 Spring oauth2를 사용하고, Resource Owner, Client, Authorization Server, Resource Server간의 인증/인가를 실습한다.</li>\n<li>여기서 Resouce란 Gateway를 경유하는 Rest APIs를 말한다. </li>\n<li>JWT기반 Access_Token을 활용한다.</li>\n<li>이번 랩에서는 Gateway를 Client와 Resource Server 역할로 설정한다. </li>\n<li>인증/인가 서버로 Standalone Keycloak(<a href=\"https://www.keycloak.org/\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.keycloak.org/</a>) 서버를 활용한다.</li>\n</ul>\n<h4 id=\"oauth2-인증인가keycloak-endpoint-설정\"><a href=\"#oauth2-%EC%9D%B8%EC%A6%9D%EC%9D%B8%EA%B0%80keycloak-endpoint-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth2 인증/인가(Keycloak) Endpoint 설정</h4>\n<p>본 예제의 디렉토리로 이동한다:</p>\n<pre class=\"language-text\"><code class=\"language-text\"> cd token-based-auth-Keycloak/</code></pre>\n<ul>\n<li>Gateway 서비스의 application.yml 파일을 열어본다.</li>\n<li>인증/인가를 위한 Authorization Sever의 Endpoint가 등록된다.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">security</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">oauth2</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">client</span><span class=\"token punctuation\">:</span>\n        <span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span>\n          <span class=\"token key atrule\">my-keycloak-provider</span><span class=\"token punctuation\">:</span>\n            <span class=\"token key atrule\">issuer-uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span>8080/realms/my_realm</code></pre>\n<ul>\n<li>KeyCloak에 등록된 Client(Gateway)의 Credential정보(client-id, client-secret)가 설정된다.</li>\n<li>OAuth2의 Grant Type을 password 방식으로 설정한다.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">  <span class=\"token key atrule\">keycloak-spring-gateway-client</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">provider</span><span class=\"token punctuation\">:</span> my<span class=\"token punctuation\">-</span>keycloak<span class=\"token punctuation\">-</span>provider\n    <span class=\"token key atrule\">client-id</span><span class=\"token punctuation\">:</span> my_client\n    <span class=\"token key atrule\">client-secret</span><span class=\"token punctuation\">:</span> HKFKYP7kb8OMldAgfvnk27FhRPOv8Y7H\n    <span class=\"token key atrule\">authorization-grant-type</span><span class=\"token punctuation\">:</span> password</code></pre>\n<h4 id=\"oauth2-security-상세설정\"><a href=\"#oauth2-security-%EC%83%81%EC%84%B8%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth2 Security 상세설정</h4>\n<ul>\n<li>Gateway 서비스의 SecurityConfig.java 파일을 열어본다.</li>\n<li>spring-cloud-gateway 는 webflux로 기동되기 때문에 @EnableWebFluxSecurity를 적용한다.</li>\n<li>ServerHttpSecurity에  리소스별  접근제어목록(ACL)을 기술한다.</li>\n<li>.oauth2Login() OAuth2의 디폴트 로그인 설정이 적용된다.</li>\n<li>.oauth2ResourceServer() 리소스서버 역할을 부여하고 jwt 형식의 Authorization을 지정한다.</li>\n</ul>\n<h4 id=\"서비스-구동\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B5%AC%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 구동</h4>\n<ul>\n<li>먼저 Keycloak 서버를 구동한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd keycloak/bin\nchmod 744 kc.sh\n./kc.sh start-dev</code></pre>\n<ul>\n<li>keycloak 서버의 default 포트인 8080으로 실행된다.</li>\n<li>Gateway, Order 서비스를 구동한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd gateway\nmvn spring-boot:run\ncd order\nmvn spring-boot:run</code></pre>\n<ul>\n<li>각각 8088, 8081 포트로 기동된다.</li>\n</ul>\n<h4 id=\"protected-리소스-접근\"><a href=\"#protected-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%A0%91%EA%B7%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Protected 리소스 접근</h4>\n<ul>\n<li>Security ACL설정(SecurityConfig.java)에 따라 Gateway 서버 및 주문서비스에 접근해 본다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">http http://localhost:8088\nhttp http://localhost:8088/orders</code></pre>\n<ul>\n<li>JWT인증 토큰이 없어 401(Unauthorized) 접근오류 응답이 내려온다.</li>\n<li>이제는 허가된 리소스에 접근해 본다. (gateway > TestController.java)</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">http http://localhost:8088/test/permitAll</code></pre>\n<ul>\n<li>접근 가능하다. </li>\n</ul>\n<h4 id=\"jwt-access_token-발급\"><a href=\"#jwt-access_token-%EB%B0%9C%EA%B8%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>JWT access_token 발급</h4>\n<ul>\n<li>Keycloak의 인증/인가 Endpoint에 토큰을 요청한다.</li>\n<li>\n<p>OAuth2의 'password' Grant type으로 Keycloak에 기 등록된 Client 크리덴셜과 사용자 정보를 제출한다.</p>\n<blockquote>\n<p>'password' Grant type은 Client(Gateway)의 로그인 Form으로 제출받은 사용자 정보를 인증서버에 Posting하는 방식이다.</p>\n</blockquote>\n</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">curl -X POST \"http://localhost:8080/realms/my_realm/protocol/openid-connect/token\" \\\n--header \"Content-Type: application/x-www-form-urlencoded\" \\\n--data-urlencode \"grant_type=password\" \\\n--data-urlencode \"client_id=my_client\" \\\n--data-urlencode \"client_secret=HKFKYP7kb8OMldAgfvnk27FhRPOv8Y7H\" \\\n--data-urlencode \"username=user@uengine.org\" \\\n--data-urlencode \"password=1\" </code></pre>\n<ul>\n<li>응답으로 access_token과 refresh_token이 내려온다.</li>\n<li>\n<p>출력된 access_token을 복사하여 <a href=\"https://jwt.io/\" target=\"_blank\" rel=\"noopener noreferrer\">https://jwt.io/</a> 페이지에 접속 후 decode해 본다.</p>\n<blockquote>\n<p>Header, Payload, Signature로 파싱된다.\t</p>\n</blockquote>\n</li>\n<li>user@uengine.org 계정이 가진 Role은 ROLE_USER임을 확인한다.</li>\n</ul>\n<h4 id=\"access_token으로-protected-리소스-접근\"><a href=\"#access_token%EC%9C%BC%EB%A1%9C-protected-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%A0%91%EA%B7%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>access_token으로 Protected 리소스 접근</h4>\n<ul>\n<li>access_token을 복사하여 Request Header에 넣어 Protected 리소스에 접근한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">export access_token=[ACCESS_TOKEN]\necho $access_token\nhttp localhost:8088/orders \"Authorization: Bearer $access_token\"\nhttp localhost:8088/test/user \"Authorization: Bearer $access_token\"\nhttp localhost:8088/test/authenticated \"Authorization: Bearer $access_token\"\nhttp localhost:8088/test/admin \"Authorization: Bearer $access_token\"</code></pre>\n<ul>\n<li>'/test/admin' 리소스는 권한이 불충분(403 Fobidden)하여 접근할 수 없다.</li>\n<li>관리자 권한이 있는 계정으로 다시 한번 토큰을 요청한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">curl -X POST \"http://localhost:8080/realms/my_realm/protocol/openid-connect/token\" \\\n--header \"Content-Type: application/x-www-form-urlencoded\" \\\n--data-urlencode \"grant_type=password\" \\\n--data-urlencode \"client_id=my_client\" \\\n--data-urlencode \"client_secret=HKFKYP7kb8OMldAgfvnk27FhRPOv8Y7H\" \\\n--data-urlencode \"username=admin@uengine.org\" \\\n--data-urlencode \"password=1\" </code></pre>\n<ul>\n<li>access_token을 복사하여 Request Header에 넣어 Protected 리소스에 접근한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">export access_token=[ACCESS_TOKEN]\nhttp localhost:8088/test/admin \"Authorization: Bearer $access_token\"</code></pre>\n<ul>\n<li>정상적으로 접근이 가능하다.</li>\n</ul>\n<h4 id=\"wrap-up\"><a href=\"#wrap-up\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Wrap up</h4>\n<ul>\n<li>Gateway가 리소스서버 역할까지 수행하므로 각 마이크로서비스 리소스들의 Fine grained한 접근제어를 Gateway에서 관리</li>\n<li>이로 인해 ACL 정보 가독성이 떨어지거나, ACL 오류발생 시 잠재적 분쟁 소지</li>\n<li>MSA별 Autonomous ACL 관리책임 분산을 위해 인증 및 인가를 분리하는 정책 권고</li>\n<li>Gateway는 인증을 포함한 Coarse grained ACL Policy를 담당하고, 각 MSA에서 Fine grained한 ACL Policy 적용</li>\n</ul>\n<h4 id=\"service-clear\"><a href=\"#service-clear\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Service Clear</h4>\n<ul>\n<li>다음 Lab을 위해 기동된 모든 서비스 종료</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">fuser -k 8080/tcp\nfuser -k 8081/tcp\nfuser -k 8088/tcp</code></pre>\n<h4 id=\"상세설명\"><a href=\"#%EC%83%81%EC%84%B8%EC%84%A4%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상세설명</h4>\n<iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/dsUW_JTvqIA\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"JWT Token 기반 인증 인가","anchor":"#jwt-token-기반-인증-인가"},{"depth":1,"value":"JWT Token 기반 인증 인가","anchor":"#jwt-token-기반-인증-인가-1"},{"depth":3,"value":"JWT 토큰기반 인증 w/ Keycloak","anchor":"#jwt-토큰기반-인증-w-keycloak"},{"depth":4,"value":"OAuth2 Stackholders","anchor":"#oauth2-stackholders"},{"depth":4,"value":"OAuth2 인증/인가(Keycloak) Endpoint 설정","anchor":"#oauth2-인증인가keycloak-endpoint-설정"},{"depth":4,"value":"OAuth2 Security 상세설정","anchor":"#oauth2-security-상세설정"},{"depth":4,"value":"서비스 구동","anchor":"#서비스-구동"},{"depth":4,"value":"Protected 리소스 접근","anchor":"#protected-리소스-접근"},{"depth":4,"value":"JWT access_token 발급","anchor":"#jwt-access_token-발급"},{"depth":4,"value":"access_token으로 Protected 리소스 접근","anchor":"#access_token으로-protected-리소스-접근"},{"depth":4,"value":"Wrap up","anchor":"#wrap-up"},{"depth":4,"value":"Service Clear","anchor":"#service-clear"},{"depth":4,"value":"상세설명","anchor":"#상세설명"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-service/","title":"12번가 마이크로서비스 라우터(Service) 적용"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Pub/Sub 방식의 연동 (New)"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 (New)"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation (New)"}},{"node":{"path":"/development/oauth2/","title":"Req/Res 방식의 MSA 연동 (New)"}},{"node":{"path":"/development/monolith2misvc/","title":"Kafka Retry & Dead Letter Queue (New)"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/gateway/","title":"단위 마이크로 서비스의 실행 (New)"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Kafka 기본 명령어 (New)"}},{"node":{"path":"/development/kafka-scaling/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/cna-pubsub/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/kafka-base/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/cna-pubsub2/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/front-end/","title":"Kafka Scaling (New)"}},{"node":{"path":"/development/circuitbreaker/","title":"API Gateway"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/development/advanced-connect/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}}]}},"context":{}}