{"hash":"639846ab77f2d650b364be948c0c3d68be620b02","data":{"markdownPage":{"id":"bbc81bc90a5d7fb2058df3bfd3563e3e","title":"[구현] Req/Res 방식의 MSA 연동","description":"","path":"/development/monolith2misvc/","timeToRead":2,"content":"<h1 id=\"구현-reqres-방식의-msa-연동\"><a href=\"#%EA%B5%AC%ED%98%84-reqres-%EB%B0%A9%EC%8B%9D%EC%9D%98-msa-%EC%97%B0%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[구현] Req/Res 방식의 MSA 연동</h1>\n<h3 id=\"모노리식-서비스에서-일부-서비스를-마이크로서비스로-전환\"><a href=\"#%EB%AA%A8%EB%85%B8%EB%A6%AC%EC%8B%9D-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90%EC%84%9C-%EC%9D%BC%EB%B6%80-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A5%BC-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A1%9C-%EC%A0%84%ED%99%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>모노리식 서비스에서 일부 서비스를 마이크로서비스로 전환</h3>\n<p>모노리스 기반 쇼핑몰 서비스에서 배송 서비스를 분리하고, Feign Client 를 사용해 모노리식 쇼핑몰과 분리된 배송 마이크로서비스 분리하는 Lab 이다.<br>\nFeign Client 는 동기(Request/Response) 방식으로 서비스간의 통신을 가능하면 레가시 코드의 변경을 최소화 하여 트랜스폼하는 방법이다.</p>\n<ul>\n<li>\n<p>monolith 서비스 기동 확인 (8081 port)  </p>\n<ul>\n<li>http localhost:8081</li>\n</ul>\n</li>\n<li>Order.java 에서 deliveryService 로컬 객체를 통해 배송처리 중임을 확인:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">  @PostPersist\n    private void callDeliveryStart(){\n\n        Delivery delivery = new Delivery();\n        delivery.setQuantity(this.getQuantity());\n        delivery.setProductId(this.getProductId());\n        delivery.setProductName(this.getProductName());\n        delivery.setDeliveryAddress(this.getCustomerAddr());\n        delivery.setCustomerId(this.getCustomerId());\n        delivery.setCustomerName(this.getCustomerName());\n        delivery.setDeliveryState(DeliveryStatus.DeliveryStarted.name());\n        delivery.setOrder(this);\n\n        // 배송 시작\n        DeliveryService deliveryService = Application.applicationContext.getBean(DeliveryService.class);\n        deliveryService.startDelivery(delivery);\n    }</code></pre>\n<ul>\n<li>Order.java의 startDelivery 메서드에 디버그 포인트 설치</li>\n<li>라인번호(84) 앞을 클릭하면, 빨간색의 원(breakpoint)이 나타남</li>\n<li>주문 생성  </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 quantity=3 customerId=&quot;1@uengine.org&quot; customerName=&quot;hong&quot; customerAddr=&quot;seoul&quot;</code></pre>\n<ul>\n<li>DeliveryServiceImpl.java 를 통해서 배송처리가 되는 Monolith 임을 확인.</li>\n</ul>\n<h4 id=\"기존-monolith-구현체-제거-feignclient-의-활성화\"><a href=\"#%EA%B8%B0%EC%A1%B4-monolith-%EA%B5%AC%ED%98%84%EC%B2%B4-%EC%A0%9C%EA%B1%B0-feignclient-%EC%9D%98-%ED%99%9C%EC%84%B1%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>기존 Monolith 구현체 제거, FeignClient 의 활성화</h4>\n<ul>\n<li>DeliveryServiceImpl.java 제거 </li>\n<li>DeliveryService.java 의 주석 제거</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">package com.example.template.delivery;\n\nimport org.springframework.cloud.openfeign.FeignClient;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\n\n\n@FeignClient(name =&quot;delivery&quot;, url=&quot;${api.url.delivery}&quot;)\npublic interface DeliveryService {\n\n    @RequestMapping(method = RequestMethod.POST, value = &quot;/deliveries&quot;, consumes = &quot;application/json&quot;)\n    void startDelivery(Delivery delivery);\n\n}</code></pre>\n<ul>\n<li>Monolith 서비스를 재기동 한다.</li>\n<li>\n<p>신규 배송 서비스 기동 확인 (8082 port)  </p>\n<ul>\n<li>http localhost:8082</li>\n</ul>\n</li>\n<li>주문 생성  </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 quantity=3 customerId=&quot;1@uengine.org&quot; customerName=&quot;hong&quot; customerAddr=&quot;seoul&quot;</code></pre>\n<ul>\n<li>주문 요청시 배송서비스가 호출되어 배송처리가 원격 마이크로서비스에 의해 처리된 것을 확인</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8082/deliveries</code></pre>\n<ul>\n<li>디버거를 통하여 Order.java 의 deliveryService.startDelivery(...) 호출의 deliveryService 객체가 Proxy 객체로 변경된 것을 확인</li>\n</ul>\n<h4 id=\"service-clear\"><a href=\"#service-clear\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Service Clear</h4>\n<ul>\n<li>다음 Lab을 위해 기동된 모든 서비스 종료</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">fuser -k 8081/tcp\nfuser -k 8082/tcp</code></pre>\n<h2 id=\"feignclient-관련설정\"><a href=\"#feignclient-%EA%B4%80%EB%A0%A8%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>FeignClient 관련설정</h2>\n<ul>\n<li>pom.xml :  feignclient dependency</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">\t\t&lt;!-- feign client --&gt;\n\t\t&lt;dependency&gt;\n\t\t\t&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;\n\t\t\t&lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;\n\t\t&lt;/dependency&gt;</code></pre>\n<ul>\n<li>Application.java :  @EnableFeignClients 애노테이션</li>\n</ul>\n<h4 id=\"상세설명\"><a href=\"#%EC%83%81%EC%84%B8%EC%84%A4%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상세설명</h4>\n<iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/ELH2Na8mWSw\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" Req/Res 방식의 MSA 연동","anchor":"#구현-reqres-방식의-msa-연동"},{"depth":3,"value":"모노리식 서비스에서 일부 서비스를 마이크로서비스로 전환","anchor":"#모노리식-서비스에서-일부-서비스를-마이크로서비스로-전환"},{"depth":4,"value":"기존 Monolith 구현체 제거, FeignClient 의 활성화","anchor":"#기존-monolith-구현체-제거-feignclient-의-활성화"},{"depth":4,"value":"Service Clear","anchor":"#service-clear"},{"depth":2,"value":"FeignClient 관련설정","anchor":"#feignclient-관련설정"},{"depth":4,"value":"상세설명","anchor":"#상세설명"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}