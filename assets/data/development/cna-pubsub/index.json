{"hash":"70daf0702732bebfabe4090caf1cfcfa2eddd102","data":{"markdownPage":{"id":"dbadba74d827e10443f7caa384599397","title":"[구현] Pub/Sub 방식의 MSA 연동","description":"","path":"/development/cna-pubsub/","timeToRead":1,"content":"<h1 id=\"구현-pubsub-방식의-msa-연동\"><a href=\"#%EA%B5%AC%ED%98%84-pubsub-%EB%B0%A9%EC%8B%9D%EC%9D%98-msa-%EC%97%B0%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[구현] Pub/Sub 방식의 MSA 연동</h1>\n<h3 id=\"이벤트-publish--subscribe\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-publish--subscribe\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 Publish / Subscribe</h3>\n<ul>\n<li>마이크로 서비스간의 통신에서 이벤트 메세지를 Pub/Sub 하는 방법을 실습한다.  </li>\n<li>Order 서비스에서 OrderPlaced 이벤트를 발행하였을때 Delivery 서비스에서 OrderPlaced 이벤트를 수신하여 작업 후 DeliveryStarted 를 발행한다.  </li>\n</ul>\n<h4 id=\"order-서비스의-이벤트-publish\"><a href=\"#order-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%9D%B4%EB%B2%A4%ED%8A%B8-publish\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>order 서비스의 이벤트 Publish</h4>\n<ul>\n<li>\n<p>order 마이크로 서비스를 8081 포트로 실행한다.</p>\n<blockquote>\n<p>order 폴더를 선택 > Open In Terminal > 터미널에서 \"mvn spring-boot:run\"</p>\n</blockquote>\n</li>\n<li>새로운 터머널 창에서 netstat -lntp 명령어로 실행중인 서비스 포트를 확인한다.</li>\n<li>기동된 order 서비스를 호출하여 주문 1건을 요청한다.\n<code>http localhost:8081/orders productId=1 productName=\"TV\" qty=3</code></li>\n<li>\n<p>kafka Consumer에서 이벤트 확인</p>\n<ul>\n<li>/usr/local/kafka/bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic shopmall --from-beginning</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"delivery-서비스의-이벤트-subscribe\"><a href=\"#delivery-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%9D%B4%EB%B2%A4%ED%8A%B8-subscribe\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>delivery 서비스의 이벤트 Subscribe</h4>\n<ul>\n<li>delivery PolicyHandler.java Code 확인한다.</li>\n<li>주석을 해제 하고, delivery 서비스의 Application.java 파일로 이동한다.</li>\n<li>14행과 15행 사이의 'Run'을 클릭 후, 5초 정도 지나면 서비스가 터미널 창에서 실행된다.  </li>\n<li>OrderPlaced 이벤트에 반응하여 DeliveryStarted 이벤트가 연속적으로 발행되는 것을 확인한다.</li>\n<li>\n<p>kafka Consumer에서 이벤트 메세지 확인</p>\n<blockquote>\n<p>{\"eventType\":\"OrderPlaced\",\"id\":1,\"productId\":1,\"qty\":3,\"productName\":\"TV\"}\n{\"eventType\":\"DeliveryStarted\",\"id\":1,\"orderId\":1,\"productId\":1,\"productName\":\"TV\"}</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"tip-분리된-환경에서-단위-구현테스트하기\"><a href=\"#tip-%EB%B6%84%EB%A6%AC%EB%90%9C-%ED%99%98%EA%B2%BD%EC%97%90%EC%84%9C-%EB%8B%A8%EC%9C%84-%EA%B5%AC%ED%98%84%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Tip: 분리된 환경에서 단위 구현/테스트하기</h2>\n<p>이벤트를 수신하여 처리하는 Delivery Service 를 구현하는 팀 입장에서 이벤트를 발생시키는 서비스를 직접 실행하지 않고도 테스트할 수 있는 방법</p>\n<ul>\n<li>kafka producer 를 실행한 후,</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">/usr/local/kafka/bin/kafka-console-producer.sh --broker-list http://localhost:9092 --topic shopmall</code></pre>\n<ul>\n<li>Order 에서 발행했을 이벤트의 JSON 을 직접 집어넣는다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">{&quot;eventType&quot;:&quot;OrderPlaced&quot;,&quot;id&quot;:1,&quot;productId&quot;:1,&quot;qty&quot;:3,&quot;productName&quot;:&quot;TV&quot;}</code></pre>\n<ul>\n<li>Delivery 의 PolicyHandler 에 이벤트가 수신됨을 확인한다.</li>\n<li></li>\n</ul>\n<h4 id=\"service-clear\"><a href=\"#service-clear\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Service Clear</h4>\n<ul>\n<li>다음 Lab을 위해 기동된 모든 서비스 종료</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">fuser -k 8081/tcp\nfuser -k 8082/tcp</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" Pub/Sub 방식의 MSA 연동","anchor":"#구현-pubsub-방식의-msa-연동"},{"depth":3,"value":"이벤트 Publish / Subscribe","anchor":"#이벤트-publish--subscribe"},{"depth":4,"value":"order 서비스의 이벤트 Publish","anchor":"#order-서비스의-이벤트-publish"},{"depth":4,"value":"delivery 서비스의 이벤트 Subscribe","anchor":"#delivery-서비스의-이벤트-subscribe"},{"depth":2,"value":"Tip: 분리된 환경에서 단위 구현/테스트하기","anchor":"#tip-분리된-환경에서-단위-구현테스트하기"},{"depth":4,"value":"Service Clear","anchor":"#service-clear"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}}]}},"context":{}}