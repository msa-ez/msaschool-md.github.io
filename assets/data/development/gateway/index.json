{"hash":"70daf0702732bebfabe4090caf1cfcfa2eddd102","data":{"markdownPage":{"id":"3c5dcd277e473297922fa9600347a7f6","title":"[구현] 게이트웨이를 통한 진입점 통일","description":"","path":"/development/gateway/","timeToRead":1,"content":"<h1 id=\"구현-게이트웨이를-통한-진입점-통일\"><a href=\"#%EA%B5%AC%ED%98%84-%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4%EB%A5%BC-%ED%86%B5%ED%95%9C-%EC%A7%84%EC%9E%85%EC%A0%90-%ED%86%B5%EC%9D%BC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[구현] 게이트웨이를 통한 진입점 통일</h1>\n<h3 id=\"게이트웨이를-사용하여-모든-api-서버들의-엔드포인트-단일화\"><a href=\"#%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%AA%A8%EB%93%A0-api-%EC%84%9C%EB%B2%84%EB%93%A4%EC%9D%98-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EB%8B%A8%EC%9D%BC%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>게이트웨이를 사용하여 모든 API 서버들의 엔드포인트 단일화</h3>\n<ul>\n<li>order 마이크로 서비스를 8081 포트로 실행한다.</li>\n</ul>\n<blockquote>\n<p>order 서비스를 찾아서 삭제해야 한다면</p>\n<pre class=\"language-text\"><code class=\"language-text\"># netstat -lntp | grep :808 \ntcp        0      0 0.0.0.0:8080            0.0.0.0:*               LISTEN      3752/java           \ntcp        0      0 0.0.0.0:8081            0.0.0.0:*               LISTEN      3109/java           \n# kill -9 3109  &lt;-- 해당 pid</code></pre>\n<ul>\n<li>gateway 마이크로 서비스를 8080 포트로 실행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd gateway\nmvn spring-boot:run</code></pre>\n</blockquote>\n<ul>\n<li>기동된 order 서비스를 호출하여 주문 1건을 요청한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">  http localhost:8081/orders productId=1 productName=&quot;TV&quot; qty=3\n  http localhost:8081/orders</code></pre>\n<ul>\n<li>게이트웨이를 통하여 같은 url 을 port 를 변경하여 실행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"> http localhost:8080/orders productId=1 productName=&quot;PC&quot; qty=1\n http localhost:8080/orders</code></pre>\n<ul>\n<li>delivery 마이크로 서비스를 8082 포트로 실행한다.</li>\n<li>게이트웨이서비스의 application.yaml 의 spring.cloud.gateway.routes 에 아래 설정을 추가하여 delivery 서비스로의 라우팅을 추가한다. (indent 에 주의해주세요)</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> delivery\n        <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8082</span>\n        <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> Path=/deliveries/<span class=\"token important\">**</span> </code></pre>\n<ul>\n<li>게이트웨이 서비스를 재기동 한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">fuser -k 8080/tcp  #서비스 종료\nmvn spring-boot:run #서비스 기동</code></pre>\n<ul>\n<li>8082 포트로 delivery 서비스를 호출하여 보고, 8080포트로 게이트웨이를 통하여 delivery 서비스를 호출한다.  </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8082/deliveries\nhttp localhost:8080/deliveries</code></pre>\n<ul>\n<li>Lab에 사용된 모든 서비스를 종료한다. </li>\n<li>(808x 포트를 리슨하는 모든 프로세스 죽이기)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">kill -9 `netstat -lntp|grep 808|awk &#39;{ print $7 }&#39;|grep -o &#39;[0-9]*&#39;`</code></pre>\n<h3 id=\"게이트웨이-커스터마이징-방법\"><a href=\"#%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>게이트웨이 커스터마이징 방법</h3>\n<p><a href=\"https://www.baeldung.com/spring-cloud-custom-gateway-filters\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.baeldung.com/spring-cloud-custom-gateway-filters</a></p>\n<h3 id=\"상세설명\"><a href=\"#%EC%83%81%EC%84%B8%EC%84%A4%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상세설명</h3>\n<iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/u_8VqZmOjRQ\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" 게이트웨이를 통한 진입점 통일","anchor":"#구현-게이트웨이를-통한-진입점-통일"},{"depth":3,"value":"게이트웨이를 사용하여 모든 API 서버들의 엔드포인트 단일화","anchor":"#게이트웨이를-사용하여-모든-api-서버들의-엔드포인트-단일화"},{"depth":3,"value":"게이트웨이 커스터마이징 방법","anchor":"#게이트웨이-커스터마이징-방법"},{"depth":3,"value":"상세설명","anchor":"#상세설명"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}}]}},"context":{}}