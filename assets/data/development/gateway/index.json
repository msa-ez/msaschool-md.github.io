{"hash":"8ec2d2d769250ada18e8c764b3b6b292cc183178","data":{"markdownPage":{"id":"3c5dcd277e473297922fa9600347a7f6","title":"단위 마이크로 서비스의 실행 (New)","description":"","path":"/development/gateway/","timeToRead":3,"content":"<h1 id=\"단위-마이크로-서비스의-실행-new\"><a href=\"#%EB%8B%A8%EC%9C%84-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%8B%A4%ED%96%89-new\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단위 마이크로 서비스의 실행 (New)</h1>\n<h1 id=\"단위-마이크로-서비스의-실행-new-1\"><a href=\"#%EB%8B%A8%EC%9C%84-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%8B%A4%ED%96%89-new-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>단위 마이크로 서비스의 실행 (New)</h1>\n<h3 id=\"마이크로서비스의-실행\"><a href=\"#%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>마이크로서비스의 실행</h3>\n<p>스프링부트로 생성된 마이크로서비스를 컴파일하고 실행한다.</p>\n<ul>\n<li>CODE > Project IDE 를 선택하여 VS Code Online 을 실행한다.</li>\n<li>왼편의 explorer 에서 monolith 폴더를 우클릭 선택한 후 \"Open In Integrated Terminal\" 을 클릭한다.</li>\n<li>Terminal 이 해당 폴더 이하에서 열리는 것을 확인한다.</li>\n</ul>\n<h3 id=\"생성된-서비스의-기동\"><a href=\"#%EC%83%9D%EC%84%B1%EB%90%9C-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EA%B8%B0%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>생성된 서비스의 기동</h3>\n<p>터미널에서 mvn 으로 마이크로서비스 실행하는 방법</p>\n<pre class=\"language-text\"><code class=\"language-text\">mvn spring-boot:run</code></pre>\n<br>\n<ul>\n<li>httpie tool 설치</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">pip install httpie</code></pre>\n<br>\n<h3 id=\"서비스-테스트\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 테스트</h3>\n<ul>\n<li>\n<ol>\n<li>1번  상품 정보 (재고량)을 등록한다.</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST localhost:8081/inventories id=1 stock=10</code></pre>\n<br>\n<ul>\n<li>\n<ol start=\"2\">\n<li>주문 1건을 요청한다.</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST localhost:8081/orders productId=1 productName=&quot;TV&quot; qty=3</code></pre>\n<br>\n<ul>\n<li>\n<ol start=\"3\">\n<li>재고량이 3개 감소한 것을 확인한다.</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/inventories/1</code></pre>\n<br>\n<ul>\n<li>\n<ol start=\"4\">\n<li>주문된 상품을 조회한다.</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">http GET localhost<span class=\"token operator\">:</span><span class=\"token number\">8081</span><span class=\"token operator\">/</span>orders</code></pre>\n<br>\n<ul>\n<li>\n<ol start=\"5\">\n<li>주문된 상품을 수정한다.</li>\n</ol>\n</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">http PATCH localhost<span class=\"token operator\">:</span><span class=\"token number\">8081</span><span class=\"token operator\">/</span>orders<span class=\"token operator\">/</span><span class=\"token number\">1</span> qty<span class=\"token operator\">=</span><span class=\"token number\">10</span></code></pre>\n<br>\n<h3 id=\"ide에서-디버깅\"><a href=\"#ide%EC%97%90%EC%84%9C-%EB%94%94%EB%B2%84%EA%B9%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>IDE에서 디버깅</h3>\n<ol>\n<li>Application.java 를 찾는다, main 함수를 찾는다.</li>\n<li>main 함수내의 첫번째 소스코드 라인의 왼쪽에 동그란 breakpoint 를 찾아 활성화한다.</li>\n<li>main 함수 위에 조그만 \"Debug\"라는 링크를 클릭한다.(10초 정도 소요, 기다리셔야 합니다.)</li>\n<li>잠시후 디버거가 활성화되고, 브레이크 포인트에 실행이 멈춘다.</li>\n<li>Continue 라는 화살표 버튼을 클릭하여 디버거를 진행시킨다.</li>\n<li>다음으로, Order.java 의 첫번째 실행지점에 디버그 포인트를 설정한다:</li>\n</ol>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostPersist</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPostPersist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">OrderPlaced</span> orderPlaced <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderPlaced</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 이부분</span>\n        orderPlaced<span class=\"token punctuation\">.</span><span class=\"token function\">publishAfterCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<ul>\n<li>그런다음, 앞서 주문을 넣어본다.</li>\n<li>위의 Order.java 에 디버거가 멈춤을 확인한후, variables 에서 local > this 객체의 내용을 확인한다.\n<br></li>\n</ul>\n<h3 id=\"order-aggregate-확장\"><a href=\"#order-aggregate-%ED%99%95%EC%9E%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order aggregate 확장</h3>\n<ul>\n<li>Order.java에 다음필드를 추가:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    String address;</code></pre>\n<br>\n<ul>\n<li>address 변수 위에 마우스 우클릭>Source Action > Generate Setters/Getters 선택.</li>\n<li>아래와 같이 setter/getter가 생성됨을 확인:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    String address;\n \n    public String getAddress() {\n        return address;\n    }\n    public void setAddress(String address) {\n        this.address = address;\n    }</code></pre>\n<br>\n<h3 id=\"서비스를-재기동\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A5%BC-%EC%9E%AC%EA%B8%B0%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스를 재기동</h3>\n<ul>\n<li>추가된 필드를 입력해봄</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http POST localhost:8081/orders productId=1 productName=&quot;TV&quot; qty=3 address=&quot;my home&quot;</code></pre>\n<br>\n<h3 id=\"실행중-프로세스-확인-및-삭제\"><a href=\"#%EC%8B%A4%ED%96%89%EC%A4%91-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%ED%99%95%EC%9D%B8-%EB%B0%8F-%EC%82%AD%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>실행중 프로세스 확인 및 삭제</h3>\n<pre class=\"language-java\"><code class=\"language-java\">netstat <span class=\"token operator\">-</span>lntp <span class=\"token operator\">|</span> grep <span class=\"token operator\">:</span><span class=\"token number\">808</span> \nkill <span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>process id<span class=\"token punctuation\">></span></span></code></pre>\n<br>\n<h4 id=\"상세설명\"><a href=\"#%EC%83%81%EC%84%B8%EC%84%A4%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상세설명</h4>\n<iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/J6yqEJrQUyk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"단위 마이크로 서비스의 실행 (New)","anchor":"#단위-마이크로-서비스의-실행-new"},{"depth":1,"value":"단위 마이크로 서비스의 실행 (New)","anchor":"#단위-마이크로-서비스의-실행-new-1"},{"depth":3,"value":"마이크로서비스의 실행","anchor":"#마이크로서비스의-실행"},{"depth":3,"value":"생성된 서비스의 기동","anchor":"#생성된-서비스의-기동"},{"depth":3,"value":"서비스 테스트","anchor":"#서비스-테스트"},{"depth":3,"value":"IDE에서 디버깅","anchor":"#ide에서-디버깅"},{"depth":3,"value":"Order aggregate 확장","anchor":"#order-aggregate-확장"},{"depth":3,"value":"서비스를 재기동","anchor":"#서비스를-재기동"},{"depth":3,"value":"실행중 프로세스 확인 및 삭제","anchor":"#실행중-프로세스-확인-및-삭제"},{"depth":4,"value":"상세설명","anchor":"#상세설명"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-service/","title":"12번가 마이크로서비스 라우터(Service) 적용"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Pub/Sub 방식의 연동 (New)"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 (New)"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation (New)"}},{"node":{"path":"/development/oauth2/","title":"Req/Res 방식의 MSA 연동 (New)"}},{"node":{"path":"/development/monolith2misvc/","title":"Kafka Retry & Dead Letter Queue (New)"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/gateway/","title":"단위 마이크로 서비스의 실행 (New)"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Kafka 기본 명령어 (New)"}},{"node":{"path":"/development/kafka-scaling/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/cna-pubsub/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/kafka-base/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/cna-pubsub2/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/front-end/","title":"Kafka Scaling (New)"}},{"node":{"path":"/development/circuitbreaker/","title":"API Gateway"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/development/advanced-connect/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}}]}},"context":{}}