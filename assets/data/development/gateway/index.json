{"hash":"06a886723e5e9e504c2e092ae07219a81ecc6278","data":{"markdownPage":{"id":"3c5dcd277e473297922fa9600347a7f6","title":"API Gateway","description":"","path":"/development/gateway/","timeToRead":1,"content":"<h1 id=\"api-gateway\"><a href=\"#api-gateway\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>API Gateway</h1>\n<h1 id=\"api-gateway-1\"><a href=\"#api-gateway-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>API Gateway</h1>\n<h3 id=\"api-gateway를-사용하여-마이크로-서비스들의-엔드포인트-단일화\"><a href=\"#api-gateway%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%93%A4%EC%9D%98-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EB%8B%A8%EC%9D%BC%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>API Gateway를 사용하여 마이크로 서비스들의 엔드포인트 단일화</h3>\n<ul>\n<li>monolith 마이크로 서비스를 실행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd monolith\nmvn spring-boot:run</code></pre>\n<ul>\n<li>gateway 마이크로 서비스를 실행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd gateway\nmvn spring-boot:run</code></pre>\n<ul>\n<li>기동된 monolith 서비스를 호출하여 주문 1건을 요청한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">  http localhost:8081/orders productId=1 qty=3\n  http localhost:8081/orders</code></pre>\n<ul>\n<li>게이트웨이를 통하여 같은 url 을 port 를 변경하여 실행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"> http localhost:8088/orders productId=1 qty=1\n http localhost:8081/orders  # can find the order item here\n http localhost:8088/orders  # can find the order item here also</code></pre>\n<ul>\n<li>inventory 마이크로 서비스를  실행한다.</li>\n<li>게이트웨이서비스의 application.yaml 의 spring.cloud.gateway.routes 에 아래 설정을 추가하여 inventory 서비스로의 라우팅을 추가한다. (indent 에 주의해주세요)</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\">      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">id</span><span class=\"token punctuation\">:</span> inventory\n        <span class=\"token key atrule\">uri</span><span class=\"token punctuation\">:</span> http<span class=\"token punctuation\">:</span>//localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8082</span>\n        <span class=\"token key atrule\">predicates</span><span class=\"token punctuation\">:</span>\n          <span class=\"token punctuation\">-</span> Path=/inventories/** </code></pre>\n<ul>\n<li>게이트웨이 서비스를 재기동 한다.</li>\n<li>8082 포트로  서비스를 호출하여 보고, 게이트웨이를 통하여 서비스를 호출한다.  </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8082/inventories\nhttp localhost:8088/inventories</code></pre>\n<h3 id=\"게이트웨이-커스터마이징-방법\"><a href=\"#%EA%B2%8C%EC%9D%B4%ED%8A%B8%EC%9B%A8%EC%9D%B4-%EC%BB%A4%EC%8A%A4%ED%84%B0%EB%A7%88%EC%9D%B4%EC%A7%95-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>게이트웨이 커스터마이징 방법</h3>\n<p><a href=\"https://www.baeldung.com/spring-cloud-custom-gateway-filters\" target=\"_blank\" rel=\"noopener noreferrer\">https://www.baeldung.com/spring-cloud-custom-gateway-filters</a></p>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"API Gateway","anchor":"#api-gateway"},{"depth":1,"value":"API Gateway","anchor":"#api-gateway-1"},{"depth":3,"value":"API Gateway를 사용하여 마이크로 서비스들의 엔드포인트 단일화","anchor":"#api-gateway를-사용하여-마이크로-서비스들의-엔드포인트-단일화"},{"depth":3,"value":"게이트웨이 커스터마이징 방법","anchor":"#게이트웨이-커스터마이징-방법"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}}]}},"context":{}}