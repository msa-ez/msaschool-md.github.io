{"hash":"70daf0702732bebfabe4090caf1cfcfa2eddd102","data":{"markdownPage":{"id":"5a7c9a2871abafa799a0b0592d2b9534","title":"[빌드] Docker Image Build & Push","description":"","path":"/development/ops-docker/","timeToRead":4,"content":"<h1 id=\"빌드-docker-image-build--push\"><a href=\"#%EB%B9%8C%EB%93%9C-docker-image-build--push\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[빌드] Docker Image Build &#x26; Push</h1>\n<h3 id=\"도커-이미지-무작정-따라해-보기\"><a href=\"#%EB%8F%84%EC%BB%A4-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EB%AC%B4%EC%9E%91%EC%A0%95-%EB%94%B0%EB%9D%BC%ED%95%B4-%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>도커 이미지 무작정 따라해 보기</h3>\n<h4 id=\"이미지-기반-컨테이너-생성\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EA%B8%B0%EB%B0%98-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이미지 기반 컨테이너 생성</h4>\n<pre class=\"language-text\"><code class=\"language-text\">docker image ls\ndocker run --name my-nginx -d -p 8080:80 nginx\ndocker run --name my-new-nginx -d -p 8081:80 nginx\n\ndocker image ls\ndocker container ls   # = docker ps</code></pre>\n<ul>\n<li>\n<p>서비스 확인</p>\n<ul>\n<li>Cloud IDE 메뉴 Labs > 포트열기 > 8080</li>\n<li>Cloud IDE 메뉴 Labs > 포트열기 > 8081</li>\n</ul>\n</li>\n<li>httpie 로 확인</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8080\nhttp :8081</code></pre>\n<h4 id=\"컨테이너와-이미지-삭제하기\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EC%99%80-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AD%EC%A0%9C%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>컨테이너와 이미지 삭제하기</h4>\n<ul>\n<li>삭제하려는 이미지를 사용하는 컨테이너 정리가 우선</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">docker container ls ; 실행중인 컨테이너 확인\ndocker container stop my-nginx  #docker stop &lt;containerid&gt;\ndocker container stop my-new-nginx\ndocker container rm my-nginx\ndocker container rm my-new-nginx\ndocker image rm nginx\ndocker images</code></pre>\n<ul>\n<li>한번에 삭제:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">docker stop $(docker ps -a -q) &amp;&amp; docker rm $(docker ps -a -q)</code></pre>\n<h4 id=\"이미지-생성\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이미지 생성</h4>\n<ul>\n<li>\n<p>어플리케이션 및 이미지 빌드 스크립트(Dockerfile) 생성</p>\n<ul>\n<li>Cloud IDE 메뉴 > File > Folder > Docker 입력</li>\n<li>생성한 폴더 하위에 아래 2개 파일 생성</li>\n<li>Cloud IDE 메뉴 > File > New File > index.html 입력</li>\n<li>파일 내용에 </li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">   &lt;h1&gt; Hi~ My name is Hong Gil-Dong...~~~ &lt;/h1&gt;</code></pre>\n<ul>\n<li>입력 후 저장</li>\n<li>Cloud IDE 메뉴 > File > New File > Dockerfile (확장자 없음)</li>\n<li>파일 내용에 </li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    FROM nginx\n    COPY index.html /usr/share/nginx/html/</code></pre>\n<ul>\n<li>입력 후, 저장</li>\n<li>이미지 빌드하기</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">docker build -t apexacme/welcome:v1 .\ndocker images\ndocker run -p 8080:80 apexacme/welcome:v1</code></pre>\n<h4 id=\"이미지-remote-registryhubdockercom에-푸시하기\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-remote-registryhubdockercom%EC%97%90-%ED%91%B8%EC%8B%9C%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이미지 Remote Registry(Hub.docker.com)에 푸시하기</h4>\n<ul>\n<li>도커허브 계정 생성</li>\n<li>\n<p><a href=\"https://hub.docker.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://hub.docker.com</a> 접속</p>\n<ul>\n<li>가입(Sign-Up) 및 E-Mail verification 수행  </li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">docker login \ndocker push apexacme/welcome:v1\n# apexacme 가 자신의 계정명인 경우</code></pre>\n<blockquote>\n<p>주의사항:  access denied 오류가 나면, 로그인이 되지 않았거나, apexacme 를 자신의 계정명으로 저장소 명을 쓰지 않아서 입니다. e.g. apexacme --> 자신의 계정명</p>\n</blockquote>\n<h4 id=\"docker-hub에-생성된-이미지-확인\"><a href=\"#docker-hub%EC%97%90-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker Hub에 생성된 이미지 확인</h4>\n<ul>\n<li><a href=\"https://hub.docker.com\" target=\"_blank\" rel=\"noopener noreferrer\">https://hub.docker.com</a> 접속</li>\n<li>repositories 메뉴 Reload 후 Push된 이미지 확인</li>\n</ul>\n<h4 id=\"docker-hub-이미지-기반-컨테이너-생성\"><a href=\"#docker-hub-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EA%B8%B0%EB%B0%98-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Docker Hub 이미지 기반 컨테이너 생성</h4>\n<pre class=\"language-text\"><code class=\"language-text\">docker image rm apexacme/welcome:v1\ndocker run --name=welcome -d -p 8080:80 apexacme/welcome:v1</code></pre>\n<ul>\n<li>서비스가 잘 기동 되었는지 확인:\n새 터미널을 열고 (Menu > Terminal > New Terminal)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">$ http localhost:8080\n\nHTTP/1.1 200 OK\nAccept-Ranges: bytes\nConnection: keep-alive\nContent-Length: 23\nContent-Type: text/html\nDate: Wed, 12 May 2021 05:12:28 GMT\nETag: &quot;609b5cd7-17&quot;\nLast-Modified: Wed, 12 May 2021 04:43:03 GMT\nServer: nginx/1.19.10\n\n&lt;h1&gt; Hello world &lt;/h1&gt;</code></pre>\n<h3 id=\"다음과정-미리보기\"><a href=\"#%EB%8B%A4%EC%9D%8C%EA%B3%BC%EC%A0%95-%EB%AF%B8%EB%A6%AC%EB%B3%B4%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>다음과정 미리보기</h3>\n<pre class=\"language-text\"><code class=\"language-text\">$ kubectl run myhomepage --image=jinyoung/welcome:v1\n\ndeployment.apps/myhomepage created\n\n\n$ kubectl expose deploy myhomepage --port=80 --type=LoadBalancer\n\nservice/myhomepage exposed\n\n\n$ kubectl get svc -w\nNAME         TYPE           CLUSTER-IP      EXTERNAL-IP                                                                   PORT(S)        AGE\nmyhomepage   LoadBalancer   10.100.98.191   addef84b932ff416186e2166ff397d74-589148294.ap-northeast-2.elb.amazonaws.com   80:30271/TCP   9s\n\n\n$ http addef84b932ff416186e2166ff397d74-589148294.ap-northeast-2.elb.amazonaws.com:80\nHTTP/1.1 200 OK\nAccept-Ranges: bytes\nConnection: keep-alive\nContent-Length: 23\nContent-Type: text/html\nDate: Wed, 12 May 2021 05:36:40 GMT\nETag: &quot;609b5cd7-17&quot;\nLast-Modified: Wed, 12 May 2021 04:43:03 GMT\nServer: nginx/1.19.10\n\n&lt;h1&gt; Hello world &lt;/h1&gt;\n\n\nkubectl get all\nNAME                              READY   STATUS    RESTARTS   AGE\npod/myhomepage-58dd9ffb74-kw5km   1/1     Running   0          17m\n\nNAME                 TYPE           CLUSTER-IP      EXTERNAL-IP                                                                   PORT(S)        AGE\nservice/myhomepage   LoadBalancer   10.100.98.191   addef84b932ff416186e2166ff397d74-589148294.ap-northeast-2.elb.amazonaws.com   80:30271/TCP   15m\n\nNAME                         READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/myhomepage   1/1     1            1           17m\n\nNAME                                    DESIRED   CURRENT   READY   AGE\nreplicaset.apps/myhomepage-58dd9ffb74   1         1         1       17m\n\n\n$ kubectl get rs -w\nNAME                    DESIRED   CURRENT   READY   AGE\nmyhomepage-58dd9ffb74   1         1         1       27m\n\n\n\n#### 새 터미널\n\n$ kubectl delete po --all\n\npod &quot;myhomepage-58dd9ffb74-wjf68&quot; deleted\n\n\n\n### 아까 터미널에서 rs 의 desired 와 current 가 유지됨 (pod 가 재생됨)을 확인:\n\nmyhomepage-58dd9ffb74   1         0         0       28m\nmyhomepage-58dd9ffb74   1         1         0       28m\nmyhomepage-58dd9ffb74   1         1         1       28m</code></pre>\n<h3 id=\"github-container-registry-사용하기\"><a href=\"#github-container-registry-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Github Container Registry 사용하기</h3>\n<h4 id=\"login\"><a href=\"#login\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Login</h4>\n<pre class=\"language-text\"><code class=\"language-text\">docker login ghcr.io -u &lt;github계정명&gt; -p &lt;Personal Access Token&gt;</code></pre>\n<ul>\n<li>github 계정명은 이메일주소가 아닌 github 자체 계정 문자열입니다. </li>\n<li>Personal Access Token을 얻으려면, Account > Settings > Developer Settings > Personal Access Token 에서 Generate New Token 한후, 권한으로 \"write package\" 를 부여하신 후 생성된 토큰을 얻으면 됩니다.</li>\n</ul>\n<h4 id=\"build--push예시\"><a href=\"#build--push%EC%98%88%EC%8B%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Build / Push예시</h4>\n<pre class=\"language-text\"><code class=\"language-text\">docker build -t ghcr.io/jinyoung/welcome:v2021101202 .\n\ndocker push ghcr.io/jinyoung/homepage:v2021101202</code></pre>\n<ul>\n<li>build 시 이미지명은 앞에 꼭 ghcr.io/를 추가</li>\n<li>push 시에는 항상 동일한 이미지명 준수</li>\n</ul>\n<h4 id=\"이미지-확인-및-접근권한설정\"><a href=\"#%EC%9D%B4%EB%AF%B8%EC%A7%80-%ED%99%95%EC%9D%B8-%EB%B0%8F-%EC%A0%91%EA%B7%BC%EA%B6%8C%ED%95%9C%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이미지 확인 및 접근권한설정</h4>\n<p>Account > Your Repositories > Packages 에서 확인가능</p>\n<p>권한을 설정하기 위해서는 Setting package 를 클릭한 후, Set Visibility 를 클릭하고 팝업에서 Public 설정 후, 이름을 확인해주고 설정완료.</p>\n<h4 id=\"상세설명\"><a href=\"#%EC%83%81%EC%84%B8%EC%84%A4%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상세설명</h4>\n<iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/RO3Mw8Gks9Q\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" Docker Image Build & Push","anchor":"#빌드-docker-image-build--push"},{"depth":3,"value":"도커 이미지 무작정 따라해 보기","anchor":"#도커-이미지-무작정-따라해-보기"},{"depth":4,"value":"이미지 기반 컨테이너 생성","anchor":"#이미지-기반-컨테이너-생성"},{"depth":4,"value":"컨테이너와 이미지 삭제하기","anchor":"#컨테이너와-이미지-삭제하기"},{"depth":4,"value":"이미지 생성","anchor":"#이미지-생성"},{"depth":4,"value":"이미지 Remote Registry(Hub.docker.com)에 푸시하기","anchor":"#이미지-remote-registryhubdockercom에-푸시하기"},{"depth":4,"value":"Docker Hub에 생성된 이미지 확인","anchor":"#docker-hub에-생성된-이미지-확인"},{"depth":4,"value":"Docker Hub 이미지 기반 컨테이너 생성","anchor":"#docker-hub-이미지-기반-컨테이너-생성"},{"depth":3,"value":"다음과정 미리보기","anchor":"#다음과정-미리보기"},{"depth":3,"value":"Github Container Registry 사용하기","anchor":"#github-container-registry-사용하기"},{"depth":4,"value":"Login","anchor":"#login"},{"depth":4,"value":"Build / Push예시","anchor":"#build--push예시"},{"depth":4,"value":"이미지 확인 및 접근권한설정","anchor":"#이미지-확인-및-접근권한설정"},{"depth":4,"value":"상세설명","anchor":"#상세설명"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}}]}},"context":{}}