{"hash":"70daf0702732bebfabe4090caf1cfcfa2eddd102","data":{"markdownPage":{"id":"e2cdaa0d231956c07fab172754ae8c9a","title":"[테스트] Consumer Driven Test 기반 Contract Test","description":"","path":"/development/contract-test/","timeToRead":2,"content":"<h1 id=\"테스트-consumer-driven-test-기반-contract-test\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-consumer-driven-test-%EA%B8%B0%EB%B0%98-contract-test\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[테스트] Consumer Driven Test 기반 Contract Test</h1>\n<h3 id=\"contract-test-실습\"><a href=\"#contract-test-%EC%8B%A4%EC%8A%B5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>contract test 실습</h3>\n<h4 id=\"contract-test-시나리오\"><a href=\"#contract-test-%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>contract test 시나리오</h4>\n<ul>\n<li>서비스 정상 작동 확인</li>\n<li>상품서비스(8085)와 주문서비스(8081)를 각각 콘솔을 열어 기동한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd orders\nmvn clean\nmvn spring-boot:run\n\ncd products\nmvn clean\nmvn spring-boot:run</code></pre>\n<ul>\n<li>주문을 한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http http://localhost:8081/orders productId=2 quantity=3 customerId=1@uengine.org</code></pre>\n<ul>\n<li>계약(Contract) 위반 사항 만들기\n- 주문서비스에서 주문을 할때, 상품서비스의 api 를 호출한다.\n- Order.java 파일(45행)의 restTemplate.getForEntity 확인\n- <a href=\"http://%EC%83%81%ED%92%88%EC%84%9C%EB%B9%84%EC%8A%A4/product/productId\" target=\"_blank\" rel=\"noopener noreferrer\">http://상품서비스/product/productId</a></li>\n<li>\n<p>상품서비스에서 해당 api 를 item 으로 변경한다.</p>\n<blockquote>\n<ul>\n<li>상품서비스의 ProductController.java 확인</li>\n<li>15행에서 @GetMapping(\"/product/{productId}\") 을</li>\n<li>@GetMapping(\"/item/{productId}\") 으로 변경</li>\n</ul>\n</blockquote>\n</li>\n<li>상품서비스를 재시작 하고 주문해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http http://localhost:8081/orders productId=2 quantity=3 customerId=1@uengine.org</code></pre>\n<ul>\n<li>404 에러 발생!!</li>\n</ul>\n<h4 id=\"cdcconsumer-driven-contract-계약-체결\"><a href=\"#cdcconsumer-driven-contract-%EA%B3%84%EC%95%BD-%EC%B2%B4%EA%B2%B0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>CDC(Consumer Driven Contract) 계약 체결</h4>\n<ul>\n<li>Consumer가 참조하는 코드를 Provider 일방적인 수정방지를 위한 Contract 적용</li>\n<li>Consumer인 주문 서비스 개발자가 주도적으로 계약서를 작성(CDC)한다.</li>\n<li>order 서비스의 최상위 root 에 productGet.groovy 파일 참고</li>\n<li>\n<p>productGet.groovy 파일을 복사하여서, product 서비스의 test/resources/contracts/rest 폴더에 복사를 한다.</p>\n<blockquote>\n<ul>\n<li>실제로는 Git 환경에서 PR(Pull Request)을 요청하고 이를 상품팀이 수락한다.</li>\n<li>(contracts/rest 폴더는 없기때문에 새로 만들어야 합니다.)</li>\n<li>(contracts/rest 폴더를 만드는 이유는 productGet.groovy 파일에 package contracts.rest 라고 선언했기 때문입니다.)</li>\n</ul>\n</blockquote>\n</li>\n<li>계약에 의해서 product 서비스에서 Test, or Package 실행단계에서 에러가 발생한다.</li>\n<li>product 서비스의 package 명령을 호출한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd products\nmvn package</code></pre>\n<ul>\n<li>\n<p>test fail 에러 발생!!</p>\n<blockquote>\n<p>Consumer와 체결한 계약(Contract)을 위반하여 상품팀에서는 빌드단계에서부터 실패하게 된다. </p>\n</blockquote>\n</li>\n<li>계약 위반을 해결하기 위하여 product 서비스는 기존의 /product 라는 api 를 유지 해야한다..\n- product 서비스의 ProductController.java 에서 @GetMapping(\"/product/{productId}\") 를 다시 생성한다.\n- product 서비스의 package 명령을 호출하여 봅니다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd products\nmvn package</code></pre>\n<ul>\n<li>테스트 성공 및 jar 파일 생성 완료!!</li>\n</ul>\n<h4 id=\"주문서비스에서-테스트\"><a href=\"#%EC%A3%BC%EB%AC%B8%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90%EC%84%9C-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>주문서비스에서 테스트</h4>\n<ul>\n<li>주문서비스는 상품서비스에서 정상적으로 테스트를 적용하여 배포중인지 테스트를 할 수 있다.</li>\n<li>주문서비스가 상품서비스의 api 를 테스트 하기 위해서는 상품서비스에서 stub 파일을 제공해 주어야 한다.\n- 상품 서비스에서 mvn install 을 하여 stub 파일을 Local(.m2 folder)에 생성한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd products\nmvn install</code></pre>\n<ul>\n<li>주문서비스에서는 만들어진 stub 파일(Mock Server)을 바라보며 테스트를 진행한다.\n- order 서비스의 test/java/com.example.template/ProductContractTest.java 파일참고\n- @AutoConfigureStubRunner 에서 주문서비스의 stub 을 바라본다.\n- TestRestTemplate 으로 \"/product/1\" api 를 호출하여 결과값을 비교한다.</li>\n</ul>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" Consumer Driven Test 기반 Contract Test","anchor":"#테스트-consumer-driven-test-기반-contract-test"},{"depth":3,"value":"contract test 실습","anchor":"#contract-test-실습"},{"depth":4,"value":"contract test 시나리오","anchor":"#contract-test-시나리오"},{"depth":4,"value":"CDC(Consumer Driven Contract) 계약 체결","anchor":"#cdcconsumer-driven-contract-계약-체결"},{"depth":4,"value":"주문서비스에서 테스트","anchor":"#주문서비스에서-테스트"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}}]}},"context":{}}