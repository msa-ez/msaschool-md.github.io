{"hash":"f58eca0934380d084e357b0b95045cf3b386277b","data":{"markdownPage":{"id":"7d45a63c9b3932cd83c24055bbe8c47a","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)","description":"","path":"/development/circuitbreaker/","timeToRead":1,"content":"<h1 id=\"구현-reqres-방식에서-장애전파-차단서킷브레이커-패턴\"><a href=\"#%EA%B5%AC%ED%98%84-reqres-%EB%B0%A9%EC%8B%9D%EC%97%90%EC%84%9C-%EC%9E%A5%EC%95%A0%EC%A0%84%ED%8C%8C-%EC%B0%A8%EB%8B%A8%EC%84%9C%ED%82%B7%EB%B8%8C%EB%A0%88%EC%9D%B4%EC%BB%A4-%ED%8C%A8%ED%84%B4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)</h1>\n<h3 id=\"서킷브레이커를-통하여-장애-전파를-원천-차단\"><a href=\"#%EC%84%9C%ED%82%B7%EB%B8%8C%EB%A0%88%EC%9D%B4%EC%BB%A4%EB%A5%BC-%ED%86%B5%ED%95%98%EC%97%AC-%EC%9E%A5%EC%95%A0-%EC%A0%84%ED%8C%8C%EB%A5%BC-%EC%9B%90%EC%B2%9C-%EC%B0%A8%EB%8B%A8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서킷브레이커를 통하여 장애 전파를 원천 차단</h3>\n<h4 id=\"서킷브레이커-설정-전-호출\"><a href=\"#%EC%84%9C%ED%82%B7%EB%B8%8C%EB%A0%88%EC%9D%B4%EC%BB%A4-%EC%84%A4%EC%A0%95-%EC%A0%84-%ED%98%B8%EC%B6%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서킷브레이커 설정 전 호출</h4>\n<ul>\n<li>monolith 서비스와 reqres_delivery 서비스를 실행한다.  </li>\n<li>\n<p>부하 툴을 사용하여 주문을 넣어본다.</p>\n<pre class=\"language-text\"><code class=\"language-text\">siege -c2 -t10S  -v --content-type &quot;application/json&quot; &#39;http://localhost:8088/orders POST {&quot;productId&quot;:2, &quot;quantity&quot;:1}&#39;</code></pre>\n</li>\n</ul>\n<h4 id=\"서킷브레이커-설정\"><a href=\"#%EC%84%9C%ED%82%B7%EB%B8%8C%EB%A0%88%EC%9D%B4%EC%BB%A4-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서킷브레이커 설정</h4>\n<ul>\n<li>\n<p>monolith 서비스의 application.yaml 파일의 27 번째 라인의 주석을 해제한다.  </p>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">feign</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hystrix</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n\n<span class=\"token key atrule\">hystrix</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">command</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># 전역설정</span>\n    <span class=\"token key atrule\">default</span><span class=\"token punctuation\">:</span>\n      <span class=\"token key atrule\">execution.isolation.thread.timeoutInMilliseconds</span><span class=\"token punctuation\">:</span> <span class=\"token number\">610</span></code></pre>\n</li>\n</ul>\n<ul>\n<li>\n<p>reqres_delivery 서비스의 Delivery.java 에 강제 딜레이 발생 코드를 넣는다.  </p>\n<ul>\n<li>\n<p>(49~53 line 주석해제)</p>\n<pre class=\"language-java\"><code class=\"language-java\">    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token number\">400</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">220</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n</li>\n</ul>\n</li>\n<li>monolith 서비스와 reqres_delivery 서비스를 종료하고 재실행한다.  </li>\n<li>\n<p>부하 툴을 사용하여 주문을 넣어본다.  </p>\n<pre class=\"language-text\"><code class=\"language-text\">siege -c2 -t10S  -v --content-type &quot;application/json&quot; &#39;http://localhost:8088/orders POST {&quot;productId&quot;:2, &quot;quantity&quot;:1}&#39;</code></pre>\n</li>\n</ul>\n<h4 id=\"fallback-처리를-하여-유연하게-대처\"><a href=\"#fallback-%EC%B2%98%EB%A6%AC%EB%A5%BC-%ED%95%98%EC%97%AC-%EC%9C%A0%EC%97%B0%ED%95%98%EA%B2%8C-%EB%8C%80%EC%B2%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>fallback 처리를 하여 유연하게 대처</h4>\n<ul>\n<li>\n<p>reqres_delivery 서비스가 중지된 상태로 주문을 넣어본다. ( 500 에러 )</p>\n<ul>\n<li>http localhost:8088/orders productId=1 quantity=3 </li>\n</ul>\n</li>\n<li>\n<p>monolith 서비스의 DeliveryService.java 의 FeignClient에 fallback 옵션을 준다.</p>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span><span class=\"token string\">\"delivery\"</span><span class=\"token punctuation\">,</span> url<span class=\"token operator\">=</span><span class=\"token string\">\"${api.url.delivery}\"</span><span class=\"token punctuation\">,</span> fallback <span class=\"token operator\">=</span> <span class=\"token class-name\">DeliveryServiceImpl</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></code></pre>\n</li>\n<li>\n<p>monolith 서비스를 재실행 후 주문을 넣어본다. ( 주문 가능 )</p>\n<ul>\n<li>이때 배송 서비스는 중지 상태 이어야 한다.  </li>\n<li>DeliveryServiceImpl 의 startDelivery 메서드가 실행되는 것을 확인 할 수 있다.  </li>\n</ul>\n</li>\n</ul>\n<h4 id=\"checkpoint-체크-방법\"><a href=\"#checkpoint-%EC%B2%B4%ED%81%AC-%EB%B0%A9%EB%B2%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>checkpoint 체크 방법</h4>\n<p>fallback 처리 여부를 확인 하기 위하여 monolith 서비스의 console 창을 선택하고, 상단메뉴의 labs > 결과제출 을 클릭하여 제출한다.  </p>\n<h4 id=\"다른-circuit-breaker-들\"><a href=\"#%EB%8B%A4%EB%A5%B8-circuit-breaker-%EB%93%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>다른 Circuit Breaker 들</h4>\n<p><a href=\"https://dzone.com/articles/comparing-envoy-and-istio-circuit-breaking-with-ne?fbclid=IwAR0wYnXPiAZSVtluJ-17Ywb9dK3xrytAMo3ImIZv8KwoOo2WGGnyTKm6c04\" target=\"_blank\" rel=\"noopener noreferrer\">https://dzone.com/articles/comparing-envoy-and-istio-circuit-breaking-with-ne?fbclid=IwAR0wYnXPiAZSVtluJ-17Ywb9dK3xrytAMo3ImIZv8KwoOo2WGGnyTKm6c04</a></p>\n<h4 id=\"service-clear\"><a href=\"#service-clear\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Service Clear</h4>\n<ul>\n<li>다음 Lab을 위해 기동된 모든 서비스 종료</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">fuser -k 8088/tcp\nfuser -k 8082/tcp</code></pre>\n<h4 id=\"상세설명\"><a href=\"#%EC%83%81%EC%84%B8%EC%84%A4%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상세설명</h4>\n<iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/OZNm1_42M68\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)","anchor":"#구현-reqres-방식에서-장애전파-차단서킷브레이커-패턴"},{"depth":3,"value":"서킷브레이커를 통하여 장애 전파를 원천 차단","anchor":"#서킷브레이커를-통하여-장애-전파를-원천-차단"},{"depth":4,"value":"서킷브레이커 설정 전 호출","anchor":"#서킷브레이커-설정-전-호출"},{"depth":4,"value":"서킷브레이커 설정","anchor":"#서킷브레이커-설정"},{"depth":4,"value":"fallback 처리를 하여 유연하게 대처","anchor":"#fallback-처리를-하여-유연하게-대처"},{"depth":4,"value":"checkpoint 체크 방법","anchor":"#checkpoint-체크-방법"},{"depth":4,"value":"다른 Circuit Breaker 들","anchor":"#다른-circuit-breaker-들"},{"depth":4,"value":"Service Clear","anchor":"#service-clear"},{"depth":4,"value":"상세설명","anchor":"#상세설명"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}