{"hash":"639846ab77f2d650b364be948c0c3d68be620b02","data":{"markdownPage":{"id":"a39c58e23ac151268dd7ea1d1a0afcda","title":"Keycloak OIDC w/ OAuth2 Client","description":"","path":"/development/keycloak-oauth2-2/","timeToRead":1,"content":"<h1 id=\"keycloak-oidc-w-oauth2-client\"><a href=\"#keycloak-oidc-w-oauth2-client\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak OIDC w/ OAuth2 Client</h1>\n<h3 id=\"keycloak기반-oauth2---client\"><a href=\"#keycloak%EA%B8%B0%EB%B0%98-oauth2---client\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Keycloak기반 OAuth2 - Client</h3>\n<h4 id=\"gateway-oauth2-client-설정\"><a href=\"#gateway-oauth2-client-%EC%84%A4%EC%A0%95\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gateway OAuth2 Client 설정</h4>\n<ul>\n<li>Gateway를 OAuth2 Client로 설정하는 랩으로 이전 랩에서 설정한 Keycloak 정보를 참조한다.</li>\n<li>\n<p>Platform에서 작업이 원활히지 않을 경우, Local에서 수행한다.</p>\n<blockquote>\n<p>Local 머신에 IDE(IntelliJ, VSCode)와 JDK 11 이상이 설치되어 있어야 한다. </p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"gateway-oauth2-client-설정-1\"><a href=\"#gateway-oauth2-client-%EC%84%A4%EC%A0%95-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gateway OAuth2 Client 설정</h4>\n<ul>\n<li>pom.xml을 통해 Gateway에 설정된 라이브러리(oauth2 client)를 확인한다.</li>\n<li>application.yml에 oauth2 client 설정을 주입한다.</li>\n<li>주석 부분을 해제하고 나의 keycloak 정보로 수정한다.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\">#  security:</span>\n<span class=\"token comment\">#    oauth2:</span>\n<span class=\"token comment\">#      client:</span>\n<span class=\"token comment\">#        provider:</span>\n<span class=\"token comment\">#          my-keycloak-provider:</span>\n<span class=\"token comment\">#            issuer-uri: http://localhost:8080/realms/test_realm</span>\n<span class=\"token comment\">#        registration:</span>\n<span class=\"token comment\">#          keycloak-test-client:</span>\n<span class=\"token comment\">#            provider: my-keycloak-provider</span>\n<span class=\"token comment\">#            client-id: test-client</span>\n<span class=\"token comment\">#            client-secret: HKFKYP7kb8OMldAgfvnk27FhRPOv8Y7H</span>\n<span class=\"token comment\">#            authorization-grant-type: authorization_code</span>\n<span class=\"token comment\">#            redirect-uri: '{baseUrl}/login/oauth2/code/keycloak'</span>\n<span class=\"token comment\">#            scope: openid</span></code></pre>\n<blockquote>\n<p>20행과 같이 keycloak Endpoint 정보는 Realm에서 OIDC 링크를 통해 확인 가능하다.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/156495160-c1dba952-ad18-45d8-b170-e2cfe377887d.png\" alt=\"image\"></p>\n<h4 id=\"gateway-security-configuration\"><a href=\"#gateway-security-configuration\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gateway Security Configuration</h4>\n<ul>\n<li>SecurityConfig.java 파일을 열어 기본 설정을 확인한다.</li>\n<li>백엔드 마이크로서비스 단위의 화이트 리스트만 보이고, API 리소스에 대한 설정은 없어 간결하다.</li>\n</ul>\n<h4 id=\"gateway에서-backend-라우팅\"><a href=\"#gateway%EC%97%90%EC%84%9C-backend-%EB%9D%BC%EC%9A%B0%ED%8C%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gateway에서 Backend 라우팅</h4>\n<ul>\n<li>application.yml을 다시 오픈한다.</li>\n<li>주문 마이크로서비스에 대한 라우팅 설정과 TokenRelay 필터를 적용해 준다.</li>\n</ul>\n<pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token comment\">#      default-filters:</span>\n<span class=\"token comment\">#        - TokenRelay</span>\n<span class=\"token comment\">#      routes:</span>\n<span class=\"token comment\">#        - id: order</span>\n<span class=\"token comment\">#          uri: http://localhost:8081</span>\n<span class=\"token comment\">#          predicates:</span>\n<span class=\"token comment\">#            - Path=/orders/**, /order/**</span></code></pre>\n<ul>\n<li>application.yml을 저장한다.</li>\n<li>Gateway 서비스 Root(\"/\")에 Static 페이지를 추가해 확인한다.</li>\n</ul>\n<h4 id=\"gateway-서비스-기동\"><a href=\"#gateway-%EC%84%9C%EB%B9%84%EC%8A%A4-%EA%B8%B0%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Gateway 서비스 기동</h4>\n<ul>\n<li>Gateway를 기동한다. 이때 Authorization Server(Keycloak) 서버가 기동되고 있어야 한다.</li>\n</ul>\n<pre class=\"language-sh\"><code class=\"language-sh\">cd gateway-with-keycloak-oauth2\nmvn spring-boot:run\n# Local mvn이 없을 경우, mvnw spring-boot:run</code></pre>\n<h4 id=\"oauth2-client-확인\"><a href=\"#oauth2-client-%ED%99%95%EC%9D%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>OAuth2 Client 확인</h4>\n<ul>\n<li>브라우저를 열어 Gateway Root(<a href=\"http://localhost:8088\" target=\"_blank\" rel=\"noopener noreferrer\">http://localhost:8088</a>)에 접속한다.</li>\n<li>Controller.java에 테스트용 Content(\"/\")가 설정되어 있다.</li>\n<li>인증서버의 Login페이지가 출력되고, 등록한 사용자로 인증한다.</li>\n<li>아래와 같이 ACL이 적용된 콘텐츠가 출력된다.</li>\n</ul>\n<p><img src=\"https://user-images.githubusercontent.com/35618409/156498442-37706c2f-ff8f-445b-8c2b-0f6416888233.png\" alt=\"image\"></p>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Keycloak OIDC w/ OAuth2 Client","anchor":"#keycloak-oidc-w-oauth2-client"},{"depth":3,"value":"Keycloak기반 OAuth2 - Client","anchor":"#keycloak기반-oauth2---client"},{"depth":4,"value":"Gateway OAuth2 Client 설정","anchor":"#gateway-oauth2-client-설정"},{"depth":4,"value":"Gateway OAuth2 Client 설정","anchor":"#gateway-oauth2-client-설정-1"},{"depth":4,"value":"Gateway Security Configuration","anchor":"#gateway-security-configuration"},{"depth":4,"value":"Gateway에서 Backend 라우팅","anchor":"#gateway에서-backend-라우팅"},{"depth":4,"value":"Gateway 서비스 기동","anchor":"#gateway-서비스-기동"},{"depth":4,"value":"OAuth2 Client 확인","anchor":"#oauth2-client-확인"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}