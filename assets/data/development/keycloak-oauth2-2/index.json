{"hash":"8ec2d2d769250ada18e8c764b3b6b292cc183178","data":{"markdownPage":{"id":"a39c58e23ac151268dd7ea1d1a0afcda","title":"Pub/Sub 방식의 연동 (New)","description":"","path":"/development/keycloak-oauth2-2/","timeToRead":2,"content":"<h1 id=\"pubsub-방식의-연동-new\"><a href=\"#pubsub-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%97%B0%EB%8F%99-new\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pub/Sub 방식의 연동 (New)</h1>\n<h1 id=\"pubsub-방식의-연동-new-1\"><a href=\"#pubsub-%EB%B0%A9%EC%8B%9D%EC%9D%98-%EC%97%B0%EB%8F%99-new-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Pub/Sub 방식의 연동 (New)</h1>\n<h3 id=\"이벤트-publish--subscribe\"><a href=\"#%EC%9D%B4%EB%B2%A4%ED%8A%B8-publish--subscribe\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>이벤트 Publish / Subscribe</h3>\n<ul>\n<li>마이크로 서비스간의 통신에서 이벤트 메세지를 Pub/Sub 하는 방법을 실습한다.  </li>\n<li>Order 서비스에서 OrderPlaced 이벤트를 발행하였을때 Inventory 서비스에서 OrderPlaced 이벤트를 수신하여 재고량을 변경(감소)한다.  </li>\n</ul>\n<h4 id=\"order-서비스의-이벤트-publish\"><a href=\"#order-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%9D%B4%EB%B2%A4%ED%8A%B8-publish\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>order 서비스의 이벤트 Publish</h4>\n<ul>\n<li>\n<p>order 마이크로 서비스를 실행한다.</p>\n<blockquote>\n<p>order 폴더를 선택 > Open In Terminal > 터미널에서 \"mvn spring-boot:run\"</p>\n</blockquote>\n</li>\n<li>새로운 터머널 창에서 netstat -lntp 명령어로 실행중인 서비스 포트를 확인한다.</li>\n<li>기동된 order 서비스를 호출하여 주문 1건을 요청한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 productName=&quot;TV&quot; qty=3</code></pre>\n<ul>\n<li>kafka 유틸리티가 포함된 위치에 접속하기 위하여 docker 를 통하여 shell 에 진입한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose exec -it kafka /bin/bash\ncd /bin</code></pre>\n<ul>\n<li>kafka Consumer에서 이벤트 확인한다</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">./kafka-console-consumer --bootstrap-server localhost:9092 --topic labshoppubsub  --from-beginning</code></pre>\n<h4 id=\"inventory-서비스의-이벤트-subscribe\"><a href=\"#inventory-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%9D%B4%EB%B2%A4%ED%8A%B8-subscribe\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Inventory 서비스의 이벤트 Subscribe</h4>\n<ul>\n<li>Inventory PolicyHandler.java Code 확인한다.</li>\n<li>PolicyHandler.java --> Inventory.java (Aggregate) 의 Port Method (decreaseStock)을 호출하게 된다.</li>\n<li>decreaseStock 내에 우리가 작성해야 할 로직은 다음과 같다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">repository().findById(Long.valueOf(orderPlaced.getProductId())).ifPresent(inventory-&gt;{\n\n    inventory.setStock(inventory.getStock() - orderPlaced.getQty()); // do something\n    repository().save(inventory);\n\n});   </code></pre>\n<ul>\n<li>inventory 서비스를 실행한다 (mvn spring-boot:run)</li>\n<li>OrderPlaced 이벤트에 반응하여 재고량이 감소되는 것을 확인한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8082/inventories id=1 stock=10\nhttp :8081/orders productId=1 qty=5\nhttp :8082/inventories/1</code></pre>\n<p>결과:</p>\n<pre class=\"language-text\"><code class=\"language-text\">{\n    &quot;_links&quot;: {\n        &quot;inventory&quot;: {\n            &quot;href&quot;: &quot;http://localhost:8082/inventories/1&quot;\n        },\n        &quot;self&quot;: {\n            &quot;href&quot;: &quot;http://localhost:8082/inventories/1&quot;\n        }\n    },\n    &quot;stock&quot;: 5\n}</code></pre>\n<h3 id=\"확장미션\"><a href=\"#%ED%99%95%EC%9E%A5%EB%AF%B8%EC%85%98\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>확장미션</h3>\n<ul>\n<li>delivery Bounded Context 를 생성하고, 주문에 대하여 배송 1건을 추가하는 policy를 모델링하고 구현하시오.</li>\n</ul>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Pub/Sub 방식의 연동 (New)","anchor":"#pubsub-방식의-연동-new"},{"depth":1,"value":"Pub/Sub 방식의 연동 (New)","anchor":"#pubsub-방식의-연동-new-1"},{"depth":3,"value":"이벤트 Publish / Subscribe","anchor":"#이벤트-publish--subscribe"},{"depth":4,"value":"order 서비스의 이벤트 Publish","anchor":"#order-서비스의-이벤트-publish"},{"depth":4,"value":"Inventory 서비스의 이벤트 Subscribe","anchor":"#inventory-서비스의-이벤트-subscribe"},{"depth":3,"value":"확장미션","anchor":"#확장미션"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-service/","title":"12번가 마이크로서비스 라우터(Service) 적용"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Pub/Sub 방식의 연동 (New)"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 (New)"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation (New)"}},{"node":{"path":"/development/oauth2/","title":"Req/Res 방식의 MSA 연동 (New)"}},{"node":{"path":"/development/monolith2misvc/","title":"Kafka Retry & Dead Letter Queue (New)"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/gateway/","title":"단위 마이크로 서비스의 실행 (New)"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Kafka 기본 명령어 (New)"}},{"node":{"path":"/development/kafka-scaling/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/cna-pubsub/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/kafka-base/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/cna-pubsub2/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/front-end/","title":"Kafka Scaling (New)"}},{"node":{"path":"/development/circuitbreaker/","title":"API Gateway"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/development/advanced-connect/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}}]}},"context":{}}