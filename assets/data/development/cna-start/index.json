{"hash":"639846ab77f2d650b364be948c0c3d68be620b02","data":{"markdownPage":{"id":"4de31dfa5698f32875e6accbe2d1c75b","title":"[구현] 마이크로서비스의 실행","description":"","path":"/development/cna-start/","timeToRead":1,"content":"<h1 id=\"구현-마이크로서비스의-실행\"><a href=\"#%EA%B5%AC%ED%98%84-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4%EC%9D%98-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[구현] 마이크로서비스의 실행</h1>\n<blockquote>\n<p>누락된 유틸리티 설치</p>\n<pre class=\"language-java\"><code class=\"language-java\">apt<span class=\"token operator\">-</span>get update\napt<span class=\"token operator\">-</span>get install net<span class=\"token operator\">-</span>tools</code></pre>\n<p>제대로 설치된 경우 Labs > 포트확인 클릭하여 포트넘버 확인 가능해야 합니다. </p>\n</blockquote>\n<h3 id=\"생성된-마이크로-서비스들의-기동\"><a href=\"#%EC%83%9D%EC%84%B1%EB%90%9C-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%93%A4%EC%9D%98-%EA%B8%B0%EB%8F%99\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>생성된 마이크로 서비스들의 기동</h3>\n<h5 id=\"터미널에서-mvn-으로-마이크로서비스-실행\"><a href=\"#%ED%84%B0%EB%AF%B8%EB%84%90%EC%97%90%EC%84%9C-mvn-%EC%9C%BC%EB%A1%9C-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>터미널에서 mvn 으로 마이크로서비스 실행</h5>\n<pre class=\"language-java\"><code class=\"language-java\">cd order\nmvn spring<span class=\"token operator\">-</span>boot<span class=\"token operator\">:</span>run</code></pre>\n<h5 id=\"ide에서-실행\"><a href=\"#ide%EC%97%90%EC%84%9C-%EC%8B%A4%ED%96%89\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>IDE에서 실행</h5>\n<ul>\n<li>order 서비스의 Application.java 파일로 이동한다. </li>\n<li>14행과 15행 사이의 'Run'을 클릭 후, 5초 정도 지나면 서비스가 터미널 창에서 실행된다. </li>\n<li>새로운 터머널 창에서 netstat -lntp 명령어로 실행중인 서비스 포트를 확인한다.</li>\n</ul>\n<h5 id=\"서비스-테스트\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 테스트</h5>\n<ul>\n<li>기동된 order 서비스를 호출하여 주문 1건을 요청한다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">http POST localhost<span class=\"token operator\">:</span><span class=\"token number\">8081</span><span class=\"token operator\">/</span>orders productId<span class=\"token operator\">=</span><span class=\"token number\">1</span> productName<span class=\"token operator\">=</span><span class=\"token string\">\"TV\"</span> qty<span class=\"token operator\">=</span><span class=\"token number\">3</span></code></pre>\n<ul>\n<li>주문된 상품을 조회한다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">http GET localhost<span class=\"token operator\">:</span><span class=\"token number\">8081</span><span class=\"token operator\">/</span>orders</code></pre>\n<ul>\n<li>주문된 상품을 수정한다.</li>\n</ul>\n<pre class=\"language-java\"><code class=\"language-java\">http PATCH localhost<span class=\"token operator\">:</span><span class=\"token number\">8081</span><span class=\"token operator\">/</span>orders<span class=\"token operator\">/</span><span class=\"token number\">1</span> qty<span class=\"token operator\">=</span><span class=\"token number\">10</span></code></pre>\n<h5 id=\"ide에서-디버깅\"><a href=\"#ide%EC%97%90%EC%84%9C-%EB%94%94%EB%B2%84%EA%B9%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>IDE에서 디버깅</h5>\n<ol>\n<li>OrderApplication.java 를 찾는다, main 함수를 찾는다. </li>\n<li>main 함수의 첫번째라인 (16) 의 왼쪽에 동그란 breakpoint 를 찾아 활성화한다</li>\n<li>main 함수 위에 조그만 \"Debug\"라는 링크를 클릭한다. (10초 정도 소요. 기다리셔야 합니다)</li>\n<li>잠시후 디버거가 활성화되고, 브레이크 포인트에 실행이 멈춘다.</li>\n<li>Continue 라는 화살표 버튼을 클릭하여 디버거를 진행시킨다.</li>\n<li>다음으로, Order.java 의 첫번째 실행지점에 디버그 포인트를 설정한다:  </li>\n</ol>\n<pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@PostPersist</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onPostPersist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">OrderPlaced</span> orderPlaced <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderPlaced</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 이부분</span>\n        <span class=\"token class-name\">BeanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyProperties</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> orderPlaced<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        orderPlaced<span class=\"token punctuation\">.</span><span class=\"token function\">publishAfterCommit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span></code></pre>\n<ol>\n<li>그런다음, 앞서 주문을 넣어본다</li>\n<li>위의 Order.java 에 디버거가 멈춤을 확인한후, variables 에서 local > this 객체의 내용을 확인한다.</li>\n</ol>\n<h3 id=\"실행중-프로세스-확인-및-삭제\"><a href=\"#%EC%8B%A4%ED%96%89%EC%A4%91-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%ED%99%95%EC%9D%B8-%EB%B0%8F-%EC%82%AD%EC%A0%9C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>실행중 프로세스 확인 및 삭제</h3>\n<pre class=\"language-java\"><code class=\"language-java\">netstat <span class=\"token operator\">-</span>lntp <span class=\"token operator\">|</span> grep <span class=\"token operator\">:</span><span class=\"token number\">808</span> \nkill <span class=\"token operator\">-</span><span class=\"token number\">9</span> <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>process id<span class=\"token punctuation\">></span></span></code></pre>\n<h4 id=\"상세설명\"><a href=\"#%EC%83%81%EC%84%B8%EC%84%A4%EB%AA%85\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>상세설명</h4>\n<iframe width=\"100%\" height=\"100%\" src=\"https://www.youtube.com/embed/J6yqEJrQUyk\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" 마이크로서비스의 실행","anchor":"#구현-마이크로서비스의-실행"},{"depth":3,"value":"생성된 마이크로 서비스들의 기동","anchor":"#생성된-마이크로-서비스들의-기동"},{"depth":5,"value":"터미널에서 mvn 으로 마이크로서비스 실행","anchor":"#터미널에서-mvn-으로-마이크로서비스-실행"},{"depth":5,"value":"IDE에서 실행","anchor":"#ide에서-실행"},{"depth":5,"value":"서비스 테스트","anchor":"#서비스-테스트"},{"depth":5,"value":"IDE에서 디버깅","anchor":"#ide에서-디버깅"},{"depth":3,"value":"실행중 프로세스 확인 및 삭제","anchor":"#실행중-프로세스-확인-및-삭제"},{"depth":4,"value":"상세설명","anchor":"#상세설명"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}