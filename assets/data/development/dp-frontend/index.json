{"hash":"111274b6c679aae8379740b3dad993eb43961e68","data":{"markdownPage":{"id":"500672013292f6e0e2d2bd918746dae4","title":"Data Projection with Frontend and HATEOAS","description":"","path":"/development/dp-frontend/","timeToRead":4,"content":"<h1 id=\"data-projection-with-frontend-and-hateoas\"><a href=\"#data-projection-with-frontend-and-hateoas\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data Projection with Frontend and HATEOAS</h1>\n<h1 id=\"data-projection-with-frontend-and-hateoas-1\"><a href=\"#data-projection-with-frontend-and-hateoas-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data Projection with Frontend and HATEOAS</h1>\n<h3 id=\"프론트엔드를-기반한-data-projection\"><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%EB%A5%BC-%EA%B8%B0%EB%B0%98%ED%95%9C-data-projection\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프론트엔드를 기반한 Data Projection</h3>\n<p>Data Projection의 첫번째 방법인 UI에서 Data를 Aggregate하는 방법으로 기본 생성된 VueJS 기반 프론트엔드를 활용한다: </p>\n<h4 id=\"프론트엔드를-테스트\"><a href=\"#%ED%94%84%EB%A1%A0%ED%8A%B8%EC%97%94%EB%93%9C%EB%A5%BC-%ED%85%8C%EC%8A%A4%ED%8A%B8\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>프론트엔드를 테스트</h4>\n<ul>\n<li>모든 마이크로 서비스(Order, Inventory)를 기동시킨다.</li>\n<li>Kafka 로컬 서버를 실행한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd kafka\ndocker-compose up</code></pre>\n<ul>\n<li>생성된 프론트엔드 서비스를 기동시킨다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd frontend\nnpm i\nnpm run serve</code></pre>\n<ul>\n<li>브라우저를 통하여 프론트엔드 서비스로 접속하기 위해 게이트웨이를 기동시킨다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd gateway\nmvn spring-boot:run</code></pre>\n<ul>\n<li>실행된 게이트웨이를 외부 접속이 가능하도록 Public에 노출한다.</li>\n<li>게이트웨이 라우팅 Rule에 '/'로 접속시 Frontend 서버로 포워딩 됨을 알 수 있다.</li>\n<li>게이트웨이를 통하여 접속해본다 (8088).</li>\n<li>게이트웨이를 통해서만 API 가 호출됨을 알 수 있다 (CORS: Cross-Origin-Resource-Sharing Issue)</li>\n<li>주문을 하기 위해 재고량을 우선 등록한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\"># 먼저 http Client를 설치한다.\npip install httpie\nhttp :8082/inventories id=1 stock=10</code></pre>\n<ul>\n<li>\n<p>다음과 같이 UI 에 접근하여 주문을 해본다:</p>\n<blockquote>\n<p>Order UI의 '+'를 클릭한다.</p>\n</blockquote>\n</li>\n</ul>\n<img width=\"574\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/191061282-9cba3a28-219e-4fde-baa9-f9713b3f889a.png\">\n<img width=\"574\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/191061179-211ff733-b7c7-4d26-9c33-e146ed565bf5.png\">\n<img width=\"574\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/191061043-c9796f3f-4758-4052-aff4-71171f0c14fe.png\">\n<h4 id=\"order-ui를-통한-delivery-와-inventory-정보의-통합\"><a href=\"#order-ui%EB%A5%BC-%ED%86%B5%ED%95%9C-delivery-%EC%99%80-inventory-%EC%A0%95%EB%B3%B4%EC%9D%98-%ED%86%B5%ED%95%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Order UI를 통한 Delivery 와 Inventory 정보의 통합</h4>\n<ul>\n<li>Order.vue 의 템플릿내(template Tag)에 Inventory 태그를 추가하여 Inventory가 불려지도록 구현한다:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">        &lt;v-card-text&gt;\n            &lt;String label=&quot;ProductId&quot; v-model=&quot;value.productId&quot; :editMode=&quot;editMode&quot;/&gt;\n            &lt;Number label=&quot;Qty&quot; v-model=&quot;value.qty&quot; :editMode=&quot;editMode&quot;/&gt;\n            &lt;String label=&quot;CustomerId&quot; v-model=&quot;value.customerId&quot; :editMode=&quot;editMode&quot;/&gt;\n            &lt;Number label=&quot;Amount&quot; v-model=&quot;value.amount&quot; :editMode=&quot;editMode&quot;/&gt;\n            &lt;String label=&quot;Status&quot; v-model=&quot;value.status&quot; :editMode=&quot;editMode&quot;/&gt;\n            &lt;String label=&quot;Address&quot; v-model=&quot;value.address&quot; :editMode=&quot;editMode&quot;/&gt;\n\n            &lt;Inventory v-model=&quot;inventory&quot;&gt;&lt;/Inventory&gt;\n\n        &lt;/v-card-text&gt;</code></pre>\n<ul>\n<li>v-model 로 연결된 변수인 inventory 를 선언해주고 기본 데이터를 준다: (98라인)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">        data: () =&gt; ({\n            snackbar: {\n                status: false,\n                timeout: 5000,\n                text: &#39;&#39;\n            },\n            inventory: {stock: 5}\n        }),</code></pre>\n<ul>\n<li>화면에 다음과 같이 출력됨을 확인한다:</li>\n</ul>\n<img width=\"462\" alt=\"image\" src=\"https://user-images.githubusercontent.com/487999/191063786-aa08928e-eda9-41a4-9c21-bcb9ccdddef5.png\">\n<ul>\n<li>Inventory data 를 동적으로 로딩하여 채워넣기</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">        data: () =&gt; ({\n            snackbar: {\n                status: false,\n                timeout: 5000,\n                text: &#39;&#39;\n            },\n            inventory: null\n        }),\n        async created(){\n            var result = await axios.get(&#39;/inventories/&#39; + this.value.productId);\n            this.inventory = result.data;\n        },\n    ...</code></pre>\n<h4 id=\"hateoas-link-를-통한-동적인-데이터-연관-관계-처리\"><a href=\"#hateoas-link-%EB%A5%BC-%ED%86%B5%ED%95%9C-%EB%8F%99%EC%A0%81%EC%9D%B8-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%97%B0%EA%B4%80-%EA%B4%80%EA%B3%84-%EC%B2%98%EB%A6%AC\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>HATEOAS Link 를 통한 동적인 데이터 연관 관계 처리</h4>\n<ul>\n<li>order/../infra/OrderHateoasProcessor.java:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">@Component\npublic class OrderHateoasProcessor implements RepresentationModelProcessor&lt;EntityModel&lt;Order&gt;&gt;  {\n\n    @Override\n    public EntityModel&lt;Order&gt; process(EntityModel&lt;Order&gt; model) {\n        model.add(Link.of(&quot;/inventories/&quot; + model.getContent().getProductId()).withRel(&quot;inventory&quot;));\n        \n        return model;\n    }\n    \n}</code></pre>\n<ul>\n<li>주문서비스를 재기동한다.</li>\n<li>재기동 후, http로 주문 한건을 생성해 본다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http :8081/orders productId=1 qty=3 customerId=gdhong address=Seoul</code></pre>\n<ul>\n<li>생성된 HATEOAS Link 를 확인:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">&gt; http :8081/orders\n{\n    &quot;_links&quot;: {\n        &quot;inventory&quot;: {\n            &quot;href&quot;: &quot;/inventories/1&quot;\n        },\n        &quot;order&quot;: {\n            &quot;href&quot;: &quot;http://localhost:8081/orders/1&quot;\n        },\n        &quot;self&quot;: {\n            &quot;href&quot;: &quot;http://localhost:8081/orders/1&quot;\n        }\n    },\n    &quot;address&quot;: &quot;Everland&quot;,\n    &quot;amount&quot;: null,\n    &quot;customerId&quot;: &quot;jjy&quot;,\n    &quot;productId&quot;: &quot;1&quot;,\n    &quot;qty&quot;: 1,\n    &quot;status&quot;: null\n}</code></pre>\n<ul>\n<li>Order.vue 에서 Inventory 데이터에 대한 URI 주소를 HATEOAS Link 를 통해서 간접적으로 주소를 획득하도록 수정:</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">        async created(){\n            var result = await axios.get(this.value._links.inventory.href);\n            this.inventory = result.data;\n        },</code></pre>\n<ul>\n<li>그 결과, 동일한 결과가 나타남을 Frontend를 통해 알 수 있다.</li>\n</ul>\n<h4 id=\"frontend-ui에서-마이크로서비스들에-흩어진-데이터를-composition할-수-있으나-반드시-backend-서비스가-alive해야-하며-data가-많을-경우-성능문제도-야기될-수-있는-방법이다\"><a href=\"#frontend-ui%EC%97%90%EC%84%9C-%EB%A7%88%EC%9D%B4%ED%81%AC%EB%A1%9C%EC%84%9C%EB%B9%84%EC%8A%A4%EB%93%A4%EC%97%90-%ED%9D%A9%EC%96%B4%EC%A7%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%A5%BC-composition%ED%95%A0-%EC%88%98-%EC%9E%88%EC%9C%BC%EB%82%98-%EB%B0%98%EB%93%9C%EC%8B%9C-backend-%EC%84%9C%EB%B9%84%EC%8A%A4%EA%B0%80-alive%ED%95%B4%EC%95%BC-%ED%95%98%EB%A9%B0-data%EA%B0%80-%EB%A7%8E%EC%9D%84-%EA%B2%BD%EC%9A%B0-%EC%84%B1%EB%8A%A5%EB%AC%B8%EC%A0%9C%EB%8F%84-%EC%95%BC%EA%B8%B0%EB%90%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%EB%B0%A9%EB%B2%95%EC%9D%B4%EB%8B%A4\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Frontend UI에서 마이크로서비스들에 흩어진 데이터를 Composition할 수 있으나, 반드시 Backend 서비스가 Alive해야 하며, Data가 많을 경우 성능문제도 야기될 수 있는 방법이다.</h4>\n<h3 id=\"확장시나리오-배송정보를-통합하여-출력\"><a href=\"#%ED%99%95%EC%9E%A5%EC%8B%9C%EB%82%98%EB%A6%AC%EC%98%A4-%EB%B0%B0%EC%86%A1%EC%A0%95%EB%B3%B4%EB%A5%BC-%ED%86%B5%ED%95%A9%ED%95%98%EC%97%AC-%EC%B6%9C%EB%A0%A5\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>확장시나리오: 배송정보를 통합하여 출력</h3>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Data Projection with Frontend and HATEOAS","anchor":"#data-projection-with-frontend-and-hateoas"},{"depth":1,"value":"Data Projection with Frontend and HATEOAS","anchor":"#data-projection-with-frontend-and-hateoas-1"},{"depth":3,"value":"프론트엔드를 기반한 Data Projection","anchor":"#프론트엔드를-기반한-data-projection"},{"depth":4,"value":"프론트엔드를 테스트","anchor":"#프론트엔드를-테스트"},{"depth":4,"value":"Order UI를 통한 Delivery 와 Inventory 정보의 통합","anchor":"#order-ui를-통한-delivery-와-inventory-정보의-통합"},{"depth":4,"value":"HATEOAS Link 를 통한 동적인 데이터 연관 관계 처리","anchor":"#hateoas-link-를-통한-동적인-데이터-연관-관계-처리"},{"depth":4,"value":"Frontend UI에서 마이크로서비스들에 흩어진 데이터를 Composition할 수 있으나, 반드시 Backend 서비스가 Alive해야 하며, Data가 많을 경우 성능문제도 야기될 수 있는 방법이다.","anchor":"#frontend-ui에서-마이크로서비스들에-흩어진-데이터를-composition할-수-있으나-반드시-backend-서비스가-alive해야-하며-data가-많을-경우-성능문제도-야기될-수-있는-방법이다"},{"depth":3,"value":"확장시나리오: 배송정보를 통합하여 출력","anchor":"#확장시나리오-배송정보를-통합하여-출력"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}}]}},"context":{}}