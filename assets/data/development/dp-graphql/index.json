{"hash":"06a886723e5e9e504c2e092ae07219a81ecc6278","data":{"markdownPage":{"id":"f49669fffa01e020ab34c63bb8736b40","title":"Data Projection with GraphQL","description":"","path":"/development/dp-graphql/","timeToRead":5,"content":"<h1 id=\"data-projection-with-graphql\"><a href=\"#data-projection-with-graphql\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data Projection with GraphQL</h1>\n<h1 id=\"data-projection-with-graphql-1\"><a href=\"#data-projection-with-graphql-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Data Projection with GraphQL</h1>\n<h3 id=\"graphql로-백엔드-데이터-통합\"><a href=\"#graphql%EB%A1%9C-%EB%B0%B1%EC%97%94%EB%93%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%86%B5%ED%95%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GraphQL로 백엔드 데이터 통합</h3>\n<p>Data Projection의 두번째 방법으로  Backend에서 Data를 Projection하는 전용의 서버로 구현하는 BFF 패턴을 소개한다: (Apollo 서버 활용)</p>\n<ul>\n<li>우측의 모델을 lab-shop-graphql 이름으로 'Fork'하여 커스터마이징 한다.</li>\n<li>GraphQL 용 Apollo Server 를 생성하기 위하여 CODE Preview > TOPPINGS 에서 \"Apollo GraphQL\" 선택</li>\n</ul>\n<img width=\"697\"  src=\"https://user-images.githubusercontent.com/487999/191050930-bca7a84e-ab92-4c41-a746-a4b40da3e58d.png\">\n<ul>\n<li>apollo 마이크로 서비스 폴더가 생성된 것을 확인하고, 코드를 Git 으로 PUSH 한다.</li>\n<li>Project IDE 를 Open 한다.</li>\n<li>GitPod가 로딩된 후, 커밋된 모델의 소스코드를 확인한다:</li>\n</ul>\n<ul>\n<li>주문,재고,배송 서비스를 모두 기동한다.</li>\n<li>주문서비스 기동(8081)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd order\nmvn spring-boot:run</code></pre>\n<ul>\n<li>재고서비스 기동(8082)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd inventory\nmvn spring-boot:run</code></pre>\n<ul>\n<li>배송서비스 기동(8083)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd delivery\nmvn spring-boot:run</code></pre>\n<ul>\n<li>상품을 등록하고 해당 상품을 주문한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8082/inventories id=1 stock=10\n\nhttp localhost:8081/orders productId=1 qty=1 customerId=&quot;1@uengine.org&quot;</code></pre>\n<ul>\n<li>GraphQL 기동(8089)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd apollo_graphql\nnpm install\nyarn start</code></pre>\n<ul>\n<li>\n<p>GraphQL Playground </p>\n<blockquote>\n<p>작성한 GraphQL Type, Resolver 명세확인, 데이터 요청 및 테스트가 가능한 워크벤치</p>\n</blockquote>\n</li>\n<li>Remote Explorer 에서 WebUI에 접속</li>\n</ul>\n<img width=\"1161\" alt=\"스크린샷 2022-09-23 오후 3 48 53\" src=\"https://user-images.githubusercontent.com/58163635/191912194-88d4b4a0-44fd-4f13-a014-73fc0b503797.png\">\n<p>** 이 때 서비스를 Make Public 꼭 해주어야 조회가 가능하다.</p>\n<h3 id=\"서비스-조회\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%A1%B0%ED%9A%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 조회</h3>\n<ul>\n<li>전체 주문서비스</li>\n</ul>\n<pre class=\"language-gql\"><code class=\"language-gql\">query getOrders {\n  orders {\n    productId\n    qty\n  }\n}</code></pre>\n<ul>\n<li>단일 주문서비스( id=1 주문서비스 )</li>\n</ul>\n<pre class=\"language-gql\"><code class=\"language-gql\">query getOrderById {\n  order(id: 1) {\n    productId\n    qty\n  }\n}</code></pre>\n<ul>\n<li>복합 서비스 조회</li>\n</ul>\n<p>복합적인 서비스 조회를 위하여 서브쿼리에 대한 Resolver 전략을 작성한다:</p>\n<ul>\n<li>resolver.ts</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">const resolvers = {\n    Order: {\n        delivery: async (root, {deliveryId}, {dataSources}) =&gt; {\n            try {\n                if (root &amp;&amp; root._links.self.href) {\n                    var parseLink = root._links.self.href.split(&#39;/&#39;)\n                    var getOrderId = parseLink[parseLink.length - 1]\n                    var deliveries = await dataSources.deliveryRestApi.getDeliveries();\n\n                    if(deliveries){\n                        var rtnVal = null\n                        Object.values(deliveries).forEach(function (delivery) {\n                            if(delivery &amp;&amp; delivery.orderId == getOrderId){\n                                rtnVal = delivery\n                            }\n                        })\n                        return rtnVal\n                    }\n                }\n                return null;\n            } catch (e) {\n                return null;\n            }\n        },\n        \n        inventory: async (root, {productId}, {dataSources}) =&gt; {\n            if (!productId) productId = root.productId\n\n            if (productId) {\n                return await dataSources.inventoryRestApi.getInventory(productId);\n            }\n            return null;\n        }\n    },\n    Inventory: {\n        // set Query\n    },\n    Delivery: {\n        // set Query\n    },\n\n    Query: {\n        order : async (_, { id }, { dataSources }) =&gt; {\n            return dataSources.orderRestApi.getOrder(id);\n        },\n        orders : async (_, __, { dataSources }) =&gt; {\n            return dataSources.orderRestApi.getOrders();\n        },\n        inventory : async (_, { id }, { dataSources }) =&gt; {\n            return dataSources.inventoryRestApi.getInventory(id);\n        },\n        inventories : async (_, __, { dataSources }) =&gt; {\n            return dataSources.inventoryRestApi.getInventories();\n        },\n        delivery : async (_, { id }, { dataSources }) =&gt; {\n            return dataSources.deliveryRestApi.getDelivery(id);\n        },\n        deliveries : async (_, __, { dataSources }) =&gt; {\n            return dataSources.deliveryRestApi.getDeliveries();\n        },\n    }\n};\n\nexport default resolvers;</code></pre>\n<ul>\n<li>Type 선언에 속성추가 :  typeDefs.ts</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">    type Order {\n    \tid: Long! \n\t\t\tproductId: String \n\t\t\tqty: Integer \n\t\t\tcustomerId: String \n\t\t\tamount: Double \n\t\t\tstatus: String \n\t\t\taddress: String\n      delivery: Delivery\n      inventory: Inventory\n    }</code></pre>\n<p>order 서비스의 연결된 product, delivery 정보조회</p>\n<pre class=\"language-gql\"><code class=\"language-gql\">query {\n  orders {\n    qty\n    customerId\n    \n    delivery {\n      orderId\n    }\n\n    inventory{\n      stock\n    }\n  }\n\n}</code></pre>\n<ul>\n<li>호출결과</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">{\n  &quot;data&quot;: {\n    &quot;orders&quot;: [\n      {\n        &quot;qty&quot;: 1,\n        &quot;customerId&quot;: &quot;1@uengine.org&quot;,\n        &quot;delivery&quot;: {\n          &quot;orderId&quot;: 1\n        },\n        &quot;inventory&quot;: {\n          &quot;stock&quot;: 9\n        }\n      }\n    ]\n  }\n}</code></pre>\n<h4 id=\"graphql-파일-참고\"><a href=\"#graphql-%ED%8C%8C%EC%9D%BC-%EC%B0%B8%EA%B3%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GraphQL 파일 참고</h4>\n<ol>\n<li>src/graphql/resolvers.js</li>\n</ol>\n<ul>\n<li>데이터를 가져오는 구체적인 과정을 구현     </li>\n<li>서비스의 액션들을 함수로 지정, 요청에 따라 데이터를 반환(Query), Mutation(입력, 수정, 삭제) 하는 Query 또는 구현체 작성</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">예시)\nconst resolvers = {\n  //typeDefs의 객체 유형 정보(Order, Query, Product) 호출 선언\n  \n  Query: {\n     //...\n  } \n  Order: {\n      deliveries: (root, args, {dataSources}) =&gt; {}\n\n      //  함수명: (parent, args, context, info) =&gt; {}\n      //  * parent  : 루트에 대한 resolver의 반환 값.\n      //  * args    : 함수 호출시 args 또는 {parameter}으로 인자값.\n      //  * context : \n            특정 작업을 위해 실행되는 모든 resolver에 전달되는 개체,\n            데이터베이스 연결과 같은 컨텍스트를 공유.\n          {dataSources}: xxx-rest-api.js와 연결된 데이터 호출.\n      //  * info    : 필드명, 루트에서 필드까지의 경로 등 작업의 실행 상태.\n  }\n}</code></pre>\n<ol start=\"2\">\n<li>\n<p>src/graphql/typeDefs.js</p>\n<ul>\n<li>GraphQL 명세서에서 사용될 데이터, 요청의 타입 (gql로 생성됨)</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>Type Definitions</li>\n<li>객체 타입과 필드명 선언</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">type Delivery {\n        id: Long!\n        orderId: Long \n        productId: Long \n        customerId: String \n        deliveryAddress: String \n        deliveryState: String \n        orders: [Order]\n        order(orderId: Long): Order\n    }\n  \n    type Order {\n        id: Long! \n        productId: Long\n        customerId: String\n        state: String\n        deliveries: [Delivery]\n        delivery(deliveryId: Long): Delivery\n    }\n\n    // []: 배열\n    //  !: 필수값</code></pre>\n<ol start=\"3\">\n<li>\n<p>src/restApiServer/xxx-rest-api.js</p>\n<ul>\n<li>apollo-datasource-rest의 해당 서비스의 호출 함수및 호출 경로 설정.</li>\n</ul>\n</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">import {RESTDataSource} from &#39;apollo-datasource-rest&#39;;\n// apollo-datasource-rest 모듈\n\nclass orderRestApi extends RESTDataSource {\n    constructor() {\n        super();\n        this.baseURL = &#39;http://order:8080&#39;;\n        // 해당 서비스의 호출 주소 정보.\n    }\n\n    // 함수명() \n    async getOrders() {\n        const data = await this.get(&#39;/orders&#39;, {})\n        // baseURL 이후 url 호출 정보.\n\n        var value = this.stringToJson(data);\n        // 호출정보 String to Json 으로 변경. \n        \n        return value\n        // 호출 정보 리턴.\n    }\n\n    async getOrder(id) {\n        // ...\n    }\n\n    stringToJson(str){\n        if(typeof str == &#39;string&#39;){\n            str = JSON.parse(str);\n        }\n        return str;\n    }\n}</code></pre>\n<ol start=\"4\">\n<li>\n<p>src/index.js</p>\n<ul>\n<li>선언부 호출 매핑및 선언.</li>\n</ul>\n</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">import {ApolloServer} from &#39;apollo-server&#39;;\nimport resolvers from &#39;./graphql/resolvers.js&#39;;\nimport typeDefs from &#39;./graphql/typeDefs.js&#39;;\nimport orderRestApi from &#39;./restApiServer/order-rest-api.js&#39;\nimport deliveryRestApi from &#39;./restApiServer/delivery-rest-api.js&#39;\n\nconst server = new ApolloServer({\n    typeDefs,\n    resolvers,\n    dataSources: () =&gt; ({\n        orderRestApi: new orderRestApi(),\n        deliveryRestApi: new deliveryRestApi()\n    }),\n    // dataSources 선언 하여 xxxRestApi 호출정보.\n});\n\nserver.listen({\n    port: 8089,\n}).then(({url}) =&gt; {\n    console.log(`🚀  Server ready at ${url}`);\n});</code></pre>\n<h3 id=\"미션--delivery-조회를-위한-resolver-효율화\"><a href=\"#%EB%AF%B8%EC%85%98--delivery-%EC%A1%B0%ED%9A%8C%EB%A5%BC-%EC%9C%84%ED%95%9C-resolver-%ED%9A%A8%EC%9C%A8%ED%99%94\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>미션:  delivery 조회를 위한 resolver 효율화</h3>\n<p>현재 주문에 대한 배송건을 찾는 로직은 전체 배송을 모두 조회한 후 orderId와 비교하는 비효율적인 조회를 하고 있다. 이를 다음과 같이 findByOrderId 를 통해 백엔드에서 DB 조회한 결과를 가져오도록 변경하기 위하여 data source 부분의 코드와 delivery 서비스를 개선하시오:</p>\n<pre class=\"language-text\"><code class=\"language-text\">const resolvers = {\n    Order: {\n        delivery: async (root, {deliveryId}, {dataSources}) =&gt; {\n            var parseLink = root._links.self.href.split(&#39;/&#39;)\n            var orderId = parseLink[parseLink.length - 1]\n            var deliveries = await dataSources.deliveryRestApi.findByOrderId(orderId);\n\n            if(deliveries &amp;&amp; deliveries.length&gt;0)\n                return deliveries[0];\n\n            return null;\n        },\n      ...</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":"Data Projection with GraphQL","anchor":"#data-projection-with-graphql"},{"depth":1,"value":"Data Projection with GraphQL","anchor":"#data-projection-with-graphql-1"},{"depth":3,"value":"GraphQL로 백엔드 데이터 통합","anchor":"#graphql로-백엔드-데이터-통합"},{"depth":3,"value":"서비스 조회","anchor":"#서비스-조회"},{"depth":4,"value":"GraphQL 파일 참고","anchor":"#graphql-파일-참고"},{"depth":3,"value":"미션:  delivery 조회를 위한 resolver 효율화","anchor":"#미션--delivery-조회를-위한-resolver-효율화"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/service/","title":"12번가 마이크로서비스 라우터(Service) 생성"}},{"node":{"path":"/business/","title":"[이벤트스토밍] - 12번가 쇼핑몰 예제"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] - DDD Food Delivery 예제"}},{"node":{"path":"/development/understanding-jpa-based-single-microservice/","title":"마이크로서비스 구현 및 동작원리 이해"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] - 구글 드라이브 예제"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-service-mesh-istio-2/","title":"[Service Mesh] Istio-2"}},{"node":{"path":"/operations/ops-readiness/","title":"셀프힐링 & 무정지 배포 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/operations/ops-pod-status/","title":"Pod 상태값에 따른 마이크로서비스 트러블 슈팅"}},{"node":{"path":"/operations/ops-persistence-volume-efs/","title":"파일공유를 위한 NAS 스토리지 생성과 설정"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Command"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/microservice-logging/","title":"마이크로서비스 통합 로깅 with EFK stack"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-metric-based-hpa/","title":"[Service Mesh] Istio Metrics based HPA"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/pubsub-idempotency/","title":"Pub/Sub 방식의 연동 - Choreography with Idempotency"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/apply-security-to-12st-mall/","title":"12번가 Mall에 토큰인증 적용하기"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/development/token-based-auth/","title":"JWT Token 기반 인증 인가"}},{"node":{"path":"/development/pubsub-deadline/","title":"Pub/Sub 방식의 연동 - Choreography with Deadline added"}},{"node":{"path":"/development/ops-docker/","title":"Application Packaging with Container (Docker)"}},{"node":{"path":"/development/pub-sub/","title":"Pub/Sub 방식의 연동 "}},{"node":{"path":"/development/oauth2with-keycloak/","title":"JWT Token 기반 인증 인가 - Advanced"}},{"node":{"path":"/development/monolith-2-misvc/","title":"Req/Res 방식의 MSA 연동 "}},{"node":{"path":"/development/kafka-connect/","title":"CDC(Change Data Capture) with Kafka"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Kafka Retry & Dead Letter Queue "}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka Scaling "}},{"node":{"path":"/development/kafka-basic/","title":"Kafka 기본 명령어 "}},{"node":{"path":"/development/dp-graphql/","title":"Data Projection with GraphQL"}},{"node":{"path":"/development/contract-test/","title":"Contract Test (Consumer Driven Test)"}},{"node":{"path":"/development/gateway/","title":"API Gateway"}},{"node":{"path":"/development/dp-frontend/","title":"Data Projection with Frontend and HATEOAS"}},{"node":{"path":"/development/dp-cqrs/","title":"Data Projection with CQRS"}},{"node":{"path":"/development/compensation-correlation/","title":"Pub/Sub 방식의 연동 - Compensation 과 Correlation"}},{"node":{"path":"/development/cna-start/","title":"단위 마이크로 서비스의 실행 "}},{"node":{"path":"/development/circuit-breaker/","title":"Req/Res 방식에서 장애전파 차단 - 서킷브레이커 "}}]}},"context":{}}