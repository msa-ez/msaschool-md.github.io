{"hash":"f58eca0934380d084e357b0b95045cf3b386277b","data":{"markdownPage":{"id":"f49669fffa01e020ab34c63bb8736b40","title":"[구현] 데이터프로젝션-GraphQL","description":"","path":"/development/dp-graphql/","timeToRead":2,"content":"<h1 id=\"구현-데이터프로젝션-graphql\"><a href=\"#%EA%B5%AC%ED%98%84-%EB%8D%B0%EC%9D%B4%ED%84%B0%ED%94%84%EB%A1%9C%EC%A0%9D%EC%85%98-graphql\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>[구현] 데이터프로젝션-GraphQL</h1>\n<h3 id=\"graphql로-백엔드-데이터-통합\"><a href=\"#graphql%EB%A1%9C-%EB%B0%B1%EC%97%94%EB%93%9C-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%86%B5%ED%95%A9\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GraphQL로 백엔드 데이터 통합</h3>\n<ul>\n<li>주문,상품,배송 서비스를 모두 기동한다.</li>\n<li>터미널 3개를 열어서 각각의 프로젝트로 이동한 후, run을 실행한다.</li>\n<li>주문서비스 기동(8081)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd reqres_orders\nmvn spring-boot:run</code></pre>\n<ul>\n<li>상품서비스 기동(8085)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd reqres_products\nmvn spring-boot:run</code></pre>\n<ul>\n<li>배송서비스 기동(8082)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd reqres_delivery\nmvn spring-boot:run</code></pre>\n<ul>\n<li>1개의 주문을 생성한다.</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">http localhost:8081/orders productId=1 quantity=1 customerId=&quot;1@uengine.org&quot;</code></pre>\n<ul>\n<li>GraphQL 기동(8089)</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">cd apollo_graphql\nnpm install\nnpm start</code></pre>\n<ul>\n<li>\n<p>GraphQL Playground </p>\n<blockquote>\n<p>작성한 GraphQL Type, Resolver 명세확인, 데이터 요청 및 테스트가 가능한 워크벤치</p>\n</blockquote>\n</li>\n<li>Labs > 포트열기 > 8089로 WebUI에 접속</li>\n</ul>\n<h3 id=\"서비스-조회\"><a href=\"#%EC%84%9C%EB%B9%84%EC%8A%A4-%EC%A1%B0%ED%9A%8C\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>서비스 조회</h3>\n<ul>\n<li>전체 주문서비스</li>\n</ul>\n<pre class=\"language-gql\"><code class=\"language-gql\">query getOrders {\n  orders {\n    productId\n    productName\n    quantity\n    price\n  }\n}</code></pre>\n<ul>\n<li>단일 주문서비스( id=1 주문서비스 )</li>\n</ul>\n<pre class=\"language-gql\"><code class=\"language-gql\">query getOrderById {\n  order(orderId: 1) {\n    productId\n    productName\n    quantity\n    price\n  }\n}</code></pre>\n<ul>\n<li>복합 서비스 조회\norder 서비스의 연결된 product, delivery 정보조회</li>\n</ul>\n<pre class=\"language-gql\"><code class=\"language-gql\">query Query{\n  orders {\n    quantity\n    customerId\n    state\n    product {\n      price\n      name\n    }\n    delivery {\n      deliveryAddress\n    }\n  }\n}</code></pre>\n<h4 id=\"graphql-파일-참고\"><a href=\"#graphql-%ED%8C%8C%EC%9D%BC-%EC%B0%B8%EA%B3%A0\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>GraphQL 파일 참고</h4>\n<ol>\n<li>src/graphql/resolvers.js</li>\n</ol>\n<ul>\n<li>데이터를 가져오는 구체적인 과정을 구현     </li>\n<li>서비스의 액션들을 함수로 지정, 요청에 따라 데이터를 반환(Query), Mutation(입력, 수정, 삭제) 하는 Query 또는 구현체 작성</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">예시)\nconst resolvers = {\n  //typeDefs의 객체 유형 정보(Order, Query, Product) 호출 선언\n  \n  Query: {\n     //...\n  } \n  Order: {\n      deliveries: (root, args, {dataSources}) =&gt; {}\n\n      //  함수명: (parent, args, context, info) =&gt; {}\n      //  * parent  : 루트에 대한 resolver의 반환 값.\n      //  * args    : 함수 호출시 args 또는 {parameter}으로 인자값.\n      //  * context : \n            특정 작업을 위해 실행되는 모든 resolver에 전달되는 개체,\n            데이터베이스 연결과 같은 컨텍스트를 공유.\n          {dataSources}: xxx-rest-api.js와 연결된 데이터 호출.\n      //  * info    : 필드명, 루트에서 필드까지의 경로 등 작업의 실행 상태.\n  }\n}</code></pre>\n<ol start=\"2\">\n<li>\n<p>src/graphql/typeDefs.js</p>\n<ul>\n<li>GraphQL 명세서에서 사용될 데이터, 요청의 타입 (gql로 생성됨)</li>\n</ul>\n</li>\n</ol>\n<ul>\n<li>Type Definitions</li>\n<li>객체 타입과 필드명 선언</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">type Delivery {\n        id: Long!\n        orderId: Long \n        productId: Long \n        customerId: String \n        deliveryAddress: String \n        deliveryState: String \n        orders: [Order]\n        order(orderId: Long): Order\n    }\n  \n    type Order {\n        id: Long! \n        productId: Long\n        customerId: String\n        state: String\n        deliveries: [Delivery]\n        delivery(deliveryId: Long): Delivery\n    }\n\n    // []: 배열\n    //  !: 필수값</code></pre>\n<ol start=\"3\">\n<li>\n<p>src/restApiServer/xxx-rest-api.js</p>\n<ul>\n<li>apollo-datasource-rest의 해당 서비스의 호출 함수및 호출 경로 설정.</li>\n</ul>\n</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">import {RESTDataSource} from &#39;apollo-datasource-rest&#39;;\n// apollo-datasource-rest 모듈\n\nclass orderRestApi extends RESTDataSource {\n    constructor() {\n        super();\n        this.baseURL = &#39;http://order:8080&#39;;\n        // 해당 서비스의 호출 주소 정보.\n    }\n\n    // 함수명() \n    async getOrders() {\n        const data = await this.get(&#39;/orders&#39;, {})\n        // baseURL 이후 url 호출 정보.\n\n        var value = this.stringToJson(data);\n        // 호출정보 String to Json 으로 변경. \n        \n        return value\n        // 호출 정보 리턴.\n    }\n\n    async getOrder(id) {\n        // ...\n    }\n\n    stringToJson(str){\n        if(typeof str == &#39;string&#39;){\n            str = JSON.parse(str);\n        }\n        return str;\n    }\n}</code></pre>\n<ol start=\"4\">\n<li>\n<p>src/index.js</p>\n<ul>\n<li>선언부 호출 매핑및 선언.</li>\n</ul>\n</li>\n</ol>\n<pre class=\"language-text\"><code class=\"language-text\">import {ApolloServer} from &#39;apollo-server&#39;;\nimport resolvers from &#39;./graphql/resolvers.js&#39;;\nimport typeDefs from &#39;./graphql/typeDefs.js&#39;;\nimport orderRestApi from &#39;./restApiServer/order-rest-api.js&#39;\nimport deliveryRestApi from &#39;./restApiServer/delivery-rest-api.js&#39;\n\nconst server = new ApolloServer({\n    typeDefs,\n    resolvers,\n    dataSources: () =&gt; ({\n        orderRestApi: new orderRestApi(),\n        deliveryRestApi: new deliveryRestApi()\n    }),\n    // dataSources 선언 하여 xxxRestApi 호출정보.\n});\n\nserver.listen({\n    port: 8089,\n}).then(({url}) =&gt; {\n    console.log(`🚀  Server ready at ${url}`);\n});</code></pre>\n","sidebar":"business","next":"","prev":"","headings":[{"depth":1,"value":" 데이터프로젝션-GraphQL","anchor":"#구현-데이터프로젝션-graphql"},{"depth":3,"value":"GraphQL로 백엔드 데이터 통합","anchor":"#graphql로-백엔드-데이터-통합"},{"depth":3,"value":"서비스 조회","anchor":"#서비스-조회"},{"depth":4,"value":"GraphQL 파일 참고","anchor":"#graphql-파일-참고"}]},"allMarkdownPage":{"edges":[{"node":{"path":"/operations/ops-service-mesh-istio/","title":"[Service Mesh] Istio"}},{"node":{"path":"/operations/ops-utility/","title":"쿠버네티스 유틸리티"}},{"node":{"path":"/operations/ops-readiness/","title":"무정지 배포 실습"}},{"node":{"path":"/operations/ops-persistence-volume/","title":"파일시스템 (볼륨) 연결과 데이터베이스 설정"}},{"node":{"path":"/business/zero-based-cna/","title":"[설계] ES모델 기반 Inner 아키텍처 이해"}},{"node":{"path":"/development/dp-graphql/","title":"[구현] 데이터프로젝션-GraphQL"}},{"node":{"path":"/operations/ops-liveness/","title":"셀프힐링 실습"}},{"node":{"path":"/operations/ops-ingress-virtualhost/","title":"Ingress - Virtual Host based"}},{"node":{"path":"/operations/ops-ingress/","title":"Ingress 를 통한 진입점 통일 - Path-based routing"}},{"node":{"path":"/operations/ops-kubernetes/","title":"Kubernetes Basic Commands"}},{"node":{"path":"/operations/ops-deploy-my-app/","title":"애플리케이션 패키징,도커라이징,클러스터 배포"}},{"node":{"path":"/operations/ops-argo-rollout-canary-istio/","title":"[GitOps] Argo Rollout 와 Istio 를 통한 카나리 배포"}},{"node":{"path":"/operations/ops-autoscale/","title":"Pod Auto Scaling"}},{"node":{"path":"/operations/ops-aws-setting/","title":"AWS Cloud Setup(EKS, ECR 설정)"}},{"node":{"path":"/operations/ops-anatomy-kubernetes/","title":"쿠버네티스 내부구조 분석"}},{"node":{"path":"/operations/msa-logging/","title":"MSA 로깅 with EFK Stack"}},{"node":{"path":"/operations/istio-traffic/","title":"[Service Mesh] Istio 를 통한 동적 트래픽 라우팅"}},{"node":{"path":"/operations/k8s-monitoring/","title":"MSA 모니터링 with installing Grafana"}},{"node":{"path":"/operations/istio-resiliency-part2/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part2 - 서킷브레이커"}},{"node":{"path":"/operations/istio-resiliency-part1/","title":"[Service Mesh] Istio 를 통한 서비스 회복성 Part1 - 타임아웃/재시도"}},{"node":{"path":"/operations/istio-msa-telemetry/","title":"[Service Mesh] MSA 모니터링 w/ Istio addon Grafana"}},{"node":{"path":"/operations/azure/","title":"Azure Cloud Setup (AKS, ACR 설정)"}},{"node":{"path":"/operations/end-to-end/","title":"12번가 전체 마이크로서비스의 배포"}},{"node":{"path":"/operations/gitops-argo-cd/","title":"[GitOps] Argo CD 를 통한 카나리 배포"}},{"node":{"path":"/development/ops-docker/","title":"[빌드] Docker Image Build & Push"}},{"node":{"path":"/development/keycloak-oauth2-3/","title":"Fine grained RBAC w/ Resource Server"}},{"node":{"path":"/development/oauth2withkeycloak/","title":"JWT토큰 기반 인증인가 w/ Keycloak Authz-svr"}},{"node":{"path":"/development/oauth2/","title":"JWT토큰 기반 인증인가 w/ Spring Authz-svr"}},{"node":{"path":"/development/monolith2misvc/","title":"[구현] Req/Res 방식의 MSA 연동"}},{"node":{"path":"/development/keycloak-oauth2-1/","title":"Keycloak Authorization 서버 설정"}},{"node":{"path":"/development/kafka-retry-dlq/","title":"Retry & Dead Letter Queue"}},{"node":{"path":"/development/kafka-scaling/","title":"Kafka 스케일링"}},{"node":{"path":"/development/keycloak-oauth2-2/","title":"Keycloak OIDC w/ OAuth2 Client"}},{"node":{"path":"/development/kafka-base/","title":"[pre-lab] 카프카 연습"}},{"node":{"path":"/development/gateway/","title":"[구현] 게이트웨이를 통한 진입점 통일"}},{"node":{"path":"/development/front-end/","title":"프론트엔드 개발"}},{"node":{"path":"/development/kafka-manual-commit/","title":"Kafka 수동커밋"}},{"node":{"path":"/development/dp-cqrs/","title":"[구현] 데이터프로젝션-CQRS"}},{"node":{"path":"/development/dp-composite-svc/","title":"[구현] 데이터프로젝션-컴포지트서비스"}},{"node":{"path":"/development/cqrs-modeling/","title":"[pre-lab] CQRS 샘플 모델링"}},{"node":{"path":"/development/contract-test/","title":"[테스트] Consumer Driven Test 기반 Contract Test"}},{"node":{"path":"/development/cna-pubsub2/","title":"[구현] Pub/Sub - Compensation and Correlation"}},{"node":{"path":"/development/cna-start/","title":"[구현] 마이크로서비스의 실행"}},{"node":{"path":"/development/cna-pubsub/","title":"[구현] Pub/Sub 방식의 MSA 연동"}},{"node":{"path":"/development/circuitbreaker/","title":"[구현] Req/Res 방식에서 장애전파 차단(서킷브레이커 패턴)"}},{"node":{"path":"/development/capstone-project-1/","title":"[Capstone Prj.] Simple Mall - Scenario/Modeling"}},{"node":{"path":"/development/capstone-project-2/","title":"[Capstone Prj.] Simple Mall - Implementation"}},{"node":{"path":"/business/ddd-google-drive/","title":"[이벤트스토밍] DDD 구글 드라이브 예제"}},{"node":{"path":"/development/advanced-connect/","title":"Kafka Connect"}},{"node":{"path":"/business/","title":"[분석] DDD 이벤트의 도출 - 12번가 쇼핑몰"}},{"node":{"path":"/business/design-to-code/","title":"[설계] ES모델기반 템플릿 코드 분석"}},{"node":{"path":"/business/eventstorming-fooddelivery/","title":"[이벤트스토밍] DDD Food Delivery 예제"}},{"node":{"path":"/business/collaborative-eventstorming/","title":"[이벤트스토밍] Collaborative Eventstorming"}}]}},"context":{}}